FUNCTION_BLOCK Parker
  VAR
    offset_1 : INT := 24;
    offset_2 : INT := 1;
    offset_3 : INT := 77;
  END_VAR
  VAR_OUTPUT
    cycle_len_1 : ARRAY [1..3] OF INT := [38, 34, 18];
    cycle_len_2 : ARRAY [1..3] OF INT := [38, 44, 18];
    cycle_len_3 : ARRAY [1..3] OF INT := [37, 39, 24];
    offset_arr : ARRAY [1..3] OF INT;
  END_VAR

  offset_arr[1] := offset_1;
  offset_arr[2] := offset_2;
  offset_arr[3] := offset_3;
END_FUNCTION_BLOCK


FUNCTION_BLOCK Ruggles
  VAR
    offset_1 : INT := 0;
    offset_2 : INT := 63;
    offset_3 : INT := 69;
  END_VAR
  VAR_OUTPUT
    cycle_len_1 : ARRAY [1..6] OF INT := [31, 19, 0, 0, 23, 17];
    cycle_len_2 : ARRAY [1..6] OF INT := [33, 21, 0, 0, 28, 18];
    cycle_len_3 : ARRAY [1..6] OF INT := [35, 22, 0, 0, 26, 17];
    offset_arr : ARRAY [1..3] OF INT;
  END_VAR
  offset_arr[1] := offset_1;
  offset_arr[2] := offset_2;
  offset_arr[3] := offset_3;
  (* This will cause error, unless in the declaration: *)
  (* cycle_len_3 := [35, 22, 0, 0, 26, 17]; *)
  (* It has to be: cycle_len_3[1] := 35; *)  

END_FUNCTION_BLOCK


FUNCTION_BLOCK Forsyth
  VAR
    offset_1 : INT := 14;
    offset_2 : INT := 87;
    offset_3 : INT := 98;
  END_VAR
  VAR_OUTPUT
    cycle_len_1 : ARRAY [1..3] OF INT := [46, 29, 15];
    cycle_len_2 : ARRAY [1..3] OF INT := [57, 28, 15];
    cycle_len_3 : ARRAY [1..3] OF INT := [56, 29, 15];
    offset_arr : ARRAY [1..3] OF INT;
  END_VAR
  offset_arr[1] := offset_1;
  offset_arr[2] := offset_2;
  offset_arr[3] := offset_3;
END_FUNCTION_BLOCK


FUNCTION_BLOCK TOD_Detector
  VAR_INPUT
    CDT : DT;
    TOD_START : TOD;
    TOD_END : TOD;
  END_VAR
  VAR_OUTPUT
    WITHIN_TOD : BOOL;
  END_VAR
  VAR
    DATE_AND_TIME_TO_TIME_OF_DAY7_OUT : TOD;
    LT12_OUT : BOOL;
    GT11_OUT : BOOL;
    AND14_OUT : BOOL;
  END_VAR

  DATE_AND_TIME_TO_TIME_OF_DAY7_OUT := DATE_AND_TIME_TO_TIME_OF_DAY(CDT);
  LT12_OUT := LT(DATE_AND_TIME_TO_TIME_OF_DAY7_OUT, TOD_END);
  GT11_OUT := GT(DATE_AND_TIME_TO_TIME_OF_DAY7_OUT, TOD_START);
  AND14_OUT := AND(LT12_OUT, GT11_OUT);
  WITHIN_TOD := AND14_OUT;
END_FUNCTION_BLOCK

FUNCTION_BLOCK Weekday_Detector
  VAR_INPUT
    CDT : DT;
  END_VAR
  VAR_OUTPUT
    IS_WEEKDAY : BOOL;
  END_VAR
  VAR
    days_7 : INT := 7;
    weekdays_5 : INT := 5;
    DATE_AND_TIME_TO_DATE6_OUT : DATE;
    SUB_DATE_DATE20_OUT : TIME;
    DIVTIME47_OUT : TIME;
    TIME_TO_INT49_OUT : INT;
    MOD50_OUT : INT;
    LE53_OUT : BOOL;
  END_VAR

  DATE_AND_TIME_TO_DATE6_OUT := DATE_AND_TIME_TO_DATE(CDT);
  SUB_DATE_DATE20_OUT := SUB_DATE_DATE(DATE_AND_TIME_TO_DATE6_OUT, D#2020-08-31);
  DIVTIME47_OUT := DIVTIME(SUB_DATE_DATE20_OUT, 86400);
  TIME_TO_INT49_OUT := TIME_TO_INT(DIVTIME47_OUT);
  MOD50_OUT := MOD(TIME_TO_INT49_OUT, days_7);
  LE53_OUT := LE(MOD50_OUT, weekdays_5);
  IS_WEEKDAY := LE53_OUT;
END_FUNCTION_BLOCK

FUNCTION_BLOCK Cycle_Detector
  VAR_INPUT
    CDT : DT;
  END_VAR
  VAR_OUTPUT
    Cycle_No : INT;
  END_VAR
  VAR
    TOD_Detector0 : TOD_Detector;
    TOD_Detector1 : TOD_Detector;
    Cycle1 : BOOL;
    Cycle2 : BOOL;
    Cycle3 : BOOL;
    weekday_d0 : Weekday_Detector;
    MUX8_ENO : BOOL;
    MUX8_OUT : INT;
    AND20_OUT : BOOL;
    AND2_OUT : BOOL;
    OR40_OUT : BOOL;
    NOT41_OUT : BOOL;
    MUX10_ENO : BOOL;
    MUX10_OUT : BOOL;
    MUX5_ENO : BOOL;
    MUX5_OUT : BOOL;
  END_VAR

  Cycle_No := 1;

  MUX8_OUT := MUX(EN := Cycle3, K := 2, IN0 := 0, IN1 := 1, IN2 := 2, ENO => MUX8_ENO);
  IF MUX8_ENO THEN
      Cycle_No := MUX8_OUT;
  END_IF;
  TOD_Detector1(CDT := CDT, TOD_START := TOD#15:0:0, TOD_END := TOD#19:0:0);
  weekday_d0(CDT := CDT);
  AND20_OUT := AND(TOD_Detector1.WITHIN_TOD, weekday_d0.IS_WEEKDAY);
  Cycle3 := AND20_OUT;
  TOD_Detector0(CDT := CDT, TOD_START := TOD#6:0:0, TOD_END := TOD#10:0:0);
  AND2_OUT := AND(weekday_d0.IS_WEEKDAY, TOD_Detector0.WITHIN_TOD);
  OR40_OUT := OR(AND20_OUT, AND2_OUT);
  NOT41_OUT := NOT(OR40_OUT);
  Cycle1 := NOT41_OUT;
  (*
  MUX10_OUT := MUX(EN := Cycle1, K := 0, IN0 := 0, IN1 := 1, IN2 := 2, ENO => MUX10_ENO);
  IF MUX10_ENO THEN
    Cycle_No := MUX10_OUT;
  END_IF;
  Cycle2 := AND2_OUT;
  MUX5_OUT := MUX(EN := Cycle2, K := 1, IN0 := 0, IN1 := 1, IN2 := 2, ENO => MUX5_ENO);
  IF MUX5_ENO THEN
    Cycle_No := MUX5_OUT;
  END_IF;
  *)
  IF Cycle1 THEN
    Cycle_No := 1;
  END_IF;
  IF Cycle2 THEN
    Cycle_No := 2;
  END_IF;
  IF Cycle3 THEN
    Cycle_No := 3;
  END_IF;

END_FUNCTION_BLOCK


PROGRAM Field_Master
  VAR
    cur_offset_parker AT %IW0: INT := 0;
    cur_offset_ruggles AT %IW1: INT := 0;
    cur_offset_forsyth AT %IW2: INT := 0;
    manual_offset_parker AT %IW3: INT := 0;
    manual_offset_ruggles AT %IW4: INT := 0;
    manual_offset_forsyth AT %IW5: INT := 0;
    offset_out_parker AT %QW1: INT;
    offset_out_ruggles AT %QW2: INT;
    offset_out_forsyth AT %QW3: INT;
    phase_1_parker AT %QW4: INT;
    phase_2_parker AT %QW5: INT;
    phase_3_parker AT %QW6: INT;
    phase_1_ruggles AT %QW7: INT;
    phase_2_ruggles AT %QW8: INT;
    phase_3_ruggles AT %QW9: INT;
    phase_4_ruggles AT %QW10: INT;
    phase_5_ruggles AT %QW11: INT;
    phase_6_ruggles AT %QW12: INT;
    phase_1_forsyth AT %QW13: INT;
    phase_2_forsyth AT %QW14: INT;
    phase_3_forsyth AT %QW15: INT;
  END_VAR
  VAR
    Cycle_Det : Cycle_Detector;
    Pars_parker : Parker;
    Pars_ruggles : Ruggles;
    Pars_forsyth : Forsyth;
  END_VAR


  offset_out_parker := Pars_parker.offset_arr[Cycle_Det.Cycle_No];
  offset_out_ruggles := Pars_ruggles.offset_arr[Cycle_Det.Cycle_No];
  offset_out_forsyth := Pars_forsyth.offset_arr[Cycle_Det.Cycle_No];

  IF EQ(Cycle_Det.Cycle_No, 1) THEN
    phase_1_parker := Pars_parker.cycle_len_1[1];  
    phase_2_parker := Pars_parker.cycle_len_1[2];  
    phase_3_parker := Pars_parker.cycle_len_1[3];  

    phase_1_ruggles := Pars_ruggles.cycle_len_1[1];
    phase_2_ruggles := Pars_ruggles.cycle_len_1[2];
    phase_3_ruggles := Pars_ruggles.cycle_len_1[3];
    phase_4_ruggles := Pars_ruggles.cycle_len_1[4];
    phase_5_ruggles := Pars_ruggles.cycle_len_1[5];
    phase_6_ruggles := Pars_ruggles.cycle_len_1[6];

    phase_1_forsyth := Pars_forsyth.cycle_len_1[1];
    phase_2_forsyth := Pars_forsyth.cycle_len_1[2];
    phase_3_forsyth := Pars_forsyth.cycle_len_1[3];
  END_IF;

  IF EQ(Cycle_Det.Cycle_No, 2) THEN
    phase_1_parker := Pars_parker.cycle_len_2[1];  
    phase_2_parker := Pars_parker.cycle_len_2[2];  
    phase_3_parker := Pars_parker.cycle_len_2[3];  

    phase_1_ruggles := Pars_ruggles.cycle_len_2[1];
    phase_2_ruggles := Pars_ruggles.cycle_len_2[2];
    phase_3_ruggles := Pars_ruggles.cycle_len_2[3];
    phase_4_ruggles := Pars_ruggles.cycle_len_2[4];
    phase_5_ruggles := Pars_ruggles.cycle_len_2[5];
    phase_6_ruggles := Pars_ruggles.cycle_len_2[6];

    phase_1_forsyth := Pars_forsyth.cycle_len_2[1];
    phase_2_forsyth := Pars_forsyth.cycle_len_2[2];
    phase_3_forsyth := Pars_forsyth.cycle_len_2[3];  
  END_IF;

  IF EQ(Cycle_Det.Cycle_No, 3) THEN
    phase_1_parker := Pars_parker.cycle_len_3[1];  
    phase_2_parker := Pars_parker.cycle_len_3[2];  
    phase_3_parker := Pars_parker.cycle_len_3[3];  

    phase_1_ruggles := Pars_ruggles.cycle_len_3[1];
    phase_2_ruggles := Pars_ruggles.cycle_len_3[2];
    phase_3_ruggles := Pars_ruggles.cycle_len_3[3];
    phase_4_ruggles := Pars_ruggles.cycle_len_3[4];
    phase_5_ruggles := Pars_ruggles.cycle_len_3[5];
    phase_6_ruggles := Pars_ruggles.cycle_len_3[6];

    phase_1_forsyth := Pars_forsyth.cycle_len_3[1];
    phase_2_forsyth := Pars_forsyth.cycle_len_3[2];
    phase_3_forsyth := Pars_forsyth.cycle_len_3[3];  
  END_IF;



  IF GT(manual_offset_parker, 0) THEN
    offset_out_parker := manual_offset_parker;
  END_IF;
  IF GT(manual_offset_ruggles, 0) THEN
    offset_out_ruggles := manual_offset_ruggles;
  END_IF;
  IF GT(manual_offset_forsyth, 0) THEN
    offset_out_forsyth := manual_offset_forsyth;
  END_IF;

END_PROGRAM


CONFIGURATION Config0

  RESOURCE Res0 ON PLC
    TASK task0(INTERVAL := T#200ms,PRIORITY := 0);
    PROGRAM instance0 WITH task0 : Field_Master;
  END_RESOURCE
END_CONFIGURATION
