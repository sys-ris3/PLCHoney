remark,"CSV-Import-Export"
remark,"Date = Mon Jul 13 08:11:21 2020"
remark,"Version = RSLogix 5000 v20.05"
remark,"Owner = "
remark,"Company = Microsoft"
0.3
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,,Local:1:C,"","AB:Embedded_DiscreteIO1:C:0","","(ExternalAccess := Read/Write)"
TAG,,Local:1:I,"","AB:Embedded_DiscreteIO1:I:0","","(ExternalAccess := Read/Write)"
TAG,,Local:1:O,"","AB:Embedded_DiscreteIO1:O:0","","(ExternalAccess := Read/Write)"
TAG,,Local:2:C,"","AB:Embedded_AnalogIO1:C:0","","(ExternalAccess := Read/Write)"
TAG,,Local:2:I,"","AB:Embedded_AnalogIO1:I:0","","(ExternalAccess := Read/Write)"
TAG,,Local:2:O,"","AB:Embedded_AnalogIO1:O:0","","(ExternalAccess := Read/Write)"
TAG,,Local:3:C,"","AB:Embedded_HSC1:C:0","","(ExternalAccess := Read/Write)"
TAG,,Local:3:I,"","AB:Embedded_HSC1:I:0","","(ExternalAccess := Read/Write)"
TAG,,Local:3:O,"","AB:Embedded_HSC1:O:0","","(ExternalAccess := Read/Write)"
ALIAS,,I_HiLvFloat,"","","Local:1:I.Data.11","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_HiLvFloat_IOFault,"","","Local:1:I.Data.11","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_LoLvFloat,"","","Local:1:I.Data.10","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_LoLvFloat_IOFault,"","","Local:1:I.Fault.10","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_Lv1,"","","Local:2:I.Ch0Data","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_Lv1_IOFault,"","","Local:2:I.Ch0InputOverRange","(RADIX := Decimal, ExternalAccess := Read/Write)"
TAG,,I_P1_Alm2,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,I_P1_Alm2_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,I_P1_Alm3,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,I_P1_Alm3_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,I_P1_Alm4,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,I_P1_Alm4_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,I_P1_Alm5,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,I_P1_Alm5_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
ALIAS,,I_P1_InAuto,"","","Local:1:I.Data.1","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_P1_InAuto_IOFault,"","","Local:1:I.Fault.1","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_P1_MotorHiTemp,"","","Local:1:I.Data.7","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_P1_MotorHiTemp_IOFault,"","","Local:1:I.Fault.7","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_P1_Overload,"","","Local:1:I.Data.0","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_P1_Overload_IOFault,"","","Local:1:I.Fault.0","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_P1_RunFdbk,"","","Local:1:I.Data.13","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_P1_RunFdbk_IOFault,"","","Local:1:I.Fault.13","(RADIX := Decimal, ExternalAccess := Read/Write)"
TAG,,I_P2_Alm2,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,I_P2_Alm2_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,I_P2_Alm3,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,I_P2_Alm3_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,I_P2_Alm4,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,I_P2_Alm4_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,I_P2_Alm5,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,I_P2_Alm5_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
ALIAS,,I_P2_InAuto,"","","Local:1:I.Data.3","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_P2_InAuto_IOFault,"","","Local:1:I.Fault.3","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_P2_MotorHiTemp,"","","Local:1:I.Data.9","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_P2_MotorHiTemp_IOFault,"","","Local:1:I.Fault.9","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_P2_OvrldFault,"","","Local:1:I.Data.2","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_P2_OvrldFault_IOFault,"","","Local:1:I.Fault.2","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_P2_RunFdbk,"","","Local:1:I.Data.14","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_P2_RunFdbk_IOFault,"","","Local:1:I.Fault.14","(RADIX := Decimal, ExternalAccess := Read/Write)"
TAG,,LST1_HiLvFloat,"Lift Station #1 High Level Float Alarm","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,LST1_LoLvFloat,"Lift Station #1 Low Level Float Alarm","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,LST1_Lv1,"Lift Station #1 Level #1","P_AIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,LST1_P1,"Lift Station #1 Pump #1","UD_Motor","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,LST1_P1_Alm2,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,LST1_P1_Alm3,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,LST1_P1_Alm4,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,LST1_P1_MotorHiTemp,"Lift Station #1$NPump #1 Motor High Temperature Switch","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,LST1_P1_Overload,"Lift Station #1$NPump #1 Motor Overload Contact","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,LST1_P2,"Lift Station #1 Pump #2","UD_Motor","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,LST1_P2_Alm2,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,LST1_P2_Alm3,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,LST1_P2_Alm4,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,LST1_P2_MotorHiTemp,"Lift Station #1$NPump #2 Motor High Temperature Switch","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,LST1_P2_Overload,"Lift Station #1$NPump #2 Motor Overload Contact","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,LST1_P3,"","UD_Motor","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,LST1_P4,"","UD_Motor","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,LST1_P5,"","UD_Motor","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,LST1_P6,"","UD_Motor","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,LST1_PumpSystemAvailable,"Lift Station #1$NPump System$NAvailable AOI","U_MotorAvailable","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,LST1_PumpSystemDemand,"Lift Station #1$NPump System$NMotor Demand AOI","U_MotorDemand","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,LST1_PumpSystemStartOrderRotation,"Lift Station #1$NPump System$NStart Order Rotation AOI","U_MotorStartOrderRotation","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,O_AlarmDialer,"Lift Station #1$NAlarm Dialer","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
ALIAS,,O_P1_Out_Run,"","","Local:1:O.Data.0","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,O_P2_Out_Run,"","","Local:1:O.Data.1","(RADIX := Decimal, ExternalAccess := Read/Write)"
TAG,,PLC_Device_ResetPB,"Site Wide Device Reset Push Button","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,PLC_Heartbeat,"","U_Heartbeat","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,PLC_Simulation,"Lift Station #1$NApplication running IN SIMULATION","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,PLC_WallClock,"Wall Clock","U_WallClock","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,WTP_CLX_CommFail,"","U_CommFail","","(Constant := false, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
ALIAS,MainProgram,Alm00,"","","LST1_LoLvFloat","(ExternalAccess := Read/Write)"
ALIAS,MainProgram,Alm00_Input,"","","I_LoLvFloat","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,MainProgram,Alm00_Input_IOFault,"","","I_LoLvFloat_IOFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,MainProgram,Alm01,"","","LST1_HiLvFloat","(ExternalAccess := Read/Write)"
ALIAS,MainProgram,Alm01_Input,"","","I_HiLvFloat","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,MainProgram,Alm01_Input_IOFault,"","","I_HiLvFloat_IOFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
TAG,MainProgram,Alm02,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,MainProgram,Alm02_Input,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,MainProgram,Alm02_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,MainProgram,Alm03,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,MainProgram,Alm03_Input,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,MainProgram,Alm03_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,MainProgram,Alm04,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,MainProgram,Alm04_Input,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,MainProgram,Alm04_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
ALIAS,MainProgram,Analog00,"","","LST1_Lv1","(ExternalAccess := Read/Write)"
ALIAS,MainProgram,Analog00_Input,"","","I_Lv1","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,MainProgram,Analog00_Input_IOFault,"","","I_Lv1_IOFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
TAG,MainProgram,Analog01,"","P_AIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,MainProgram,Analog01_Input,"","REAL","","(RADIX := Float, Constant := false, ExternalAccess := Read/Write)"
TAG,MainProgram,Analog01_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,MainProgram,Analog02,"","P_AIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,MainProgram,Analog02_Input,"","REAL","","(RADIX := Float, Constant := false, ExternalAccess := Read/Write)"
TAG,MainProgram,Analog02_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,MainProgram,Analog03,"","P_AIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,MainProgram,Analog03_Input,"","REAL","","(RADIX := Float, Constant := false, ExternalAccess := Read/Write)"
TAG,MainProgram,Analog03_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
ALIAS,Pumps,Device1,"","","LST1_P1","(ExternalAccess := Read/Write)"
ALIAS,Pumps,Device1_Alm0,"","","LST1_P1_Overload","(ExternalAccess := Read/Write)"
ALIAS,Pumps,Device1_Alm0_Input,"","","I_P1_Overload","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device1_Alm0_Input_IOFault,"","","I_P1_Overload_IOFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device1_Alm1,"","","LST1_P1_MotorHiTemp","(ExternalAccess := Read/Write)"
ALIAS,Pumps,Device1_Alm1_Input,"","","I_P1_MotorHiTemp","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device1_Alm1_Input_IOFault,"","","I_P1_MotorHiTemp_IOFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device1_Alm2,"","","LST1_P1_Alm2","(ExternalAccess := Read/Write)"
ALIAS,Pumps,Device1_Alm2_Input,"","","I_P1_Alm2","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device1_Alm2_Input_IOFault,"","","I_P1_Alm2_IOFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device1_Alm3,"","","LST1_P1_Alm3","(ExternalAccess := Read/Write)"
ALIAS,Pumps,Device1_Alm3_Input,"","","I_P1_Alm3","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device1_Alm3_Input_IOFault,"","","I_P1_Alm3_IOFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device1_Alm4,"","","LST1_P1_Alm4","(ExternalAccess := Read/Write)"
ALIAS,Pumps,Device1_Alm4_Input,"","","I_P1_Alm4","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device1_Alm4_Input_IOFault,"","","I_P1_Alm4_IOFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device1_GroupReset,"","","PLC_Device_ResetPB","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device1_InAuto,"","","I_P1_InAuto","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device1_InAuto_IOFault,"","","I_P1_InAuto_IOFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device1_Out_Run,"","","O_P1_Out_Run","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device1_RunFdbk,"","","I_P1_RunFdbk","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device1_RunFdbk_IOFault,"","","I_P1_RunFdbk_IOFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device2,"","","LST1_P2","(ExternalAccess := Read/Write)"
ALIAS,Pumps,Device2_Alm0,"","","LST1_P2_Overload","(ExternalAccess := Read/Write)"
ALIAS,Pumps,Device2_Alm0_Input,"","","I_P2_OvrldFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device2_Alm0_Input_IOFault,"","","I_P2_OvrldFault_IOFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device2_Alm1,"","","LST1_P2_MotorHiTemp","(ExternalAccess := Read/Write)"
ALIAS,Pumps,Device2_Alm1_Input,"","","I_P2_MotorHiTemp","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device2_Alm1_Input_IOFault,"","","I_P2_MotorHiTemp_IOFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device2_Alm2,"","","LST1_P2_Alm2","(ExternalAccess := Read/Write)"
ALIAS,Pumps,Device2_Alm2_Input,"","","I_P2_Alm2","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device2_Alm2_Input_IOFault,"","","I_P2_Alm2_IOFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device2_Alm3,"","","LST1_P2_Alm3","(ExternalAccess := Read/Write)"
ALIAS,Pumps,Device2_Alm3_Input,"","","I_P2_Alm3","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device2_Alm3_Input_IOFault,"","","I_P2_Alm3_IOFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device2_Alm4,"","","LST1_P2_Alm4","(ExternalAccess := Read/Write)"
ALIAS,Pumps,Device2_Alm4_Input,"","","I_P2_Alm4","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device2_Alm4_Input_IOFault,"","","I_P2_Alm4_IOFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device2_GroupReset,"","","PLC_Device_ResetPB","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device2_InAuto,"","","I_P2_InAuto","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device2_InAuto_IOFault,"","","I_P2_InAuto_IOFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device2_Out_Run,"","","O_P2_Out_Run","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device2_RunFdbk,"","","I_P2_RunFdbk","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device2_RunFdbk_IOFault,"","","I_P2_RunFdbk_IOFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device3,"","","LST1_P3","(ExternalAccess := Read/Write)"
TAG,Pumps,Device3_Alm0,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device3_Alm0_Input,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device3_Alm0_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device3_Alm1,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device3_Alm1_Input,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device3_Alm1_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device3_Alm2,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device3_Alm2_Input,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device3_Alm2_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device3_Alm3,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device3_Alm3_Input,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device3_Alm3_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device3_Alm4,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device3_Alm4_Input,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device3_Alm4_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device3_GroupReset,"","","PLC_Device_ResetPB","(RADIX := Decimal, ExternalAccess := Read/Write)"
TAG,Pumps,Device3_InAuto,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device3_InAuto_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device3_Out_Run,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device3_RunFdbk,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device3_RunFdbk_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device4,"","","LST1_P4","(ExternalAccess := Read/Write)"
TAG,Pumps,Device4_Alm0,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device4_Alm0_Input,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device4_Alm0_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device4_Alm1,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device4_Alm1_Input,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device4_Alm1_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device4_Alm2,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device4_Alm2_Input,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device4_Alm2_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device4_Alm3,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device4_Alm3_Input,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device4_Alm3_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device4_Alm4,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device4_Alm4_Input,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device4_Alm4_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device4_GroupReset,"","","PLC_Device_ResetPB","(RADIX := Decimal, ExternalAccess := Read/Write)"
TAG,Pumps,Device4_InAuto,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device4_InAuto_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device4_Out_Run,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device4_RunFdbk,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device4_RunFdbk_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device5,"","","LST1_P5","(ExternalAccess := Read/Write)"
TAG,Pumps,Device5_Alm0,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device5_Alm0_Input,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device5_Alm0_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device5_Alm1,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device5_Alm1_Input,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device5_Alm1_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device5_Alm2,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device5_Alm2_Input,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device5_Alm2_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device5_Alm3,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device5_Alm3_Input,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device5_Alm3_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device5_Alm4,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device5_Alm4_Input,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device5_Alm4_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device5_GroupReset,"","","PLC_Device_ResetPB","(RADIX := Decimal, ExternalAccess := Read/Write)"
TAG,Pumps,Device5_InAuto,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device5_InAuto_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device5_Out_Run,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device5_RunFdbk,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device5_RunFdbk_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device6,"","","LST1_P6","(ExternalAccess := Read/Write)"
TAG,Pumps,Device6_Alm0,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device6_Alm0_Input,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device6_Alm0_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device6_Alm1,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device6_Alm1_Input,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device6_Alm1_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device6_Alm2,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device6_Alm2_Input,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device6_Alm2_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device6_Alm3,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device6_Alm3_Input,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device6_Alm3_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device6_Alm4,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device6_Alm4_Input,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device6_Alm4_Input_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
ALIAS,Pumps,Device6_GroupReset,"","","PLC_Device_ResetPB","(RADIX := Decimal, ExternalAccess := Read/Write)"
TAG,Pumps,Device6_InAuto,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device6_InAuto_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device6_Out_Run,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device6_RunFdbk,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Pumps,Device6_RunFdbk_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
ALIAS,PumpSystem,Lv1,"","","LST1_Lv1","(ExternalAccess := Read/Write)"
ALIAS,PumpSystem,Pump1,"","","LST1_P1","(ExternalAccess := Read/Write)"
ALIAS,PumpSystem,Pump2,"","","LST1_P2","(ExternalAccess := Read/Write)"
ALIAS,PumpSystem,Pump3,"","","LST1_P3","(ExternalAccess := Read/Write)"
ALIAS,PumpSystem,Pump4,"","","LST1_P4","(ExternalAccess := Read/Write)"
ALIAS,PumpSystem,Pump5,"","","LST1_P5","(ExternalAccess := Read/Write)"
ALIAS,PumpSystem,Pump6,"","","LST1_P6","(ExternalAccess := Read/Write)"
ALIAS,PumpSystem,PumpAvailable,"","","LST1_PumpSystemAvailable","(ExternalAccess := Read/Write)"
ALIAS,PumpSystem,PumpDemand,"","","LST1_PumpSystemDemand","(ExternalAccess := Read/Write)"
ALIAS,PumpSystem,PumpStartOrderRotation,"","","LST1_PumpSystemStartOrderRotation","(ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_AIn:AOI,Inp_PV,"Input Signal (process variable) from Sensor","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_AIn:AOI,Inp_PVBad,"1=PV or I/O Comms Status Bad, 0=OK","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Inp_PVUncertain,"1=PV Value Not Reliable, 0=OK","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Inp_Sim,"1=Use simulated PV (Set_SimPV); 0=Use Input (Inp_PV)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Inp_Reset,"1=Reset all Alarms requiring reset","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_NoSubstPV,"1=Disallow selection of Substitute PV","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_SetTrack,"1=PSets track OSets in Oper, OSets track PSets in Prog, 0=no tracking","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_PCmdClear,"1=Clear Program Commands on receipt$N0=Leave Set","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HasHiHiAlm,"1=High-High Alarm exists and will be checked","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HasHiAlm,"1=High Alarm exists and will be checked","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HasLoAlm,"1=Low Alarm exists and will be checked","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HasLoLoAlm,"1=Low-Low Alarm exists and will be checked","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HasFailAlm,"1=Analog Input Failure Alarm exists and will be checked","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HiHiResetReqd,"1=Reset required to clear High-High Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HiResetReqd,"1=Reset required to clear High Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_LoResetReqd,"1=Reset required to clear Low Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_LoLoResetReqd,"1=Reset required to clear Low-Low Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_FailResetReqd,"1=Reset required to clear Analog InputFailure Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HiHiAckReqd,"1=Acknowledge required for High-High Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HiAckReqd,"1=Acknowledge required for High Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_LoAckReqd,"1=Acknlowledge required for Low Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_LoLoAckReqd,"1=Acknowledge required for Low-Low Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_FailAckReqd,"1=Acknowledge required for Analog Input Failure Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HiHiSeverity,"High-High Alarm Severity 1=info, 2=warn, 3=excep, 4=fault","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HiSeverity,"High Alarm Severity 1=info, 2=warn, 3=excep, 4=fault","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_LoSeverity,"Low Alarm Severity 1=info, 2=warn, 3=excep, 4=fault","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_LoLoSeverity,"Low-Low Alarm Severity 1=info, 2=warn, 3=excep, 4=fault","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_FailSeverity,"Failure Alarm Severity 1=info, 2=warn, 3=excep, 4=fault","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_InpRawMin,"Input (unscaled) Minimum for Scaling","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_InpRawMax,"Input (unscaled) Maximum for Scaling","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_PVEUMin,"PV (Output) Minimum for Scaling to EU","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_PVEUMax,"PV (Output) Maximum for Scaling to EU","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_FiltTC,"PV Filter Time Constant (sec),$N0.0 = unfiltered","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HiHiDB,"High-High Alarm Deadband (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HiHiMinDuration,"Minimum time above High-High Limit to raise Alarm (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HiDB,"High Alarm Deadband (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HiMinDuration,"Minimum time above High Limit to raise Alarm (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_LoDB,"Low Alarm Deadband (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_LoMinDuration,"Minimum time below Low Limit to raise Alarm (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_LoLoDB,"Low-Low Alarm Deadband (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_LoLoMinDuration,"Minimum time below Low-Low Limit to raise Alarm (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_FailHiLim,"Out-of-Range (fail) High Limit (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_FailLoLim,"Out-of-Range (fail) Low Limit (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_FailDB,"Out-of-Range (fail) High/Low Deadband (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_FailMinDuration,"Minimum time Bad or Out of Range to raise Fail Alarm (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PSet_Owner,"Program Owner Request ID (non-zero) or Release (zero)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PSet_HiHiLim,"Program-Entered High-High Alarm Threshold (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PSet_HiLim,"Program-Entered High Alarm Threshold (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PSet_LoLim,"Program-Entered Low Alarm Threshold (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PSet_LoLoLim,"Program-Entered Low-Low Alarm Threshold (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,MSet_SubstPV,"Maintenance-Entered Substitute PV (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,OSet_HiHiLim,"Operator-Entered High-High Alarm Threshold (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,OSet_HiLim,"Operator-Entered High Alarm Threshold (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,OSet_LoLim,"Operator-Entered Low Alarm Threshold (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,OSet_LoLoLim,"Operator-Entered Low-Low Alarm Threshold (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Set_SimPV,"PV used in Simulation (Inp_Sim=1) (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_Acq,"Program Command to Acquire ownership (Oper to Prog)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_Rel,"Program Command to Release ownership (Prog to Oper)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_Lock,"Program Command to Lock Mode in Prog","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_Unlock,"Program Command to Unlock Mode","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_Reset,"Program Command to Reset all Alarms requiring Reset","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_HiHiAck,"Program Command to Acknowledge High-High Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_HiHiInhibit,"Program Command to Inhibit High-High Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_HiHiUninhibit,"Program Command to UninhibitHigh-High Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_HiAck,"Program Command to Acknowledge High Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_HiInhibit,"Program Command to Inhibit High Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_HiUninhibit,"Program Command to Uninhibit High Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_LoAck,"Program Command to Acknowledge Low Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_LoInhibit,"Program Command to Inhibit Low Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_LoUninhibit,"Program Command to Uninhibit Low Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_LoLoAck,"Program Command to Acknowledge Low-Low Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_LoLoInhibit,"Program Command to Inhibit Low-Low Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_LoLoUninhibit,"Program Command to Uninhibit Low-Low Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_FailAck,"Program Command to Acknowldege Analog Input Failure Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_FailInhibit,"Program Command to Inhibit Analog Input Failure Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_FailUninhibit,"Program Command to Uninhibit Analog Input Failure Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,MCmd_SubstPV,"Maintenance Command to use Substitute PV (override input)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,MCmd_InpPV,"Maintenance Command to use Input PV (normal)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,OCmd_Reset,"Operator Command to Reset all Alarms requiring Reset","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Val,"Analog Value (after Substitute PV, if used)","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_AIn:AOI,Val_InpPV,"Analog Input Value (actual, before Substitute PV selection)","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_AIn:AOI,Val_PVEUMin,"Minimum of scaled range = MIN (Cfg_PVEUMin, Cfg_PVEUMax)","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Val_PVEUMax,"Maximum of scaled range = MAX (Cfg_PVEUMin, Cfg_PVEUMax)","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Val_Owner,"Current Object Owner ID (0=not owned)","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Val_Notify,"Current Alarm Level and Acknowledgement (enumeration)","SINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Val_HiHiLim,"Current High-High Alarm Threshold","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_AIn:AOI,Val_HiLim,"Current High Alarm Threshold","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_AIn:AOI,Val_LoLim,"Current Low Alarm Threshold","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_AIn:AOI,Val_LoLoLim,"Current Low-Low Alarm Threshold","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_AIn:AOI,Sts_SubstPV,"1=Using Substitute PV (Input being overridden)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_InpPV,"1=Using Input PV (normal)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_PVBad,"1=PV Bad quality or Out of Range","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_PVUncertain,"1=PV Value is Uncertain (quality)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_Err,"1=Error in Config, see detail Err_ bits for reason","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_AIn:AOI,Err_Raw,"1=Error in Config: Raw Input Scaling Min = Max","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Err_EU,"1=Error in Config: Scaled EU Min = Max","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Err_Filt,"1=Error in Config: PV filter params (RateTime, TC)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Err_DB,"1=Error in Config: an Alarm Deadband is < 0.0","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Err_Alarm,"1=Error in Config: Invalid Alarm Min Duration or Severity","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_Maint,"1=Mode is Maintenance (supersedes Prog, Oper)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_Prog,"1=Mode is Program","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_Oper,"1=Mode is Operator","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_ProgOperLock,"1=Program or Operator has requested Mode Lock","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_HiHi,"1=Analog Input is above High-High limit","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Alm_HiHi,"1=Analog Input is in High-High Alarm","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Ack_HiHi,"1=High-High Alarm has been acknowledged","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_HiHiDisabled,"1=High-High Alarm is Disabled (not saved or sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_HiHiInhibited,"1=High-High Alarm is Inhibited by logic","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_HiHiSuppressed,"1=High-High Alarm has been suppressed (logged only)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_Hi,"1=Analog Input is above High limit","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Alm_Hi,"1=Analog Input is in High Alarm","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Ack_Hi,"1=High Alarm has been acknowledged","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_HiDisabled,"1=High Alarm is Disabled (not saved or sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_HiInhibited,"1=High Alarm is Inhibited by logic","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_HiSuppressed,"1=High Alarm has been suppressed (logged only)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_Lo,"1=Analog Input is below Low limit","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Alm_Lo,"1=Analog Input is in Low Alarm","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Ack_Lo,"1=Low Alarm has been acknowledged","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_LoDisabled,"1=Low Alarm is Disabled (not saved or sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_LoInhibited,"1=Low Alarm is Inhibited by logic","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_LoSuppressed,"1=Low Alarm has been suppressed (logged only)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_LoLo,"1=Analog Input is below Low-Low limit","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Alm_LoLo,"1=Analog Input is in Low-Low Alarm","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Ack_LoLo,"1=Low-Low Alarm has been acknowledged","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_LoLoDisabled,"1=Low-Low Alarm is Disabled (not saved or sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_LoLoInhibited,"1=Low-Low Alarm is Inhibited by logic","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_LoLoSuppressed,"1=Low-Low Alarm has been suppressed (logged only)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_Fail,"1=Analog Input is Out of Range or PV Bad","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Alm_Fail,"1=Analog Input Failure Alarm (Bad or Out of Range)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Ack_Fail,"1=Analog Input Failure Alarm has been acknowledged","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_FailDisabled,"1=Analog input Failure Alarm is Disabled (not saved or sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_FailInhibited,"1=Analog Input Failure Alarm is inhibited by logic","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_FailSuppressed,"1=Analog Input Failure Alarm has been suppressed (logged only)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Rdy_SubstPV,"1=Ready for MCmd_SubstPV","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Rdy_InpPV,"1=Ready for MCmd_InpPV","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Rdy_Reset,"1=At least one Alarm requires Reset","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,LoLo,"Low-Low Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Lo,"Low Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Hi,"High Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,HiHi,"High-High Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Mode,"Analog Input Mode Selection","P_Mode","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Cfg_EU,"Engineering Units for display on HMI","STRING_8","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Cfg_Tag,"Tagname for display on HMI","STRING_20","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Cfg_Label,"Label for graphic symbol displayed on HMI","STRING_20","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Cfg_Desc,"Description for display on HMI","STRING_40","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Fail,"Analog Input Failure Alarm (bad quality or out of range)","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_Notify,"Buffer for building Val_Notify","SINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_SubstPV,"Internal flag: Using Substitute PV","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_UnfiltPV,"Unfiltered PV, input to 1st order filter","REAL","","(RADIX := Float, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_Alpha,"Filter multiplier = (1 / (1+TC/dT) )","REAL","","(RADIX := Float, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_ScanT,"Scan Timer (milliseconds, always runs)","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_ScanTime,"Time since this instance was last scanned","REAL","","(RADIX := Float, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_FiltPV,"Filtered PV","REAL","","(RADIX := Float, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_InpDINT,"Input REAL bit pattern as a DINT (check for Inf/NaN)","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_InpInfNaN,"Input is Infinite or Not a Number","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_ValidONS,"Selected PV goes from Infinite or Not a Number to VALID","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_SelPVDINT,"Selected PV check for Infinite or Non A Number","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_SelPVInfNaN,"Selected PV (Input or Substitute) is Infinite or NaN","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_Alarm:AOI,Inp,"Alarm Condition Input 1=Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Alarm:AOI,Inp_Reset,"1=Reset Alarm requiring reset","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Alarm:AOI,Cfg_ResetReqd,"1=Reset required to clear Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Cfg_AckReqd,"1=Acknowledge required for Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Cfg_Severity,"1=Info Only; 2=Warning; 3=Process Exception; 4=Fault","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Cfg_MinDuration,"Minimum time (sec) Input must stay on to generate Alarm","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,PCmd_Reset,"Program Command to Reset latched alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,PCmd_Ack,"Program Command to Acknowledge alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,PCmd_Inhibit,"Program Command to Inhibit alarm (force Alm to 0)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,PCmd_Uninhibit,"Program Command to Uninhibit alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,OCmd_Reset,"Operator Command to Reset latched alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,OCmd_Ack,"Operator Command to Acknowledge alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,OCmd_Disable,"Operator Command to Disable alarm (force Alm to 0)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,OCmd_Enable,"Operator Command to Enable alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Val_Notify,"Current Alarm Level and Acknowledgement (enumeration)","SINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Alm,"Alarm output 1=In Alarm","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Alarm:AOI,Ack,"Alarm acknowledged status: 1=Ack rcvd","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Alarm:AOI,Disabled,"1=Alarm has been Disabled by Operator (will not be sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Alarm:AOI,Inhibited,"1=Alarm has been Inhibited by logic (will not be sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Alarm:AOI,Suppressed,"1=Alarm has been suppressed (not visible on HMI)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Alarm:AOI,Sts_Err,"1=Error in Config: see detail Err_ bits for reason","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Err_MinDuration,"1=Error in Config: Invalid Min Duration (use 0 to 2147483)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Err_Severity,"1=Error in Config: Invalid Severity (use 1 to 4)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Rdy_Reset,"Ready to receive OCmd_Reset (enable button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Rdy_Ack,"Ready to receive OCmd_Ack (enable button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Rdy_Disable,"Ready to receive OCmd_Disable (enable button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Rdy_Enable,"Ready to receive OCmd_Enable (enable button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Wrk_MinDurationT,"Alarm Condition Minimum Duration Timer","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Alarm:AOI,Wrk_Alm,"Internal Alarm Status","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Alarm:AOI,Wrk_Inhibited,"Internal Alarm Inhibit Status","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Alarm:AOI,Wrk_AlmMinOnT,"Alarm output minimum ON time to be seen by alarm server","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_DIn:AOI,Inp_PV,"Input Signal (process variable) from Sensor","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_DIn:AOI,Inp_PVBad,"Input Comm Status or Quality 1=Bad, 0=OK","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Inp_Target,"Target State of Input (Alarm if not in Target State)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_DIn:AOI,Inp_Gate,"Gate Condition (=1 to enable Alarm)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_DIn:AOI,Inp_Sim,"1=Use simulated PV (Set_SimPV); 0=Use Input (Inp_PV)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Inp_Reset,"1=Reset Alarm requiring reset","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Cfg_NoSubstPV,"1=Disallow selection of Substitute PV","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Cfg_NormTextVis,"1=Display state text in $Qnormal$Q state (= target), 0=hide (some HMI objects)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Cfg_PCmdClear,"1=Clear Program Commands on receipt$N0=Leave Set","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Cfg_HasTgtDisagreeAlm,"1=Target Disagree Alarm exists and will be checked","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Cfg_TgtDisagreeResetReqd,"1=Target Disagree Alarm is latched in, requires Reset Command to clear","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Cfg_TgtDisagreeAckReqd,"1=Target Disagree Alarm must be acknowledged","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Cfg_TgtDisagreeSeverity,"Target Disagree Alarm Severity: 1=info, 2=warn, 3=excep, 4=fault","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Cfg_GateDly,"Time Inp_Gate must be true before Alarm is checked (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Cfg_Debounce,"Minimum time Status must maintain state, (sec)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Cfg_TgtDisagreeMinDuration,"Minimum time Input must disagree with target to generate an Alarm (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,MSet_SubstPV,"Maintenance-Entered Substitute PV","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Set_SimPV,"PV used in Simulation (Inp_Sim=1)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,PCmd_Reset,"Program Command to Reset all latched Alarms","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,PCmd_TgtDisagreeAck,"Program Command to Acknowledge the Target Disagree Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,PCmd_TgtDisagreeInhibit,"Program Command to Inhibit the Target Disagree Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,PCmd_TgtDisagreeUninhibit,"Program Command to Uninhibit the Target Disagree Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,MCmd_SubstPV,"Maintenance Command to use Substitute PV (override input)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,MCmd_InpPV,"Maintenance Command to use Input PV (normal)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,OCmd_Reset,"Operator Command to Reset all latched Alarms","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Val_Notify,"Current Alarm Level and Acknowledgement (enumeration)","SINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Sts,"Discrete Input Status (incl. Debounce, Manual Override, if used)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_DIn:AOI,Sts_PV,"Discrete Input Status (actual, not subject to Override)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_DIn:AOI,Sts_SubstPV,"1=Using Substitute PV (Input being overridden)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Sts_InpPV,"1=Using Input PV (normal)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Sts_PVBad,"Input Comm Status/ Quality (0=OK, 1=Bad)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Sts_Err,"1=Error in Config: see detail bits for reason","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_DIn:AOI,Err_Timer,"1=Error in Config: Invalid Timer Preset (use 0 to 2147483)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Err_Alarm,"1=Error in Config: Invalid Alarm Min Duration or Severity","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Sts_TgtDisagree,"1=Input is not in Target state","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Alm_TgtDisagree,"1=Alarm: Input is not in Target state","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Ack_TgtDisagree,"1=Target Disagree Alarm has been acknowledged","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Sts_TgtDisagreeDisabled,"1=Target Disagree Alarm is Disabled (not saved or sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Sts_TgtDisagreeInhibited,"1=Target Disagree Alarm is Inhibited by logic","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Sts_TgtDisagreeSuppressed,"1=Target Disagree Alarm is Suppressed (logged only)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Rdy_SubstPV,"1=Ready for MCmd_SubstPV","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Rdy_InpPV,"1=Ready for MCmd_InpPV","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Rdy_Reset,"1=Ready for Operator Alarm Reset Command","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Wrk_GateDlyT,"Gate Delay timer","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_DIn:AOI,Cfg_Tag,"Tagname for display on HMI","STRING_20","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_DIn:AOI,Cfg_Desc,"Description for display on HMI","STRING_40","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_DIn:AOI,Cfg_Label,"Label for graphic symbol displayed on HMI","STRING_20","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_DIn:AOI,Wrk_Sts,"Internal Status (after Manual Override selection)","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_DIn:AOI,TgtDisagree,"Target Disagree Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_DIn:AOI,Wrk_FallT,"Timer to ensure Status LOW time on falling edge","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_DIn:AOI,Wrk_RiseT,"Timer to ensure Status HIGH time on rising edge","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_DIn:AOI,Wrk_SubstPV,"Internal flag: Using Substitute PV","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_DIn:AOI,Cfg_1StText,"Text to display in PV=1 State","STRING_8","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_DIn:AOI,Cfg_0StText,"Text to display in PV=0 State","STRING_8","","(Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_Intlk:AOI,Inp_Intlk00,"Interlock Cond. 00 (1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Inp_Intlk01,"Interlock Cond. 01$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Inp_Intlk02,"Interlock Cond. 02$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Inp_Intlk03,"Interlock Cond. 03$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Inp_Intlk04,"Interlock Cond. 04$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Inp_Intlk05,"Interlock Cond. 05$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Inp_Intlk06,"Interlock Cond. 06$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Inp_Intlk07,"Interlock Cond. 07$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Inp_Intlk08,"Interlock Cond. 08$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Inp_Intlk09,"Interlock Cond. 09$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Inp_Intlk10,"Interlock Cond. 10$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Inp_Intlk11,"Interlock Cond. 11$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Inp_Intlk12,"Interlock Cond. 12$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Inp_Intlk13,"Interlock Cond. 13$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Inp_Intlk14,"Interlock Cond. 14$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Inp_Intlk15,"Interlock Cond. 15$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Inp_Reset,"1=Reset Latched Interlocks and First-Out","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Cfg_Latched,"Set bits indicate which conditions are latched (sealed in)","INT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Cfg_Bypassable,"Set bits indicate which conditions can be bypassed","INT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Cfg_PCmdClear,"1=Clear Program Commands on receipt$N0=Leave Set","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,PCmd_Reset,"Program Command to Reset Latched Interlocks","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,OCmd_Reset,"Operator Command to Reset Latched Interlocks","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Sts_IntlkOK,"Overall Interlock Status (1=OK to run, 0=Stop)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Sts_NBIntlkOK,"Non-Bypassable Interlock Status (1=All NB Interlocks OK to run)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Sts_Intlk,"Individual Interlock Status (1=Stop, 0=OK)","INT","","(RADIX := Binary, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Sts_FirstOut,"Interlock First Out Status (bit 1 is First Not-OK condition)","INT","","(RADIX := Binary, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Sts_NBFirstOut,"Non-bypassable Interlock First-Out Status (bit=1 is First NB Not-OK condition)","INT","","(RADIX := Binary, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Rdy_Reset,"1=Ready to receive OCmd_Reset (reset required)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Cfg_CondTxt,"Short HMI description of Interlock Conditions","STRING_20[16]","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Intlk:AOI,Wrk_Inp,"Collection copy of Inp_IntlkXXs","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Intlk:AOI,Wrk_NB,"Working register for Non-Bypassable Interlock ogic","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Intlk:AOI,Wrk_Intlk,"Working register for Interlock logic","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Intlk:AOI,Wrk_FirstOut,"Working register for First Out logic","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Intlk:AOI,Wrk_Sts,"Working register for generating Interlock status","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Intlk:AOI,Wrk_NBFirstOut,"Working register for Non-Bypassable First Out logic","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Intlk:AOI,Wrk_PrevSts,"Interlock Status previous scan","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Intlk:AOI,Wrk_PrevNB,"Non-Bypassable Status previous scan","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_Mode:AOI,Inp_Hand,"1=Select Hand (typ. hardwired)  Mode","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Mode:AOI,Inp_Ovrd,"1=Select Override (typ. Process/Safety Interlock) Mode","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Mode:AOI,Cfg_PCmdClear,"1=Clear Program Command on receipt; 0=Use Level-based (maintained) PCmds","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,Cfg_OvrdOverLock,"1=Override supersedes Prog/Oper Lock, 0=don$'t override Lock","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,PCmd_Acq,"Program Command to Acquire Ownership (Oper to Prog)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,PCmd_Rel,"Program Command to Release Ownership (Prog to Oper)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,PCmd_Lock,"Program Command to Lock Mode in Prog","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,PCmd_Unlock,"Program Command to Unlock Mode","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,MCmd_Acq,"Maintenance Command to Acquire Ownership (Oper/Prog/Ovrd to Maint)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,MCmd_Rel,"Maintenance Command to Release Ownership (Maint to Oper/Prog/Ovrd)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,OCmd_AcqLock,"Operator Command to Acquire and Lock Mode in Oper","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,OCmd_Unlock,"Operator Command to Unlock Operator Mode","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,Sts_Hand,"1=Mode is Hand (supersedes Maint, Ovrd, Prog, Oper)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode:AOI,Sts_Maint,"1=Mode is Maintenance (supersedes Ovrd, Prog, Oper)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode:AOI,Sts_Ovrd,"1=Mode is Override (supersedes Prog, Oper)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode:AOI,Sts_Prog,"1=Mode is Program","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode:AOI,Sts_Oper,"1=Mode is Operator","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode:AOI,Sts_ProgOperLock,"1=Program or Operator has requested Mode Lock","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode:AOI,Sts_ProgOperSel,"Prog/Oper selection 1=Program, 0=Operator","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Mode:AOI,Rdy_Acq,"1=Ready for MCmd_Acq","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Mode:AOI,Rdy_Rel,"1=Ready for MCmd_Rel","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Mode:AOI,Rdy_AcqLock,"1=Ready for OCmd_AcqLock","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Mode:AOI,Rdy_Unlock,"1=Ready for OCmd_Unlock","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Mode:AOI,Wrk_Locked,"1=Program/Operator Mode selection is Locked","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Mode:AOI,Wrk_Prog,"Internal Program (1) / Operator (0) Mode selection","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Mode:AOI,Wrk_Maint,"Internal Maintenance Mode","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_Motor:AOI,Inp_RunFdbk,"Input Signal: RUN feedback from motor","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Motor:AOI,Inp_PermOK,"1=Permissives OK, motor can start","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Motor:AOI,Inp_NBPermOK,"1=Non-Bypassable Permissives OK, motor can start","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Motor:AOI,Inp_IntlkOK,"1=Interlocks OK, motor can start/run","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Motor:AOI,Inp_NBIntlkOK,"1=Non-Bypassable Interlocks OK, motor can start/run","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Motor:AOI,Inp_IOFault,"Input Communication Status 0=OK, 1=fail","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Inp_Sim,"1=Simulate working motor; 0=Start/Stop/ Monitor actual motor","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Inp_Hand,"1=Select Hand (hardwired) Control Strategy","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Inp_Ovrd,"1=Select Override control strategy","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Inp_OvrdState,"1=Override to RUN, 0=Override to STOP","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Inp_Reset,"1=Reset all fault conditions and latched Alarms","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_HasRunFdbk,"1=Motor provides a run feedback signal","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_UseRunFdbk,"1=Motor run feedback should be used for failure checking","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_HasPermObj,"1=Tells HMI a P_Perm is connected to Inp_Perm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_HasIntlkObj,"1=Tells HMI a P_Intlk is connected to Inp_Intlk","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_HasResInhObj,"1=Tells HMI a P_ResInh Restart Inhibit is connected","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_HasRunTimeObj,"1=Tells HMI a P_RunTime is connected","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_PCmdClear,"1=Clear Program Commands on receipt$N0=Leave Set","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_OvrdPermIntlk,"1=Override ignores Bypassable Perm/ Intlk; 0=always use Perm/Intlk","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_HasFailToStartAlm,"1=Fail to Start Alarm exists and will be checked","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_HasFailToStopAlm,"1=Fail to Stop Alarm exists and will be checked","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_HasIntlkTripAlm,"1=Interlock Trip Alarm exists and will be checked","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_HasIOFaultAlm,"1=I/O Fault Alarm exists and will be checked","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_FailToStartResetReqd,"1=Reset required to clear Fail to Start Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_FailToStopResetReqd,"1=Reset required to clear Fail to Stop Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_IntlkTripResetReqd,"1=Reset required to clear Interlock Trip Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_IOFaultResetReqd,"1=Reset required to clear I/O Fault Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_FailToStartAckReqd,"1=Acknowledge required for Fail to Start Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_FailToStopAckReqd,"1=Acknowledge required for Fail to Stop Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_IntlkTripAckReqd,"1=Acknowledge required for Interlock Trip Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_IOFaultAckReqd,"1=Acknowledge required for I/O Fault Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_FailToStartSeverity,"Fail To Start Alarm Severity 1=info 2=warn 3=excep 4=fault","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_FailToStopSeverity,"Fail To Stop Alarm Severity 1=info 2=warn 3=excep 4=fault","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_IntlkTripSeverity,"Interlock Trip Alarm Severity 1=info 2=warn 3=excep 4=fault","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_IOFaultSeverity,"I/O Fault Alarm Severity 1=info 2=warn 3=excep 4=fault","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_SimFdbkT,"Delay to echo back  of Running/Stopped status when in Simulation (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_FailToStartT,"Time after Start to get Run Feedback before Fault (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_FailToStopT,"Time after Stop to drop Run Feedback before Fault (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PSet_Owner,"Program Owner Request ID (non-zero) or Release (zero)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_Start,"Program Command to Start Motor","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_Stop,"Program Command to Stop Motor","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_Acq,"Program Command to Acquire ownership (Oper/OOS to Prog)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_Rel,"Program Command to Release ownership (Prog to OOS)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_Lock,"Program Command to Lock Mode in Prog","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_Unlock,"Program Command to Unlock Mode","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_Reset,"Program Command to Reset all Alarms requiring Reset","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_FailToStartAck,"Program Command to Acknowledge Fail to Start Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_FailToStartInhibit,"Program Command to Inhibit Fail to Start Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_FailToStartUninhibit,"Program Command to Uninhibit Fail to Start Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_FailToStopAck,"Program Command to Acknowledge Fail to Stop Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_FailToStopInhibit,"Program Command to Inhibit Fail to Stop Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_FailToStopUninhibit,"Program Command to Uninhibit Fail to Stop Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_IntlkTripAck,"Program Command to Acknowledge Interlock Trip Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_IntlkTripInhibit,"Program Command to Inhibit Interlock Trip Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_IntlkTripUninhibit,"Program Command to Uninhibit Interlock Trip Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_IOFaultAck,"Program Command to Acknowledge I/O Fault Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_IOFaultInhibit,"Program Command to Inhibit I/O Fault Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_IOFaultUninhibit,"Program Command to Uninhibit I/O Fault Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,OCmd_Start,"Operator Command to Start Motor","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,OCmd_Stop,"Operator Command to Stop Motor","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,OCmd_Bypass,"Operator Command to Bypass all Bypassable Interlocks and Permissives","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,OCmd_Check,"Operator Command to Check (not bypass) all Interlocks and Permissives","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,MCmd_Disable,"Maintenance Command to Disable Motor","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,MCmd_Enable,"Maintenance Command to Enable (allow to run) Motor","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,OCmd_Reset,"Operator Command to Reset all Alarms requiring Reset","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Out_Run,"1=Run Motor, 0=Stop Motor","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Out_Start,"1=Start Motor, 0=Motor left in current state","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Out_Stop,"1=Stop Motor, 0=Motor left in current state","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Val_Owner,"Current Object Owner ID (0=not owned)","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Val_Notify,"Current Alarm Level and Acknowledgement (enumeration)","SINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_Stopped,"1=Motor requested to stop and is confirmed stopped","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Sts_Starting,"1=Motor requested to run and awaiting run feedback","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Sts_Running,"1=Motor requested to run and is confirmed running","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Sts_Stopping,"1=Motor requested to stop and awaiting stopped feedback","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Sts_Available,"1=Motor available for control by automation (Prog)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_Bypass,"1=Bypassable Interlocks and Permissives are Bypassed","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_BypActive,"1=Bypassing Active (Bypassed or Maintenance)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_Disabled,"1=Motor is Disabled","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_Err,"1=Error in Config: see detail bits for reason","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Err_Timer,"1=Error in Config: Start/Stop Check timer preset (use 0 to 2147483)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Err_Sim,"1=Error in Config: Simulation timer preset (use 0 to 2147483)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Err_Alarm,"1=Error in Config: Invalid Alarm Severity","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_Hand,"1=Mode is Hand (supersedes Maint, Ovrd, Prog, Oper)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Sts_Maint,"1=Mode is Maintenance (supersedes Ovrd, Prog, Oper)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Sts_Ovrd,"1=Mode is Override (supersedes Prog, Oper)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Sts_Prog,"1=Mode is Program (auto)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Sts_Oper,"1=Mode is Operator (manual)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Sts_ProgOperLock,"1=Program or Operator has requested Mode Lock","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_FailToStart,"1=Motor Failed to Start (one-shot)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Alm_FailToStart,"1=Motor Fail to Start Alarm","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Ack_FailToStart,"1=Fail to Start Alarm has been acknowledged","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_FailToStartDisabled,"1=Fail to Start Alarm has been disabled (will not be sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_FailToStartInhibited,"1=Fail to Start Alarm has been inhibited by logic","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_FailToStartSuppressed,"1=Fail to Start Alarm has been suppressed (logged only)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_FailToStop,"1=Motor Failed to Stop","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Alm_FailToStop,"1=Motor Fail to Stop Alarm","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Ack_FailToStop,"1=Fail to Stop Alarm has been acknowledged","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_FailToStopDisabled,"1=Fail to Stop Alarm has been disabled (will not be sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_FailToStopInhibited,"1=Fail to Stop Alarm has been inhibited by logic","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_FailToStopSuppressed,"1=Fail to Stop Alarm has been suppressed (logged only)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_IntlkTrip,"1=Motor stopped by an Interlock NOT OK (one-shot)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Alm_IntlkTrip,"1=Alarm: Motor stopped by an Interlock NOT OK","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Ack_IntlkTrip,"1=Interlock Trip Alarm has been acknowledged","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_IntlkTripDisabled,"1=Interlock Trip Alarm is Disabled (not saved or sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_IntlkTripInhibited,"1=Interlock Trip Alarm has been inhibited by logic","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_IntlkTripSuppressed,"1=Interlock Trip Alarm has been suppressed (logged only)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_IOFault,"I/O Comm Fault Status (0=OK, 1=Bad)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Alm_IOFault,"1=I/O Fault Alarm","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Ack_IOFault,"1=I/O Fault Alarm has been acknowledged","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_IOFaultDisabled,"1=I/O Fault Alarm is Disabled (not saved or sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_IOFaultInhibited,"1=I/O Fault Alarm has been inhibited by logic","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_IOFaultSuppressed,"1=I/O Fault Alarm has been suppressed (logged only)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Rdy_Start,"1=Ready to receive OCmd_Start (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Rdy_Stop,"1=Ready to receive OCmd_Stop (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Rdy_Bypass,"1=Ready to receive OCmd_Bypass (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Rdy_Check,"1=Ready to receive OCmd_Check (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Rdy_Disable,"1=Ready to receive MCmd_Disable (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Rdy_Enable,"1=Ready to receive MCmd_Enable (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Rdy_Reset,"1=Ready to receive OCmd_Reset (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Mode,"Motor Mode Selection","P_Mode","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,IOFault,"I/O Fault Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,IntlkTrip,"Interlock Trip Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,FailToStop,"Motor Failed to Stop Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,FailToStart,"Motor Failed to Start Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Cfg_Tag,"Tagname for display on HMI","STRING_20","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Cfg_Label,"Label for graphic symbol displayed on HMI","STRING_20","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Cfg_Desc,"Description for display on HMI","STRING_40","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Wrk_Run,"1=Motor should be $Qrunning$Q, 0=should be $Qstopped$Q","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Wrk_SimRunT,"Simulation Delay until Running","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Wrk_StopT,"Stop Check Timer","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Wrk_StartT,"Start Check Timer","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Wrk_Fault,"1=a Motor Fault has been detected","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Wrk_SimStopT,"Simulation Delay until Stopped","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Wrk_RunFdbk,"Run Feedback based on mode, simulation, etc. 1=running","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Wrk_IntlkTrip,"1=Interlock Not OK Tripped Running Motor","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Wrk_Notify,"Buffer for building Val_Notify","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Wrk_Bypass,"Internal Bypassable Permissives and Interlocks are Bypassed flag","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Wrk_Disabled,"Internal Motor is Disabled","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_Perm:AOI,Inp_Perm00,"Permissive Cond 00$N(1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Perm:AOI,Inp_Perm01,"Permissive Cond 01 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Perm:AOI,Inp_Perm02,"Permissive Cond 02 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Perm:AOI,Inp_Perm03,"Permissive Cond 03 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Perm:AOI,Inp_Perm04,"Permissive Cond 04 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Perm:AOI,Inp_Perm05,"Permissive Cond 05$N(1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Perm:AOI,Inp_Perm06,"Permissive Cond 06 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Perm:AOI,Inp_Perm07,"Permissive Cond 07 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Perm:AOI,Inp_Perm08,"Permissive Cond 08 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Perm:AOI,Inp_Perm09,"Permissive Cond 09 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Perm:AOI,Inp_Perm10,"Permissive Cond 10$N(1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Perm:AOI,Inp_Perm11,"Permissive Cond 11 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Perm:AOI,Inp_Perm12,"Permissive Cond 12 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Perm:AOI,Inp_Perm13,"Permissive Cond 13 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Perm:AOI,Inp_Perm14,"Permissive Cond 14 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Perm:AOI,Inp_Perm15,"Permissive Cond 15$N(1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Perm:AOI,Cfg_Bypassable,"Set bits indicate which conditions can be bypassed","INT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Perm:AOI,Sts_PermOK,"Overall Permissive Status (1=OK to start)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Perm:AOI,Sts_NBPermOK,"Non-Bypassable Permissive Status (1 =all non- bypassable Permissives OK to start)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Perm:AOI,Sts_Perm,"Individual Permissive Status (1=OK, 0=don$'t start)","INT","","(RADIX := Binary, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Perm:AOI,Cfg_CondTxt,"Short HMI description of Permissive Conditions","STRING_20[16]","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Perm:AOI,Wrk_Inp,"Collection copy of Inp_PermXXs","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Perm:AOI,Wrk_Bypass,"Working Register for Bypassable Permissives","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_Reset:AOI,Inp_Reset,"Reset Input, 1=Reset, from pushbutton or another object","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Reset:AOI,Inp_ResetReqd,"1=Reset Required, enable Reset button","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Reset:AOI,Cfg_MinHoldTime,"Minimum Time to hold Reset Output true (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Reset:AOI,PCmd_Reset,"Program Command to Reset, from other object","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Reset:AOI,OCmd_Reset,"Operator Command to Reset, from HMI","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Reset:AOI,Out_Reset,"1=Reset received for this P_Reset$'s scope","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Reset:AOI,Sts_Err,"1=Error in Config: Invalid Hold Time (use 0 to 2147483)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Reset:AOI,Rdy_Reset,"1=Ready to receive OCmd_Reset (enable button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Reset:AOI,Wrk_HoldT,"Reset Output Hold Timer (TOF)","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Reset:AOI,Wrk_EnableInONS,"Enable In transition detection to pulse Reset Output","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Reset:AOI,Wrk_HoldONS,"One-Shot to fire Hold Timer to ensure min. output ON time.","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Reset:AOI,Wrk_ResetCond,"Any incoming Reset condition is TRUE","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_ResInh:AOI,Inp_Stopped,"Equipment is confirmed Stopped","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ResInh:AOI,Inp_Starting,"Equipment is Starting, indicating a start attempt","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ResInh:AOI,Inp_Running,"Equipment is confirmed Running","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ResInh:AOI,Cfg_ThreeColdStarts,"Sec within which three starts are allowed if cold","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ResInh:AOI,Cfg_FirstFailCold,"Sec for cold motor to wait after 1st start failure before ready to start","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ResInh:AOI,Cfg_SubseqFailCold,"Sec for cold motor to wait after 2nd and subsequent start failure before ready","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ResInh:AOI,Cfg_FirstFailHot,"Sec for hot motor to wait after 1st start failure before ready to start","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ResInh:AOI,Cfg_SubseqFailHot,"Sec for hot motor to wait after 2nd and subsequent start failure before ready","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ResInh:AOI,Cfg_HotRestartOK,"Sec for hot motor to run so it can immediately restart after stop","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ResInh:AOI,Cfg_RestartHot,"Sec for hot motor to wait after stop if stopped before Hot Restart OK time","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ResInh:AOI,Cfg_HotToCold,"Sec for a stopped hot motor to become cold","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ResInh:AOI,Val_MinToReady,"Minutes yet inhibited before ready to start (mmm:ss)","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_ResInh:AOI,Val_SecToReady,"Seconds yet inhibited before ready to start$N(mmm:ss)","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_ResInh:AOI,Val_State,"State Number (see State Diagram in docs) for HMI","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ResInh:AOI,Sts_Ready,"Permissive for unit to start 1=ready, 0=not ready","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_ResInh:AOI,Sts_Err,"1=Error in Config: Invalid Time (use 0.0 to 2147483)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_ResInh:AOI,Wrk_FirstColdStartT,"Time since first cold start","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_FirstFailColdT,"Time for cold motor to wait after 1st start failure before ready","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_SubsFailColdT,"Time for cold motor to wait after 2nd and subs. failures before ready","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_FirstFailHotT,"Time for hot motor to wait after 1st start failure before ready","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_SubsFailHotT,"Time for hot motor to wait after 2nd and subs. failures before ready","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_HotRestartOKT,"Time for hot motor to run so it can restart immediately when stopped","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_RestartHotT,"Time for hot motor to wait after stop after running less than Hot Restart OK time","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_HotToColdT,"Time for a stopped hot motor to become cold","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_FailCount,"Number of failed start attempts","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_mSecUntilReady,"Milliseconds until the inhibit time is done and the unit is ready to start","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_SecUntilReady,"Seconds until inhibit time is done and the unit is ready to start","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_State,"Instruction State (see state diagram in design docs)","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_Ready,"Internal storage of Sts_Ready:$N1 = OK to start","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_SecondColdStartT,"Time since second cold start","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_RunTime:AOI,Inp_Starting,"1=Motor is Starting (from motor instruction)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_RunTime:AOI,Inp_Running,"1=Motor is Running (from motor instruction)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_RunTime:AOI,Cfg_PCmdClear,"1=Clear Program Commands on receipt$N0=Leave Set","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_RunTime:AOI,PCmd_ClearStarts,"Program Command to Clear Count of Starts (attempts)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_RunTime:AOI,PCmd_ClearMaxHrs,"Program Command to Clear Maximum (continuous) Run Time for any start","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_RunTime:AOI,PCmd_ClearTotHrs,"Program Command to Clear Total Running Time","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_RunTime:AOI,MCmd_ClearStarts,"Maintenance Command to Clear Count of Starts (attempts)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_RunTime:AOI,MCmd_ClearMaxHrs,"Maintenance Command to Clear Maximum (continuous) Run Time for any start","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_RunTime:AOI,MCmd_ClearTotHrs,"Maintenance Command to Clear Total Running Time","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_RunTime:AOI,Val_Starts,"Total number of motor starts or attempts","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_RunTime:AOI,Val_CurRunHrs,"Current running time this start (hours)","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_RunTime:AOI,Val_MaxRunHrs,"Maximum continuous running time for a given start (hours)","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_RunTime:AOI,Val_TotRunHrs,"Total accumulated running time (hours)","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_RunTime:AOI,Wrk_CurHours,"Whole hours of current run time","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_RunTime:AOI,Wrk_CurRunT,"Timer for timing current run time","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_RunTime:AOI,Wrk_TotTenths,"Tenths of hours of total run time","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_RunTime:AOI,Wrk_Starts,"Counter for counting motor starts","COUNTER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_RunTime:AOI,Wrk_TotRunT,"Retentive timer for timing 0.1 hour total run time","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_RunTime:AOI,Wrk_MaxHours,"Internal Maximum Run Hours","REAL","","(RADIX := Float, Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,U_AnalogTripReset:AOI,Inp_Analog,"","P_AIn","","(Usage := InOut, Constant := false, Required := true, Visible := true)"
TAG,U_AnalogTripReset:AOI,OSet_PosTrip,"Operator Trip Position Set point","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_AnalogTripReset:AOI,OSet_PosReset,"Operator Reset Position Set point","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_AnalogTripReset:AOI,Sts_On,"Status $N1= On$N0 = Off","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_AnalogTripReset:AOI,CFG_TripDirectionDrain,"Trip Direction  $N1 =  Drain or Up $N0 = Fill or Down","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_AnalogTripReset:AOI,Sts_AnalogBad,"Analog Value Bad","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_AnalogTripReset:AOI,PosResetTimer,"","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,U_AnalogTripReset:AOI,PosTripTimer,"","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,U_CommFail:AOI,Inp_Heartbeat,"Heartbeat from Remote PLC","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_CommFail:AOI,CFG_DelayTimerSec,"Delay Timer in Seconds","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_CommFail:AOI,Sts_CommFail,"Communication Failure Alarm","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_CommFail:AOI,HeartBeatDelayTimerOn,"","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,U_CommFail:AOI,HeartBeatDelayTimerOff,"","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,U_CommFail:AOI,ConnectionStatusDelayTimer,"","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,U_Heartbeat:AOI,CFG_DelayTimerSec,"Delay Timer in Seconds","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_Heartbeat:AOI,Heartbeat,"Heartbeat from Remote PLC","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_Heartbeat:AOI,DelayTimerOn,"","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,U_Heartbeat:AOI,DelayTimerOff,"","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,U_MotorAvailable:AOI,Inp_MotorDemand,"Motor Position Demand","INT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := true, Visible := true)"
TAG,U_MotorAvailable:AOI,Inp_Motor1Running,"Motor #1 Running","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := true, Visible := true)"
TAG,U_MotorAvailable:AOI,Inp_Motor2Running,"Motor #2 Running","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := true, Visible := true)"
TAG,U_MotorAvailable:AOI,Inp_Motor3Running,"Motor #3 Running","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := true, Visible := true)"
TAG,U_MotorAvailable:AOI,Inp_Motor4Running,"Motor #4 Running","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := true, Visible := true)"
TAG,U_MotorAvailable:AOI,Inp_Motor5Running,"Motor #5 Running","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := true, Visible := true)"
TAG,U_MotorAvailable:AOI,Inp_Motor6Running,"Motor #6 Running","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := true, Visible := true)"
TAG,U_MotorAvailable:AOI,OSet_Motor1StartOrder,"Motor #1$NOperator Start Order","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,U_MotorAvailable:AOI,PSet_Motor1StartOrder,"Program$NMotor #1$NStart Order","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,U_MotorAvailable:AOI,Val_Motor1StartOrder,"Motor #1 $NStart Order","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_MotorAvailable:AOI,OSet_Motor2StartOrder,"Motor #2$NOperator Start Order","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,U_MotorAvailable:AOI,PSet_Motor2StartOrder,"Program$NMotor #2$NStart Order","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,U_MotorAvailable:AOI,Val_Motor2StartOrder,"Motor #2 $NStart Order","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_MotorAvailable:AOI,OSet_Motor3StartOrder,"Motor #3$NOperator Start Order","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,U_MotorAvailable:AOI,PSet_Motor3StartOrder,"Program$NMotor #3$NStart Order","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,U_MotorAvailable:AOI,Val_Motor3StartOrder,"Motor #3 $NStart Order","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_MotorAvailable:AOI,OSet_Motor4StartOrder,"Motor #4$NOperator Start Order","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,U_MotorAvailable:AOI,PSet_Motor4StartOrder,"Program$NMotor #4$NStart Order","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,U_MotorAvailable:AOI,Val_Motor4StartOrder,"Motor #4 $NStart Order","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_MotorAvailable:AOI,OSet_Motor5StartOrder,"Motor #5$NOperator Start Order","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,U_MotorAvailable:AOI,PSet_Motor5StartOrder,"Program$NMotor #5$NStart Order","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,U_MotorAvailable:AOI,Val_Motor5StartOrder,"Motor #5 $NStart Order","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_MotorAvailable:AOI,OSet_Motor6StartOrder,"Motor #6$NOperator Start Order","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,U_MotorAvailable:AOI,PSet_Motor6StartOrder,"Program$NMotor #6$NStart Order","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,U_MotorAvailable:AOI,Val_Motor6StartOrder,"Motor #6 $NStart Order","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_MotorAvailable:AOI,CFG_MotorStopDelaySec,"Motor Stop Delay Time (Sec)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_MotorAvailable:AOI,CFG_MotorStartDelaySec,"Motor Start Delay Time (Sec)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_MotorAvailable:AOI,CFG_AllMotorsOffInhibitTimeSec,"If Force Start Order, inhibit All Motors Off specificed time (Sec )","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_MotorAvailable:AOI,CFG_PosTotal,"Total # of Positions","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_MotorAvailable:AOI,OSet_StartOrderMethod,"Operator Selectable Start Order Method$N0= Operator$N1= Prog1$N2= Prog2$Nect.","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_MotorAvailable:AOI,Val_Motor1StartOrderNext,"Motor #1 $NStart Order $NNext Value","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,U_MotorAvailable:AOI,Val_Motor2StartOrderNext,"Motor #2 $NStart Order $NNext Value","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,U_MotorAvailable:AOI,Val_Motor3StartOrderNext,"Motor #3 $NStart Order $NNext Value","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,U_MotorAvailable:AOI,Val_Motor4StartOrderNext,"Motor #4 $NStart Order $NNext Value","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,U_MotorAvailable:AOI,Val_Motor5StartOrderNext,"Motor #5 $NStart Order $NNext Value","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,U_MotorAvailable:AOI,Val_Motor6StartOrderNext,"Motor #6 $NStart Order $NNext Value","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,U_MotorAvailable:AOI,Sts_AllowStartOrderChange,"Allow Start Order Change (May start/stop pumps)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_MotorAvailable:AOI,Sts_TotalMotorsRunning,"Total Motors Running","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_MotorAvailable:AOI,Sts_StartMotorCall,"Motor Start Call","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_MotorAvailable:AOI,Sts_StopMotorCall,"Motor Stop Call","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_MotorAvailable:AOI,Sts_MotorDemandMet,"Motor Demand equals Motors Running","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_MotorAvailable:AOI,Val_MotorPosCall,"Current Motor Position Call","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_MotorAvailable:AOI,Out_Motor1Start,"Motor #1 Start","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := true, Visible := true)"
TAG,U_MotorAvailable:AOI,Out_Motor1Stop,"Motor #1 Stop","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := true, Visible := true)"
TAG,U_MotorAvailable:AOI,Out_Motor2Start,"Motor #2 Start","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := true, Visible := true)"
TAG,U_MotorAvailable:AOI,Out_Motor2Stop,"Motor #2 Stop","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := true, Visible := true)"
TAG,U_MotorAvailable:AOI,Out_Motor3Start,"Motor #3 Start","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := true, Visible := true)"
TAG,U_MotorAvailable:AOI,Out_Motor3Stop,"Motor #3 Stop","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := true, Visible := true)"
TAG,U_MotorAvailable:AOI,Out_Motor4Start,"Motor #4 Start","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := true, Visible := true)"
TAG,U_MotorAvailable:AOI,Out_Motor4Stop,"Motor #4 Stop","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := true, Visible := true)"
TAG,U_MotorAvailable:AOI,Out_Motor5Start,"Motor #5 Start","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := true, Visible := true)"
TAG,U_MotorAvailable:AOI,Out_Motor5Stop,"Motor #5 Stop","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := true, Visible := true)"
TAG,U_MotorAvailable:AOI,Out_Motor6Start,"Motor #6 Start","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := true, Visible := true)"
TAG,U_MotorAvailable:AOI,Out_Motor6Stop,"Motor #6 Stop","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := true, Visible := true)"
TAG,U_MotorAvailable:AOI,Sts_StartOrderMethodChange,"Start Order Method Change","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,U_MotorAvailable:AOI,Sts_TotalMotorsDemand,"Total Motors Demand","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_MotorAvailable:AOI,AllMotorsOffOnce,"All Motors Off Once","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,U_MotorAvailable:AOI,AllMotorsOffONS,"All Motors Off ON","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,U_MotorAvailable:AOI,AllMotorsOffInhibitTimer,"All Motors Off Inhibit Timer","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,U_MotorAvailable:AOI,TempTotalMotorsRunning,"Calculate Total Motors Running","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,U_MotorAvailable:AOI,StartMotorDelayTimer,"Start Motor Delay Timer","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,U_MotorAvailable:AOI,StopMotorDelayTimer,"Stop Motor Delay Timer","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,U_MotorAvailable:AOI,OSet_StartOrderForce,"<NOT SUPPORTED FOR INCH WORM LOGIC>  $NForce Start Order","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,U_MotorAvailable:AOI,StartOrderMethodLast,"Last Start Order Method","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,U_MotorAvailable:AOI,AllMotorsOff,"All Motors Off","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,U_MotorAvailable:AOI,TempTotalMotorsDemand,"Total Motors Demand Temp","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,U_MotorDemand:AOI,Inp_Analog,"","P_AIn","","(Usage := InOut, Constant := false, Required := true, Visible := true)"
TAG,U_MotorDemand:AOI,Out_MotorDemand,"Total Motor Demand Output","INT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_MotorDemand:AOI,CFG_TripDirectionDrain,"Trip Direction  $N1 =  Drain or Up $N0 = Fill or Down","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_MotorDemand:AOI,CFG_PosTotal,"Total Positions","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_MotorDemand:AOI,Sts_AnalogBad,"Analog Value Bad","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_MotorDemand:AOI,Val_Analog,"Analog Value","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_MotorDemand:AOI,Pos,"Position Analog Trip\Reset","U_AnalogTripReset[7]","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,U_MotorDemand:AOI,TempMotorDemand,"Temporary Motor Demand Calculation","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,U_MotorStartOrderRotation:AOI,Inp_StartOrderMethod,"Start Order Method","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_MotorStartOrderRotation:AOI,Inp_PosTotal,"Position Total","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_MotorStartOrderRotation:AOI,Inp_ForceRotate,"Map to the Master Force Rotate","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_MotorStartOrderRotation:AOI,Inp_Motor1StartOrderFdbk,"Motor #1 $NStart Order Feedback","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_MotorStartOrderRotation:AOI,Inp_Motor2StartOrderFdbk,"Motor #2 $NStart Order Feedback","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_MotorStartOrderRotation:AOI,Inp_Motor3StartOrderFdbk,"Motor #3 $NStart Order Feedback","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_MotorStartOrderRotation:AOI,Inp_Motor4StartOrderFdbk,"Motor #4 $NStart Order Feedback","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_MotorStartOrderRotation:AOI,Inp_Motor5StartOrderFdbk,"Motor #5 $NStart Order Feedback","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_MotorStartOrderRotation:AOI,Inp_Motor6StartOrderFdbk,"Motor #6 $NStart Order Feedback","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_MotorStartOrderRotation:AOI,Val_Motor1StartOrder,"Motor #1 Start Order","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_MotorStartOrderRotation:AOI,Val_Motor2StartOrder,"Motor #2 Start Order","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_MotorStartOrderRotation:AOI,Val_Motor3StartOrder,"Motor #3 Start Order","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_MotorStartOrderRotation:AOI,Val_Motor4StartOrder,"Motor #4 Start Order","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_MotorStartOrderRotation:AOI,Val_Motor5StartOrder,"Motor #5 Start Order","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_MotorStartOrderRotation:AOI,Val_Motor6StartOrder,"Motor #6 Start Order","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_MotorStartOrderRotation:AOI,CFG_StartOrderMethod,"Assign the Start Order Method","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_MotorStartOrderRotation:AOI,RotateEnableONS,"Rotate Enable ON","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,U_MotorStartOrderRotation:AOI,TempMotorStartOrder,"Temporary Motor Start Order for calculation","DINT[7]","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,U_MotorStartOrderRotation:AOI,MethodEnabledONS,"Start Order Method Enabled ON","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,U_MotorStartOrderRotation:AOI,RotateMotors,"Motors will be rotated (enabled only for single scan)","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,U_MotorStartOrderRotation:AOI,MethodEnabledOnce,"Method Enabled Once","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,U_WallClock:AOI,OCmd_SetTime,"Set the Date and Time Bit","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_WallClock:AOI,OSet_Year,"Year To Set","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_WallClock:AOI,OSet_Month,"Month To Set","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_WallClock:AOI,OSet_Day,"Day To Set","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_WallClock:AOI,OSet_Hour,"Hour To Set","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_WallClock:AOI,OSet_Minute,"Minute To Set","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_WallClock:AOI,OSet_Second,"Second To Set","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Val_CurrentYear,"Current Year","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Val_CurrentMonth,"Current Month","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Val_CurrentDay,"Current Day","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Val_CurrentHour,"Current Hour","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Val_CurrentMinute,"Current Minute","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Val_CurrentSecond,"Current Second","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Val_DayOfWeek,"Day of Week$N 0 = Sun, 1=Mon, 2=Tues, 3=Wed, 4=Thur, 5=Fri, 6=Sat","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Sts_HourlyReset,"Hourly Reset","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Sts_DailyReset,"Daily Reset","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Sts_MonthlyReset,"Monthly Reset","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Sts_YearlyReset,"Yearly Reset","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Wrk_SetDateTime,"","DINT[7]","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,U_WallClock:AOI,Wrk_GetDateTime,"Result of GSV to Wall clock time -- input to Day of Week calculation","DINT[7]","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
COMMENT,U_WallClock:AOI,Wrk_GetDateTime,"Year",,"Wrk_GetDateTime[0]"
COMMENT,U_WallClock:AOI,Wrk_GetDateTime,"Month",,"Wrk_GetDateTime[1]"
COMMENT,U_WallClock:AOI,Wrk_GetDateTime,"Day",,"Wrk_GetDateTime[2]"
COMMENT,U_WallClock:AOI,Wrk_GetDateTime,"Hour",,"Wrk_GetDateTime[3]"
COMMENT,U_WallClock:AOI,Wrk_GetDateTime,"Minute",,"Wrk_GetDateTime[4]"
COMMENT,U_WallClock:AOI,Wrk_GetDateTime,"Second",,"Wrk_GetDateTime[5]"
COMMENT,U_WallClock:AOI,Wrk_GetDateTime,"Microsecond",,"Wrk_GetDateTime[6]"
TAG,U_WallClock:AOI,Wrk_G,"Function of Year and Month, used to calculate Day of Week","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,U_WallClock:AOI,Wrk_F,"Function of Month, used to calculate Day of Week","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,U_WallClock:AOI,Wrk_DayONS,"One-Shot for daily pulse output","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,U_WallClock:AOI,Wrk_HourONS,"One-Shot for hourly pulse output","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,U_WallClock:AOI,Wrk_MonthONS,"One-Shot for monthly pulse output","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,U_WallClock:AOI,Wrk_YearONS,"One-Shot for yearly pulse output","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"MainProgram","A01_DiscreteInputs","===============================================================$NDISCRETE INPUTS$N===============================================================$NDEVICE  ALARM 0 CONTACT$N1 = OK (target = 1 at all times)$N0 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Alm00)","0"
RCOMMENT,"MainProgram","A01_DiscreteInputs","DEVICE ALARM 1 CONTACT$N1 = OK (target = 1 at all times)$N0 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Alm01)","1"
RCOMMENT,"MainProgram","A01_DiscreteInputs","DEVICE ALARM 2 CONTACT$N1 = OK (target = 1 at all times)$N0 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Alm02)","2"
RCOMMENT,"MainProgram","A01_DiscreteInputs","DEVICE ALARM 3 CONTACT$N1 = OK (target = 1 at all times)$N0 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Alm03)","3"
RCOMMENT,"MainProgram","A01_DiscreteInputs","DEVICE ALARM 4 CONTACT$N1 = OK (target = 1 at all times)$N0 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Alm04)","4"
RCOMMENT,"MainProgram","A02_AnalogInputs","===============================================================$NANALOG INPUTS 0$N===============================================================$N6217 to 31104 Unscaled (4 - 20 mamps)$N4 mamps = 6217$N3 mamps = 4662$N20 mamps = 31104$N21 mamps = 32640","AIn(Analog00)","0"
RCOMMENT,"MainProgram","A02_AnalogInputs","===============================================================$NANALOG INPUTS 1$N===============================================================$N6217 to 31104 Unscaled (4 - 20 mamps)$N4 mamps = 6217$N3 mamps = 4662$N20 mamps = 31104$N21 mamps = 32640","AIn(Analog01)","1"
RCOMMENT,"MainProgram","A02_AnalogInputs","===============================================================$NANALOG INPUTS 2$N===============================================================$N6217 to 31104 Unscaled (4 - 20 mamps)$N4 mamps = 6217$N3 mamps = 4662$N20 mamps = 31104$N21 mamps = 32640","AIn(Analog02)","2"
RCOMMENT,"MainProgram","A02_AnalogInputs","===============================================================$NANALOG INPUTS 3$N===============================================================$N6217 to 31104 Unscaled (4 - 20 mamps)$N4 mamps = 6217$N3 mamps = 4662$N20 mamps = 31104$N21 mamps = 32640","AIn(Analog03)","3"
RCOMMENT,"MainProgram","A03_DiscretOutputs","===============================================================$NOUTPUT MAPPING$N===============================================================","NOP()","0"
RCOMMENT,"MainProgram","A03_DiscretOutputs","===============================================================$NALARM DIALER$N===============================================================$NExample for alarm dialer.  $NMotor Val_Notify$N4 = warning$N5= warning not acknowledged$N6= exception $N7 = exc","OTE(O_AlarmDialer)","1"
RCOMMENT,"MainProgram","A04_AnalogOutputs","===============================================================$NOUTPUT MAPPING$N===============================================================","NOP()","0"
RCOMMENT,"MainProgram","Main","===============================================================$NPUMP  SIMULATION$N===============================================================$NGlobal on/off inputs simulation","OTL(PLC_Simulation)","0"
RCOMMENT,"MainProgram","Main","===============================================================$NWALL CLOCK$N==============================================================","WallClock(PLC_WallClock)","1"
RCOMMENT,"MainProgram","Main","===============================================================$NHEART BEAT$N==============================================================","Heartbeat(PLC_Heartbeat)","2"
RCOMMENT,"MainProgram","Main","===============================================================$NPLC COMMUNICATION FAIL$N==============================================================$NUse if plc is not using produce/consume","CommFail(WTP_CLX_CommFail)","3"
RCOMMENT,"MainProgram","Main","===============================================================$NSUB ROUTINE$N===============================================================","JSR(A01_DiscreteInputs,0)","4"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"Pumps","A01_Pump1_Alarms","===============================================================$NDISCRETE INPUTS$N===============================================================$NDEVICE  ALARM 0 CONTACT$N0 = OK (target = 1 at all times)$N1 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device1_Alm0)","0"
RCOMMENT,"Pumps","A01_Pump1_Alarms","DEVICE ALARM 1 CONTACT$N0 = OK (target = 1 at all times)$N1 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device1_Alm1)","1"
RCOMMENT,"Pumps","A01_Pump1_Alarms","DEVICE ALARM 2 CONTACT$N1 = OK (target = 1 at all times)$N0 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device1_Alm2)","2"
RCOMMENT,"Pumps","A01_Pump1_Alarms","DEVICE ALARM 3 CONTACT$N1 = OK (target = 1 at all times)$N0 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device1_Alm3)","3"
RCOMMENT,"Pumps","A01_Pump1_Alarms","DEVICE ALARM 4 CONTACT$N1 = OK (target = 1 at all times)$N0 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device1_Alm4)","4"
RCOMMENT,"Pumps","A02_Pump1_Control","===============================================================$NDEVICE$N===============================================================$NDevice with interlocks, $Nstart permissive (restart inhibit), and run time accumulator.$NRevision 0.1-00-01 (DER)  F","NOP()","0"
RCOMMENT,"Pumps","A02_Pump1_Control","===============================================================$NDEVICE  SIMULATION$N===============================================================$NGlobal on/off inputs simulation to Pump","OTE(Device1.Motor.Inp_Sim)","1"
RCOMMENT,"Pumps","A02_Pump1_Control","===============================================================$NRESET$N===============================================================$NDEVICE RESET$NResets all alarms, interlocks and faults for the P1 motor and related signals. $NIt also receives","Reset(Device1.Reset)","2"
RCOMMENT,"Pumps","A02_Pump1_Control","===============================================================$NDEVICE PERMISSIVE$N===============================================================$NPerm 00 = Restart Inhibit (P_ResInh, below)$NPerm 01 through Perm 07 = Configurable","Perm(Device1.Perm)","3"
RCOMMENT,"Pumps","A02_Pump1_Control","===============================================================$NDEVICE INTERLOCKS$N===============================================================$NIntlk 00 through 07 = Configurable","Intlk(Device1.Intlk)","4"
RCOMMENT,"Pumps","A02_Pump1_Control","===============================================================$NDEVICE MOTOR$N===============================================================$NThis rung actually monitors and controls the Device motor.$NMapping inputs:  Run Feedback$NHand Mode selection","OTE(Device1_Out_Run)","5"
RCOMMENT,"Pumps","A02_Pump1_Control","===============================================================$NDEVICE  RUN TIME$N===============================================================$NMonitor Pump and accumulate run time and start statistics.","RunTime(Device1.RunTime)","6"
RCOMMENT,"Pumps","A02_Pump1_Control","===============================================================$NDEVICE RESTART INHIBIT$N===============================================================$NMonitor Pump Starts and Running; do not allow a Start if doing so$Nwould be harmful to the motor ","ResInh(Device1.ResInh)","7"
RCOMMENT,"Pumps","A02_Pump1_Control","===============================================================$NDEVICE PROG MODE$N===============================================================$NWhen operator mode is unlocked, enable automatic control (PCmd_Acq)$NUnlatch PCmdClear to accept maintained$N","OTU(Device1.Motor.Cfg_PCmdClear)","8"
RCOMMENT,"Pumps","A03_Pump2_Alarms","===============================================================$NDISCRETE INPUTS$N===============================================================$NDEVICE ALARM 0 CONTACT$N0 = OK (target = 1 at all times)$N1 = Alarm$NALWAYS checked (Gate = 1 at all times)$N","DIn(Device2_Alm0)","0"
RCOMMENT,"Pumps","A03_Pump2_Alarms","DEVICE ALARM 1 CONTACT$N0 = OK (target = 1 at all times)$N1 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device2_Alm1)","1"
RCOMMENT,"Pumps","A03_Pump2_Alarms","DEVICE ALARM 2 CONTACT$N1 = OK (target = 1 at all times)$N0 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device2_Alm2)","2"
RCOMMENT,"Pumps","A03_Pump2_Alarms","DEVICE ALARM 3 CONTACT$N1 = OK (target = 1 at all times)$N0 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device2_Alm3)","3"
RCOMMENT,"Pumps","A03_Pump2_Alarms","DEVICE ALARM 4 CONTACT$N1 = OK (target = 1 at all times)$N0 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device2_Alm4)","4"
RCOMMENT,"Pumps","A04_Pump2_Control","===============================================================$NDEVICE$N===============================================================$NDevice with interlocks, $Nstart permissive (restart inhibit), and run time accumulator.$NRevision 0.1-00-01 (DER)  F$N","NOP()","0"
RCOMMENT,"Pumps","A04_Pump2_Control","===============================================================$NDEVICE SIMULATION$N===============================================================$NGlobal on/off inputs simulation to Pump$N","OTE(Device2.Motor.Inp_Sim)","1"
RCOMMENT,"Pumps","A04_Pump2_Control","===============================================================$NRESET$N===============================================================$NDEVICE RESET$NResets all alarms, interlocks and faults for the P1 motor and related signals. $NIt also receives$N","Reset(Device2.Reset)","2"
RCOMMENT,"Pumps","A04_Pump2_Control","===============================================================$NDEVICE PERMISSIVE$N===============================================================$NPerm 00 = Restart Inhibit (P_ResInh, below)$NPerm 01 through Perm 07 = Configurable$N","Perm(Device2.Perm)","3"
RCOMMENT,"Pumps","A04_Pump2_Control","===============================================================$NDEVICE INTERLOCKS$N===============================================================$NIntlk 00 through 07 = Configurable","Intlk(Device2.Intlk)","4"
RCOMMENT,"Pumps","A04_Pump2_Control","===============================================================$NDEVICE MOTOR$N===============================================================$NThis rung actually monitors and controls the Device motor.$NMapping inputs:  Run Feedback$NHand Mode selection","OTE(Device2_Out_Run)","5"
RCOMMENT,"Pumps","A04_Pump2_Control","===============================================================$NDEVICE RUN TIME$N===============================================================$NMonitor Pump and accumulate run time and start statistics.","RunTime(Device2.RunTime)","6"
RCOMMENT,"Pumps","A04_Pump2_Control","===============================================================$NDEVICE RESTART INHIBIT$N===============================================================$NMonitor Pump Starts and Running; do not allow a Start if doing so$Nwould be harmful to the motor$N","ResInh(Device2.ResInh)","7"
RCOMMENT,"Pumps","A04_Pump2_Control","===============================================================$NDEVICE PROG MODE$N===============================================================$NWhen operator mode is unlocked, enable automatic control (PCmd_Acq)$NUnlatch PCmdClear to accept maintained$N","OTU(Device2.Motor.Cfg_PCmdClear)","8"
RCOMMENT,"Pumps","A05_Pump3_Alarms","===============================================================$NDISCRETE INPUTS$N===============================================================$NDEVICE ALARM 0 CONTACT$N0 = OK (target = 1 at all times)$N1 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device3_Alm0)","0"
RCOMMENT,"Pumps","A05_Pump3_Alarms","DEVICE ALARM 1 CONTACT$N0 = OK (target = 1 at all times)$N1 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device3_Alm1)","1"
RCOMMENT,"Pumps","A05_Pump3_Alarms","DEVICE ALARM 2 CONTACT$N1 = OK (target = 1 at all times)$N0 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device3_Alm2)","2"
RCOMMENT,"Pumps","A05_Pump3_Alarms","DEVICE ALARM 3 CONTACT$N1 = OK (target = 1 at all times)$N0 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device3_Alm3)","3"
RCOMMENT,"Pumps","A05_Pump3_Alarms","DEVICE ALARM 4 CONTACT$N1 = OK (target = 1 at all times)$N0 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device3_Alm4)","4"
RCOMMENT,"Pumps","A06_Pump3_Control","===============================================================$NDEVICE$N===============================================================$NDevice with interlocks, $Nstart permissive (restart inhibit), and run time accumulator.$NRevision 0.1-00-01 (DER)  F$N","NOP()","0"
RCOMMENT,"Pumps","A06_Pump3_Control","===============================================================$NDEVICE SIMULATION$N===============================================================$NGlobal on/off inputs simulation to Pump","OTE(Device3.Motor.Inp_Sim)","1"
RCOMMENT,"Pumps","A06_Pump3_Control","===============================================================$NRESET$N===============================================================$NDEVICE RESET$NResets all alarms, interlocks and faults for the P1 motor and related signals. $NIt also receives","Reset(Device3.Reset)","2"
RCOMMENT,"Pumps","A06_Pump3_Control","===============================================================$NDEVICE PERMISSIVE$N===============================================================$NPerm 00 = Restart Inhibit (P_ResInh, below)$NPerm 01 through Perm 07 = Configurable$N","Perm(Device3.Perm)","3"
RCOMMENT,"Pumps","A06_Pump3_Control","===============================================================$NDEVICE INTERLOCKS$N===============================================================$NIntlk 00 through 07 = Configurable","Intlk(Device3.Intlk)","4"
RCOMMENT,"Pumps","A06_Pump3_Control","===============================================================$NDEVICE MOTOR$N===============================================================$NThis rung actually monitors and controls the Device motor.$NMapping inputs:  Run Feedback$NHand Mode selection","OTE(Device3_Out_Run)","5"
RCOMMENT,"Pumps","A06_Pump3_Control","===============================================================$NDEVICE RUN TIME$N===============================================================$NMonitor Pump, accumulate run time, and start statistics.$N","RunTime(Device3.RunTime)","6"
RCOMMENT,"Pumps","A06_Pump3_Control","===============================================================$NDEVICE RESTART INHIBIT$N===============================================================$NMonitor Pump Starts and Running; do not allow a Start if doing so$Nwould be harmful to the motor","ResInh(Device3.ResInh)","7"
RCOMMENT,"Pumps","A06_Pump3_Control","===============================================================$NDEVICE PROG MODE$N===============================================================$NWhen operator mode is unlocked, enable automatic control (PCmd_Acq)$NUnlatch PCmdClear to accept maintained$N","OTU(Device3.Motor.Cfg_PCmdClear)","8"
RCOMMENT,"Pumps","A07_Pump4_Alarms","===============================================================$NDISCRETE INPUTS$N===============================================================$NDEVICE ALARM 0 CONTACT$N0 = OK (target = 1 at all times)$N1 = Alarm$NALWAYS checked (Gate = 1 at all times)$N","DIn(Device4_Alm0)","0"
RCOMMENT,"Pumps","A07_Pump4_Alarms","DEVICE ALARM 1 CONTACT$N0 = OK (target = 1 at all times)$N1 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device4_Alm1)","1"
RCOMMENT,"Pumps","A07_Pump4_Alarms","DEVICE ALARM 2 CONTACT$N1 = OK (target = 1 at all times)$N0 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device4_Alm2)","2"
RCOMMENT,"Pumps","A07_Pump4_Alarms","DEVICE ALARM 3 CONTACT$N1 = OK (target = 1 at all times)$N0 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device4_Alm3)","3"
RCOMMENT,"Pumps","A07_Pump4_Alarms","DEVICE ALARM 4 CONTACT$N1 = OK (target = 1 at all times)$N0 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device4_Alm4)","4"
RCOMMENT,"Pumps","A08_Pump4_Control","===============================================================$NDEVICE$N===============================================================$NDevice with interlocks, $Nstart permissive (restart inhibit), and run time accumulator.$NRevision 0.1-00-01 (DER)  F$N","NOP()","0"
RCOMMENT,"Pumps","A08_Pump4_Control","===============================================================$NDEVICE SIMULATION$N===============================================================$NGlobal on/off inputs simulation to Pump$N","OTE(Device4.Motor.Inp_Sim)","1"
RCOMMENT,"Pumps","A08_Pump4_Control","===============================================================$NRESET$N===============================================================$NDEVICE RESET$NResets all alarms, interlocks and faults for the P1 motor and related signals. $NIt also receives$N","Reset(Device4.Reset)","2"
RCOMMENT,"Pumps","A08_Pump4_Control","===============================================================$NDEVICE PERMISSIVE$N===============================================================$NPerm 00 = Restart Inhibit (P_ResInh, below)$NPerm 01 through Perm 07 = Configurable$N","Perm(Device4.Perm)","3"
RCOMMENT,"Pumps","A08_Pump4_Control","===============================================================$NDEVICE INTERLOCKS$N===============================================================$NIntlk 00 through 07 = Configurable$N","Intlk(Device4.Intlk)","4"
RCOMMENT,"Pumps","A08_Pump4_Control","===============================================================$NDEVICE MOTOR$N===============================================================$NThis rung actually monitors and controls the Device motor.$NMapping inputs:  Run Feedback$NHand Mode selection$N","OTE(Device4_Out_Run)","5"
RCOMMENT,"Pumps","A08_Pump4_Control","===============================================================$NDEVICE RUN TIME$N===============================================================$NMonitor Pump, accumulate run time, and start statistics.$N","RunTime(Device4.RunTime)","6"
RCOMMENT,"Pumps","A08_Pump4_Control","===============================================================$NDEVICE RESTART INHIBIT$N===============================================================$NMonitor Pump Starts and Running; do not allow a Start if doing so$Nwould be harmful to the motor$N","ResInh(Device4.ResInh)","7"
RCOMMENT,"Pumps","A08_Pump4_Control","===============================================================$NDEVICE PROG MODE$N===============================================================$NWhen operator mode is unlocked, enable automatic control (PCmd_Acq)$NUnlatch PCmdClear to accept maintained$N","OTU(Device4.Motor.Cfg_PCmdClear)","8"
RCOMMENT,"Pumps","A09_Pump5_Alarms","===============================================================$NDISCRETE INPUTS$N===============================================================$NDEVICE ALARM 0 CONTACT$N0 = OK (target = 1 at all times)$N1 = Alarm$NALWAYS checked (Gate = 1 at all times)$N","DIn(Device5_Alm0)","0"
RCOMMENT,"Pumps","A09_Pump5_Alarms","DEVICE ALARM 1 CONTACT$N0 = OK (target = 1 at all times)$N1 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device5_Alm1)","1"
RCOMMENT,"Pumps","A09_Pump5_Alarms","DEVICE ALARM 2 CONTACT$N1 = OK (target = 1 at all times)$N0 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device5_Alm2)","2"
RCOMMENT,"Pumps","A09_Pump5_Alarms","DEVICE ALARM 3 CONTACT$N1 = OK (target = 1 at all times)$N0 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device5_Alm3)","3"
RCOMMENT,"Pumps","A09_Pump5_Alarms","DEVICE ALARM 4 CONTACT$N1 = OK (target = 1 at all times)$N0 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device5_Alm4)","4"
RCOMMENT,"Pumps","A10_Pump5_Control","===============================================================$NDEVICE$N===============================================================$NDevice with interlocks, $Nstart permissive (restart inhibit), and run time accumulator.$NRevision 0.1-00-01 (DER)  F$N","NOP()","0"
RCOMMENT,"Pumps","A10_Pump5_Control","===============================================================$NDEVICE SIMULATION$N===============================================================$NGlobal on/off inputs simulation to Pump$N","OTE(Device5.Motor.Inp_Sim)","1"
RCOMMENT,"Pumps","A10_Pump5_Control","===============================================================$NRESET$N===============================================================$NDEVICE RESET$NResets all alarms, interlocks and faults for the P1 motor and related signals. $NIt also receives$N","Reset(Device5.Reset)","2"
RCOMMENT,"Pumps","A10_Pump5_Control","===============================================================$NDEVICE PERMISSIVE$N===============================================================$NPerm 00 = Restart Inhibit (P_ResInh, below)$NPerm 01 through Perm 07 = Configurable$N","Perm(Device5.Perm)","3"
RCOMMENT,"Pumps","A10_Pump5_Control","===============================================================$NDEVICE INTERLOCKS$N===============================================================$NIntlk 00 through 07 = Configurable$N","Intlk(Device5.Intlk)","4"
RCOMMENT,"Pumps","A10_Pump5_Control","===============================================================$NDEVICE MOTOR$N===============================================================$NThis rung actually monitors and controls the Device motor.$NMapping inputs:  Run Feedback$NHand Mode selection$N","OTE(Device5_Out_Run)","5"
RCOMMENT,"Pumps","A10_Pump5_Control","===============================================================$NDEVICE RUN TIME$N===============================================================$NMonitor Pump, accumulate run time, and start statistics.$N","RunTime(Device5.RunTime)","6"
RCOMMENT,"Pumps","A10_Pump5_Control","===============================================================$NDEVICE RESTART INHIBIT$N===============================================================$NMonitor Pump Starts and Running; do not allow a Start if doing so$Nwould be harmful to the motor$N","ResInh(Device5.ResInh)","7"
RCOMMENT,"Pumps","A10_Pump5_Control","===============================================================$NDEVICE PROG MODE$N===============================================================$NWhen operator mode is unlocked, enable automatic control (PCmd_Acq)$NUnlatch PCmdClear to accept maintained$N","OTU(Device5.Motor.Cfg_PCmdClear)","8"
RCOMMENT,"Pumps","A11_Pump6_Alarms","===============================================================$NDISCRETE INPUTS$N===============================================================$NDEVICE ALARM 0 CONTACT$N0 = OK (target = 1 at all times)$N1 = Alarm$NALWAYS checked (Gate = 1 at all times)$N","DIn(Device6_Alm0)","0"
RCOMMENT,"Pumps","A11_Pump6_Alarms","DEVICE ALARM 1 CONTACT$N0 = OK (target = 1 at all times)$N1 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device6_Alm1)","1"
RCOMMENT,"Pumps","A11_Pump6_Alarms","DEVICE ALARM 2 CONTACT$N1 = OK (target = 1 at all times)$N0 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device6_Alm2)","2"
RCOMMENT,"Pumps","A11_Pump6_Alarms","DEVICE ALARM 3 CONTACT$N1 = OK (target = 1 at all times)$N0 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device6_Alm3)","3"
RCOMMENT,"Pumps","A11_Pump6_Alarms","DEVICE ALARM 4 CONTACT$N1 = OK (target = 1 at all times)$N0 = Alarm$NALWAYS checked (Gate = 1 at all times)","DIn(Device6_Alm4)","4"
RCOMMENT,"Pumps","A12_Pump6_Control","===============================================================$NDEVICE$N===============================================================$NDevice with interlocks, $Nstart permissive (restart inhibit), and run time accumulator.$NRevision 0.1-00-01 (DER)  F$N","NOP()","0"
RCOMMENT,"Pumps","A12_Pump6_Control","===============================================================$NDEVICE SIMULATION$N===============================================================$NGlobal on/off inputs simulation to Pump$N","OTE(Device6.Motor.Inp_Sim)","1"
RCOMMENT,"Pumps","A12_Pump6_Control","===============================================================$NRESET$N===============================================================$NDEVICE RESET$NResets all alarms, interlocks and faults for the P1 motor and related signals. $NIt also receives$N","Reset(Device6.Reset)","2"
RCOMMENT,"Pumps","A12_Pump6_Control","===============================================================$NDEVICE PERMISSIVE$N===============================================================$NPerm 00 = Restart Inhibit (P_ResInh, below)$NPerm 01 through Perm 07 = Configurable$N","Perm(Device6.Perm)","3"
RCOMMENT,"Pumps","A12_Pump6_Control","===============================================================$NDEVICE INTERLOCKS$N===============================================================$NIntlk 00 through 07 = Configurable$N","Intlk(Device6.Intlk)","4"
RCOMMENT,"Pumps","A12_Pump6_Control","===============================================================$NDEVICE MOTOR$N===============================================================$NThis rung actually monitors and controls the Device motor.$NMapping inputs:  Run Feedback$NHand Mode selection$N","OTE(Device6_Out_Run)","5"
RCOMMENT,"Pumps","A12_Pump6_Control","===============================================================$NDEVICE RUN TIME$N===============================================================$NMonitor Pump, accumulate run time, and start statistics.$N","RunTime(Device6.RunTime)","6"
RCOMMENT,"Pumps","A12_Pump6_Control","===============================================================$NDEVICE RESTART INHIBIT$N===============================================================$NMonitor Pump Starts and Running; do not allow a Start if doing so$Nwould be harmful to the motor$N","ResInh(Device6.ResInh)","7"
RCOMMENT,"Pumps","A12_Pump6_Control","===============================================================$NDEVICE PROG MODE$N===============================================================$NWhen operator mode is unlocked, enable automatic control (PCmd_Acq)$NUnlatch PCmdClear to accept maintained$N","OTU(Device6.Motor.Cfg_PCmdClear)","8"
RCOMMENT,"Pumps","Main","===============================================================$NSUB ROUTINE$N===============================================================","JSR(A02_Pump1_Control,0)","0"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"PumpSystem","A01_StartOrder","===============================================================$NMOTOR START ORDER BY ROTATION$N===============================================================","MotorStartOrderRotation(PumpStartOrderRotation)","0"
RCOMMENT,"PumpSystem","A01_StartOrder","===============================================================$NMASTER PSET PUMP AVAILABLE MOTOR 1$N===============================================================","MOV(PumpStartOrderRotation.Val_Motor1StartOrder,PumpAvailable.PSet_Motor1StartOrder)","1"
RCOMMENT,"PumpSystem","A01_StartOrder","===============================================================$NMASTER PSET PUMP AVAILABLE MOTOR 2$N===============================================================","MOV(PumpStartOrderRotation.Val_Motor2StartOrder,PumpAvailable.PSet_Motor2StartOrder)","2"
RCOMMENT,"PumpSystem","A01_StartOrder","===============================================================$NMASTER PSET PUMP AVAILABLE MOTOR 3$N===============================================================","MOV(PumpStartOrderRotation.Val_Motor3StartOrder,PumpAvailable.PSet_Motor3StartOrder)","3"
RCOMMENT,"PumpSystem","A01_StartOrder","===============================================================$NMASTER PSET PUMP AVAILABLE MOTOR 4$N===============================================================","MOV(PumpStartOrderRotation.Val_Motor4StartOrder,PumpAvailable.PSet_Motor4StartOrder)","4"
RCOMMENT,"PumpSystem","A01_StartOrder","===============================================================$NMASTER PSET PUMP AVAILABLE MOTOR 5$N===============================================================","MOV(PumpStartOrderRotation.Val_Motor5StartOrder,PumpAvailable.PSet_Motor5StartOrder)","5"
RCOMMENT,"PumpSystem","A01_StartOrder","===============================================================$NMASTER PSET PUMP AVAILABLE MOTOR 6$N===============================================================","MOV(PumpStartOrderRotation.Val_Motor6StartOrder,PumpAvailable.PSet_Motor6StartOrder)","6"
RCOMMENT,"PumpSystem","A02_Control","===============================================================$NMOTOR DEMAND$N===============================================================","MotorDemand(PumpDemand,Lv1)","0"
RCOMMENT,"PumpSystem","A02_Control","===============================================================$NMOTOR AVAILABLE$N===============================================================","MotorAvailable(PumpAvailable,PumpDemand.Out_MotorDemand,Pump1.Motor.Sts_Running,Pump2.Motor.Sts_Running,Pump3.Motor.Sts_Running,Pump4.Motor.Sts_Running,Pump5.Motor.Sts_Running,Pump6.Motor.Sts_Running,Pump1.Motor.PCmd_Start,Pump1.Motor.PCmd_Stop,Pump2.Motor.PCmd_Start,Pump2.Motor.PCmd_Stop,Pump3.Motor.PCmd_Start,Pump3.Motor.PCmd_Stop,Pump4.Motor.PCmd_Start,Pump4.Motor.PCmd_Stop,Pump5.Motor.PCmd_Start,Pump5.Motor.PCmd_Stop,Pump6.Motor.PCmd_Start,Pump6.Motor.PCmd_Stop)","1"
RCOMMENT,"PumpSystem","Main","===============================================================$NSUB ROUTINE$N===============================================================","JSR(A02_Control,0)","0"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
remark,"Comments for Program (P_AIn:AOI) Routine (EnableInFalse) not exported: source is protected"
remark,"Comments for Program (P_AIn:AOI) Routine (Logic) not exported: source is protected"
remark,"Comments for Program (P_AIn:AOI) Routine (Prescan) not exported: source is protected"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
remark,"Comments for Program (P_Alarm:AOI) Routine (EnableInFalse) not exported: source is protected"
remark,"Comments for Program (P_Alarm:AOI) Routine (Logic) not exported: source is protected"
remark,"Comments for Program (P_Alarm:AOI) Routine (Prescan) not exported: source is protected"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
remark,"Comments for Program (P_DIn:AOI) Routine (EnableInFalse) not exported: source is protected"
remark,"Comments for Program (P_DIn:AOI) Routine (Logic) not exported: source is protected"
remark,"Comments for Program (P_DIn:AOI) Routine (Prescan) not exported: source is protected"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
remark,"Comments for Program (P_Intlk:AOI) Routine (EnableInFalse) not exported: source is protected"
remark,"Comments for Program (P_Intlk:AOI) Routine (Logic) not exported: source is protected"
remark,"Comments for Program (P_Intlk:AOI) Routine (Prescan) not exported: source is protected"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
remark,"Comments for Program (P_Mode:AOI) Routine (EnableInFalse) not exported: source is protected"
remark,"Comments for Program (P_Mode:AOI) Routine (Logic) not exported: source is protected"
remark,"Comments for Program (P_Mode:AOI) Routine (Prescan) not exported: source is protected"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
remark,"Comments for Program (P_Motor:AOI) Routine (EnableInFalse) not exported: source is protected"
remark,"Comments for Program (P_Motor:AOI) Routine (Logic) not exported: source is protected"
remark,"Comments for Program (P_Motor:AOI) Routine (Prescan) not exported: source is protected"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
remark,"Comments for Program (P_Perm:AOI) Routine (EnableInFalse) not exported: source is protected"
remark,"Comments for Program (P_Perm:AOI) Routine (Logic) not exported: source is protected"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"P_Reset:AOI","EnableInFalse","============================================================$NP_Reset:  RESET EnableIn False Handling$N============================================================$NOn EnableIn False:$N$NClear the bit used to detect EnableIn transition from False to True$Nin preparation for the next transition$N$N(See main Logic Routine for EnableIn False-to-True triggering of Reset.)","OTU(Wrk_EnableInONS)","0"
RCOMMENT,"P_Reset:AOI","EnableInFalse","============================================================$NCONFIGURATION$N============================================================$NThis rung takes the configured Output Hold time and calculates$Nthe appropriate hold timer preset.  A negative prese","OTE(Sts_Err)","1"
RCOMMENT,"P_Reset:AOI","EnableInFalse","============================================================$NCOMMAND AND INPUT HANDLING$N============================================================$NThis rung processes received Reset Commands from:$N$N1.  Higher-level strategies via Program Command$N2","TOF(Wrk_HoldT,?,?)","2"
RCOMMENT,"P_Reset:AOI","EnableInFalse","The Hold Timer $Qdone$Q bit comes on immediately and stays on$Nfor the hold time.  If it, or any held-on reset initiator, is TRUE, set the Output.","OTE(Out_Reset)","3"
RCOMMENT,"P_Reset:AOI","EnableInFalse","If an associated object is ready to be reset, set the Inp_Reset pin on this object.$NThen, if something needs reset, and we$'re not already resetting it, enable this$Nobject$'s Reset Pushbutton.$N$N(If this function is not wired, the button will generally be enabled.$NIf this function IS wired, it is suggested to make the enabled Reset button$NFLASH to alert the operator that a reset is required!)","OTE(Rdy_Reset)","4"
RCOMMENT,"P_Reset:AOI","Logic","============================================================$NP_Reset:  PROCESS -- RESET$N============================================================$NRevision 0.6-01 FOR TEST:  2009-03-16, DER$NAligned name, description and local STRING values, sizes, a","OTE(Sts_Err)","0"
RCOMMENT,"P_Reset:AOI","Logic","============================================================$NCOMMAND AND INPUT HANDLING$N============================================================$NThis rung processes received Reset Commands from:$N$N1.  Higher-level strategies via Program Command$N2","TOF(Wrk_HoldT,?,?)","1"
RCOMMENT,"P_Reset:AOI","Logic","The Hold Timer $Qdone$Q bit comes on immediately and stays on$Nfor the hold time.  If it, or any held-on reset initiator, is TRUE, set the Output.","OTE(Out_Reset)","2"
RCOMMENT,"P_Reset:AOI","Logic","If an associated object is ready to be reset, set the Inp_Reset pin on this object.$NThen, if something needs reset, and we$'re not already resetting it, enable this$Nobject$'s Reset Pushbutton.$N$N(If this function is not wired, the button will generally be enabled.$NIf this function IS wired, it is suggested to make the enabled Reset button$NFLASH to alert the operator that a reset is required!)","OTE(Rdy_Reset)","3"
RCOMMENT,"P_Reset:AOI","Prescan","============================================================$NPRESCAN (POWERUP) HANDLING$N============================================================$NOn Prescan, clear any $Qlurking$Q Commands.","OTU(PCmd_Reset)","0"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"P_ResInh:AOI","EnableInFalse","============================================================$NP_ResInh:  RESTART INHIBIT EnableIn False Handling$N============================================================$NTreat EnableIn False (False Rung) as if$N Inp_Starting = 0, Inp_Running = 0 and","MOV(3,Wrk_State)","0"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","===========================================================================$NCONFIGURATION$N===========================================================================$N$NThis rung gets Configuration data.  Timer Configurations are scaled from seconds to$Nmilliseconds and stored in the appropriate timer presets.$NIf a calculated timer preset is negative, it will fault the controller;$Noverwrite it and flag the configuration as bad.","MOV(Wrk_FirstColdStartT.PRE,Wrk_SecondColdStartT.PRE)","1"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","====================================================================================$NRESTART INHIBIT STATE MACHINE$N====================================================================================$N$NThe following code implements the State Machine lo","JMP(S12)","2"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S01:  COLD MOTOR READY TO START  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the motor is cold, but ready to start.  $NThe time since the last cold start attempt is accumulated.$N$NWhen the motor is started:$NIf it has been at least LastColdStart minutes since the last attempt was made to start the motor, $Nthe motor is still considered cold, it has had enough time to cool off.  $NIf it has been less than LastColdStart minutes since the last attempt was made to start the motor, $Nthe motor is considered hot due to multiple re-starts in too short a time period.","OTL(Wrk_Ready)","3"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S02:  COLD MOTOR STARTING  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, a Cold motor start attempt has been made.$NThe time since the last Cold start attempt is accumulated.   $NThe motor must confirm that it is running within RestartInhibit.Wrk_StartCheckTime minutes.  $NIf it does, the state will change to S3: Cold Motor Running$NIf it does not start properly within the allowable time, the state will change to either S4: 1st Failed Cold Restart, or S5: Subsequent Cold Failed Restart.","OTL(Wrk_Ready)","5"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S03:  COLD MOTOR RUNNING$N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, $NThe time since the last cold start attempt is accumulated.  $NIf the cold motor is turned off, the state will change back to S1: Ready to Start, Cold.","OTL(Wrk_Ready)","8"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S04:  COLD MOTOR FIRST FAILURE TO START  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Cold motor has failed to start for the first time since it was last running properly.$NThe time since the last cold start attempt is accumulated.   $NThe state is changed back to S1: Ready to Start, Cold when RestartInhibit.Wrk_FirstFailCold timer elapses.","SUB(Wrk_FirstFailColdT.PRE,Wrk_FirstFailColdT.ACC,Wrk_mSecUntilReady)","10"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S05:  COLD MOTOR SUBSEQUENT FAILURE TO START  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Cold motor has failed to start at least twice in a row since it was last running properly.$NThe time since the last cold start attempt is accumulated.   $NThe state is changed back to S1: Ready to Start, Cold when RestartInhibit.Wrk_SubsFailCold timer elapses.","SUB(Wrk_SubsFailColdT.PRE,Wrk_SubsFailColdT.ACC,Wrk_mSecUntilReady)","13"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S06:  COLD MOTOR STARTING$N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, a Hot motor start attempt has been made.$NThe motor must confirm that it is running within RestartInhibit.Wrk_StartCheckTime minutes.  $NIf it does, the state will change to S7: Hot Motor Running < 4 Hours.$NIf it does not start properly within the allowable time, the state will change to either S10: 1st Failed Hot Restart, or S11: Subsequent Hot Failed Restart.","OTL(Wrk_Ready)","16"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S07:  HOT MOTOR RUNNING  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Hot motor has been started. $NIf it is stopped before RestartInhibit.Wrk_HotRestartOk elapses,$Nit must wait RestartInhibit.Wrk_RestartHot minutes before it can be restarted  (S08).$NIf it is stopped after RestartInhibit.Wrk_HotRestartOk elapses, it can be restarted immediately (S09).","RTO(Wrk_HotRestartOKT,?,?)","19"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S08:  HOT MOTOR SHORT RUN THEN STOPPED$N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Hot motor has been stopped before RestartInhibit.Wrk_HotRestartOk elapsed.$NIt must wait RestartInhibit.Wrk_RestartHot minutes before it can be restarted  (S12).","SUB(Wrk_RestartHotT.PRE,Wrk_RestartHotT.ACC,Wrk_mSecUntilReady)","21"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S09:  HOT MOTOR LONG RUN COOLED  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Hot motor has been running long enough to have cooled.$NSince it is stopped (EnableIn is false), it can be restarted immediately  (S1).","OTL(Wrk_Ready)","24"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S10:  HOT MOTOR FIRST FAILURE TO START $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Hot motor has failed to start for the first time since it was last running properly.$NThe time since the Hot motor stopped is accumulated.   Once it reaches the First Hot Fail time,$Nit can be restarted  (S12).","SUB(Wrk_FirstFailHotT.PRE,Wrk_FirstFailHotT.ACC,Wrk_mSecUntilReady)","26"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S11:  HOT MOTOR SUBSEQUENT FAILURE TO START$N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Hot motor has failed to start at least twice in a row since it was last running properly.$NThe time since the Hot motor stopped is accumulated.   Once it reaches the Subsequent Hot Fail Time,$Nit can be restarted  (S12).","SUB(Wrk_SubsFailHotT.PRE,Wrk_SubsFailHotT.ACC,Wrk_mSecUntilReady)","29"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S12:  HOT MOTOR READY TO START$N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the motor is Hot, but ready to start.  $NThe time since the Hot motor stopped is accumulated.   $NRestartInhibit.Wrk_LastColdStart is run so it is properly timed out when changing to S1: Ready to Start, Cold.  $NIf 16 hours have elapsed since the Hot motor was running, the state will be changed to S1: Ready to Start, Cold.  $NThis reflects the fact that the motor has had time to cool off.  $NOtherwise, the logic waits for a Start attempt to change the state to S6: Start Check, Hot.","RTO(Wrk_HotToColdT,?,?)","32"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","This is common return point for ALL states when Enable In is FALSE.$N$N====================================================================================$NSTART TIMERS$N====================================================================================$N$NThese two rungs run the cold start timers used in the $QThree Starts$Q logic when NOT in State 1.","TON(Wrk_SecondColdStartT,?,?)","35"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","====================================================================================$NVALUES$N====================================================================================$N$NThis rung makes sure that the RestartInhibit.Wrk_mSecsUntilReady value is","CLR(Wrk_mSecUntilReady)","37"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","This rung takes the time remaining until the motor is ready to start (in milliseconds), converts it$Nto seconds, then reports it in  minutes : seconds format for display on the HMI or LAWSDAC.","MOD(Wrk_SecUntilReady,60,Val_SecToReady)","38"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","Finally, copy out the internal State number so the HMI can display an animated state diagram.","MOV(Wrk_State,Val_State)","39"
RCOMMENT,"P_ResInh:AOI","Logic","============================================================$NP_ResInh:  PROCESS -- RESTART INHIBIT$N============================================================$NRevision 0.12-02 FOR TEST:  2009-03-16, DER$NAligned name, description and local STRING valu","MOV(3,Wrk_State)","0"
RCOMMENT,"P_ResInh:AOI","Logic","===========================================================================$NCONFIGURATION$N===========================================================================$N$NThis rung gets Configuration data.  Timer Configurations are scaled from seconds to$Nmilliseconds and stored in the appropriate timer presets.$NIf a calculated timer preset is negative, it will fault the controller;$Noverwrite it and flag the configuration as bad.","MOV(Wrk_FirstColdStartT.PRE,Wrk_SecondColdStartT.PRE)","1"
RCOMMENT,"P_ResInh:AOI","Logic","====================================================================================$NRESTART INHIBIT STATE MACHINE$N====================================================================================$N$NThe following code implements the State Machine lo","JMP(S12)","2"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S01:  COLD MOTOR READY TO START  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the motor is cold, but ready to start.  $NThe time since the last cold start attempt is accumulated.$N$NWhen the motor is started:$NIf it has been at least LastColdStart minutes since the last attempt was made to start the motor, $Nthe motor is still considered cold, it has had enough time to cool off.  $NIf it has been less than LastColdStart minutes since the last attempt was made to start the motor, $Nthe motor is considered hot due to multiple re-starts in too short a time period.","OTL(Wrk_Ready)","3"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S02:  COLD MOTOR STARTING  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, a Cold motor start attempt has been made.$NThe time since the last Cold start attempt is accumulated.   $NThe motor must confirm that it is running within RestartInhibit.Wrk_StartCheckTime minutes.  $NIf it does, the state will change to S3: Cold Motor Running$NIf it does not start properly within the allowable time, the state will change to either S4: 1st Failed Cold Restart, or S5: Subsequent Cold Failed Restart.","OTL(Wrk_Ready)","9"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S03:  COLD MOTOR RUNNING$N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, $NThe time since the last cold start attempt is accumulated.  $NIf the cold motor is turned off, the state will change back to S1: Ready to Start, Cold.","OTL(Wrk_Ready)","13"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S04:  COLD MOTOR FIRST FAILURE TO START  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Cold motor has failed to start for the first time since it was last running properly.$NThe time since the last cold start attempt is accumulated.   $NThe state is changed back to S1: Ready to Start, Cold when RestartInhibit.Wrk_FirstFailCold timer elapses.","SUB(Wrk_FirstFailColdT.PRE,Wrk_FirstFailColdT.ACC,Wrk_mSecUntilReady)","16"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S05:  COLD MOTOR SUBSEQUENT FAILURE TO START  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Cold motor has failed to start at least twice in a row since it was last running properly.$NThe time since the last cold start attempt is accumulated.   $NThe state is changed back to S1: Ready to Start, Cold when RestartInhibit.Wrk_SubsFailCold timer elapses.","SUB(Wrk_SubsFailColdT.PRE,Wrk_SubsFailColdT.ACC,Wrk_mSecUntilReady)","19"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S06:  HOT MOTOR STARTING$N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, a Hot motor start attempt has been made.$NThe motor must confirm that it is running within RestartInhibit.Wrk_StartCheckTime minutes.  $NIf it does, the state will change to S7: Hot Motor Running < 4 Hours.$NIf it does not start properly within the allowable time, the state will change to either S10: 1st Failed Hot Restart, or S11: Subsequent Hot Failed Restart.","OTL(Wrk_Ready)","22"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S07:  HOT MOTOR RUNNING  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Hot motor has been started. $NIf it is stopped before RestartInhibit.Wrk_HotRestartOk elapses,$Nit must wait RestartInhibit.Wrk_RestartHot minutes before it can be restarted  (S08).$NIf it is stopped after RestartInhibit.Wrk_HotRestartOk elapses, it can be restarted immediately (S09).","RTO(Wrk_HotRestartOKT,?,?)","26"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S08:  HOT MOTOR SHORT RUN THEN STOPPED$N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Hot motor has been stopped before RestartInhibit.Wrk_HotRestartOk elapsed.$NIt must wait RestartInhibit.Wrk_RestartHot minutes before it can be restarted  (S12).","SUB(Wrk_RestartHotT.PRE,Wrk_RestartHotT.ACC,Wrk_mSecUntilReady)","30"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S09:  HOT MOTOR LONG RUN COOLED  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Hot motor has been running long enough to have cooled.$NWhen it is eventually stopped, it can be restarted immediately as a cold motor  (S1).","OTL(Wrk_Ready)","33"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S10:  HOT MOTOR FIRST FAILURE TO START $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Hot motor has failed to start for the first time since it was last running properly.$NThe time since the Hot motor stopped is accumulated.   Once it reaches the First Hot Fail time,$Nit can be restarted  (S12).","SUB(Wrk_FirstFailHotT.PRE,Wrk_FirstFailHotT.ACC,Wrk_mSecUntilReady)","36"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S11:  HOT MOTOR SUBSEQUENT FAILURE TO START$N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Hot motor has failed to start at least twice in a row since it was last running properly.$NThe time since the Hot motor stopped is accumulated.   Once it reaches the Subsequent Hot Fail Time,$Nit can be restarted  (S12).","SUB(Wrk_SubsFailHotT.PRE,Wrk_SubsFailHotT.ACC,Wrk_mSecUntilReady)","39"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S12:  HOT MOTOR READY TO START$N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the motor is Hot, but ready to start.  $NThe time since the Hot motor stopped is accumulated.   $NRestartInhibit.Wrk_LastColdStart is run so it is properly timed out when changing to S1: Ready to Start, Cold.  $NIf 16 hours have elapsed since the Hot motor was running, the state will be changed to S1: Ready to Start, Cold.  $NThis reflects the fact that the motor has had time to cool off.  $NOtherwise, the logic waits for a Start attempt to change the state to S6: Start Check, Hot.","RTO(Wrk_HotToColdT,?,?)","42"
RCOMMENT,"P_ResInh:AOI","Logic","This is common return point for all states except State 1.$N$N====================================================================================$NSTART TIMERS$N====================================================================================$N$NThese two rungs run the cold start timers used in the $QThree Starts$Q logic when NOT in State 1.","TON(Wrk_SecondColdStartT,?,?)","46"
RCOMMENT,"P_ResInh:AOI","Logic","This code is common for ALL states.$N$N====================================================================================$NVALUES$N====================================================================================$N$NThis rung makes sure that the RestartInhibit.Wrk_mSecsUntilReady value is greater than or equal to zero.$NIf it is not, the register value will be cleared.","CLR(Wrk_mSecUntilReady)","48"
RCOMMENT,"P_ResInh:AOI","Logic","This rung takes the time remaining until the motor is ready to start (in milliseconds), converts it$Nto seconds, then reports it in  minutes : seconds format for display on the HMI or LAWSDAC.","MOD(Wrk_SecUntilReady,60,Val_SecToReady)","49"
RCOMMENT,"P_ResInh:AOI","Logic","Finally, copy out the internal State number so the HMI can display an animated state diagram.","MOV(Wrk_State,Val_State)","50"
RCOMMENT,"P_ResInh:AOI","Prescan","============================================================$NPRESCAN / POWERUP$N============================================================$NOn Prescan, the various timers are reset (all are retentive), and the State$NMachine is set to:$N*  State S01  (","MOV(3,Wrk_State)","0"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"P_RunTime:AOI","EnableInFalse","============================================================$NENABLE-IN FALSE HANDLING$N============================================================$NEnableIn False is treated the same as $QMotor Stopped$Q --$NCommands are still processed, $Ntotal run tim","CLR(Wrk_TotTenths)","0"
RCOMMENT,"P_RunTime:AOI","EnableInFalse","PCmd_ClearStarts: Program Command to Clear Count of Starts$NMCmd_ClearStarts: Maintenance Command to Clear Count of Starts","RES(Wrk_Starts)","1"
RCOMMENT,"P_RunTime:AOI","EnableInFalse","PCmd_ClearMaxHrs: Program Command to Clear Maximum Single Run Hours$NMCmd_ClearMaxHrs: Maintenance Command to Clear Maximum Single Run Hours","CLR(Val_MaxRunHrs)","2"
RCOMMENT,"P_RunTime:AOI","EnableInFalse","============================================================$NENABLE-IN FALSE HANDLING$N============================================================$NEnableIn False is treated the same as $QMotor Stopped$Q --$NTotal run time is held (RTO), the Starts coun","TON(Wrk_CurRunT,?,?)","3"
RCOMMENT,"P_RunTime:AOI","EnableInFalse","============================================================$NREPORT VALUES$N============================================================$N$NThe number of starts is directly reported as an integer Value.","MOV(Wrk_Starts.ACC,Val_Starts)","4"
RCOMMENT,"P_RunTime:AOI","EnableInFalse","The current hours working register is cleared, but the Value is left$Nin place for display until the next run begins.$N$NNOTE: The Maximum Run Hours (high-water of Current Run Hours)$Nis also left in place.","CLR(Wrk_CurHours)","5"
RCOMMENT,"P_RunTime:AOI","EnableInFalse","The Total Running Time is reported as a REAL number of Hours.$N(This will always be in $Qcompleted tenths$Q of an hour, like a mechanical hours counter.)","MUL(Wrk_TotTenths,0.1,Val_TotRunHrs)","6"
RCOMMENT,"P_RunTime:AOI","Logic","============================================================$NP_RunTime:  PROCESS -- RUN TIME AND STARTS$N============================================================$NRevision 0.7-04 FOR TEST:  2009-03-16, DER$NAligned name, description and local STRING","CLR(Wrk_TotTenths)","0"
RCOMMENT,"P_RunTime:AOI","Logic","PCmd_ClearStarts: Program Command to Clear Count of Starts$NMCmd_ClearStarts: Maintenance Command to Clear Count of Starts","RES(Wrk_Starts)","1"
RCOMMENT,"P_RunTime:AOI","Logic","PCmd_ClearMaxHrs: Program Command to Clear Maximum Single Run Hours$NMCmd_ClearMaxHrs: Maintenance Command to Clear Maximum Single Run Hours","CLR(Wrk_MaxHours)","2"
RCOMMENT,"P_RunTime:AOI","Logic","Clear current run hours if stopped.$NNOTE: Val_CurHours is maintained for display!","CLR(Wrk_CurHours)","3"
RCOMMENT,"P_RunTime:AOI","Logic","============================================================$NACCUMULATE TIMES / STARTS$N============================================================$NThis rung runs the Total (retentive) and Maximum (non-retentive) Run Time$Ntimers and increments the Num","TON(Wrk_CurRunT,?,?)","4"
RCOMMENT,"P_RunTime:AOI","Logic","Note that an RTO timer can only time up to 2G milliseconds, about 28 days.$NA pump will accumulate much more run time.  So the RTO is used to time 1/10 hour,$Nwhich is then added to a count of $QTenths of Hours$Q.  Then the RTO accumulator is reduced by 1/10 hour.$N(The timer doesn$'t lose time because it is not reset and keeps running.)","SUB(Wrk_TotRunT.ACC,360000,Wrk_TotRunT.ACC)","5"
RCOMMENT,"P_RunTime:AOI","Logic","The Maximum Run Time TON is treated the same way.  A motor/device$Ncould potentially run continuously for more than 28 days, so an integer count$Nof (up to 2 billion) hours (almost 245,000 years!) is used.  Should be enough...","SUB(Wrk_CurRunT.ACC,3600000,Wrk_CurRunT.ACC)","6"
RCOMMENT,"P_RunTime:AOI","Logic","============================================================$NREPORT VALUES$N============================================================$N$NThe number of starts is directly reported as an integer Value.","MOV(Wrk_Starts.ACC,Val_Starts)","7"
RCOMMENT,"P_RunTime:AOI","Logic","The Current (continuous) Run Time is reported as a REAL number of Hours.$NThis number includes all fractional hours (timer accumulator / 3,600,000 ms/hr),$Nnot just completed tenths like the total run time below.","CPT(Val_CurRunHrs,Wrk_CurHours+(Wrk_CurRunT.ACC/3600000.0))","8"
RCOMMENT,"P_RunTime:AOI","Logic","If the Current Run Time exceeds the stored Maximum Run Time,$Nupdate the Maximum.$NRegardless, report the Maximum Run Time.$N$NNOTE:  The Wrk_MaxHours register is required to prevent writes to Val_MaxHours$Nfrom improperly overwriting this object$'s state.$N","MOV(Wrk_MaxHours,Val_MaxRunHrs)","9"
RCOMMENT,"P_RunTime:AOI","Logic","The Total Running Time is reported as a REAL number of Hours.$N(This will always be in $Qcompleted tenths$Q of an hour, like a mechanical hours counter.)","MUL(Wrk_TotTenths,0.1,Val_TotRunHrs)","10"
RCOMMENT,"P_RunTime:AOI","Prescan","============================================================$NPOWERUP / PRESCAN HANDLING$N============================================================$NTotal run time, Maximum run time and starts count are retained through$Na power cycle.  Current run tim","CLR(Wrk_CurHours)","0"
RCOMMENT,"P_RunTime:AOI","Prescan","On Prescan, clear any $Qlurking$Q Commands.","OTU(PCmd_ClearStarts)","1"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"U_AnalogTripReset:AOI","Logic","===============================================================$NPUMP AUTOMATIC LOGIC$N===============================================================$NThe pumps sequence On and Off based on the level in the wet well. When the wet well level is greater th","NOP()","0"
RCOMMENT,"U_AnalogTripReset:AOI","Logic","Analog Bad","OTE(Sts_AnalogBad)","1"
RCOMMENT,"U_AnalogTripReset:AOI","Logic","Position Trip","TON(PosTripTimer,?,?)","2"
RCOMMENT,"U_AnalogTripReset:AOI","Logic","Position Reset","TON(PosResetTimer,?,?)","3"
RCOMMENT,"U_AnalogTripReset:AOI","Logic","On / Off Status","OTE(Sts_On)","4"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"U_CommFail:AOI","Logic","Timer Map","MUL(CFG_DelayTimerSec,1000,HeartBeatDelayTimerOff.PRE)","0"
RCOMMENT,"U_CommFail:AOI","Logic","Heartbeat","TON(HeartBeatDelayTimerOff,?,?)","1"
RCOMMENT,"U_CommFail:AOI","Logic","Alarm","OTE(Sts_CommFail)","2"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NMOTOR AVAILABLE $N===============================================================$NTakes motor demand and and runs the motor in the corresponding position. If motor not available, next motor in position will be called in an order rotation.  Each motor can be assigned a position via the start order method. Each Motor Start and Stop is interlocked for a configurable time period.  An AOI can be mapped to the Pset start order.    Configurable up to 6 motors.  $N","NOP()","0"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NTOTAL MOTORS RUNNING$N===============================================================$N","MOV(TempTotalMotorsRunning,Sts_TotalMotorsRunning)","1"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NTOTAL MOTORS DEMAND$N===============================================================$N","MOV(TempTotalMotorsDemand,Sts_TotalMotorsDemand)","2"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NALL MOTORS OFF$N===============================================================$N","OTE(AllMotorsOff)","3"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NALL MOTORS OFF INHIBIT$N===============================================================$NIf Start Order is Enabled once, then inhibit all motors off from setting motor start order","TON(AllMotorsOffInhibitTimer,?,?)","4"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NSTART ORDER METHOD CHANGE$N===============================================================$NPlace after START ORDER METHOD CHANGE rung in order to give a chance for outside AOI instruction to update.","MOV(OSet_StartOrderMethod,StartOrderMethodLast)","5"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NSTART ORDER CHANGE$N===============================================================$NAllow motor start order change if pumps are off or the Operator force button is pressed","OTE(Sts_AllowStartOrderChange)","6"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NMOTOR START CALL$N===============================================================$N","OTE(Sts_StartMotorCall)","7"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NMOTOR STOP CALL$N===============================================================$N","OTE(Sts_StopMotorCall)","8"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NMOTOR DEMAND MET$N===============================================================$N","OTE(Sts_MotorDemandMet)","9"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NSTART MOTOR DELAY$N===============================================================$N","TON(StartMotorDelayTimer,?,?)","10"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NSTOP MOTOR DELAY$N===============================================================","TON(StopMotorDelayTimer,?,?)","11"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NMOTOR POSITION CALL$N===============================================================$NOn First Scan reset value$NIncrement Motor Position on Start Call$NDecrement Motor Position on Stop Call","MOV(0,Val_MotorPosCall)","12"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NMOTOR 1$N===============================================================","NOP()","16"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NSTART ORDER$N===============================================================$NStart Order Method  = 0 (operator fix position)$NStart Order Method >= 1 (PSet (Set outside block)","MOV(PSet_Motor1StartOrder,Val_Motor1StartOrderNext)","17"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NSTART REQUEST$N===============================================================$Nif Demand  = to start order then request motor start","OTE(Out_Motor1Start)","19"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NSTOP REQUEST$N===============================================================$N","OTE(Out_Motor1Stop)","20"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NMOTOR 2$N===============================================================","NOP()","21"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NSTART ORDER$N===============================================================$NStart Order Method  = 0 (operator fix position)$NStart Order Method >= 1 (PSet (Set outside block)","MOV(PSet_Motor2StartOrder,Val_Motor2StartOrderNext)","22"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NSTART REQUEST$N===============================================================$Nif Demand is  = to start order then request motor start","OTE(Out_Motor2Start)","24"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NSTOP REQUEST$N===============================================================$N","OTE(Out_Motor2Stop)","25"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NMOTOR 3$N===============================================================","NOP()","26"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NSTART ORDER$N===============================================================$NStart Order Method  = 0 (operator fix position)$NStart Order Method >= 1 (PSet (Set outside block)","MOV(PSet_Motor3StartOrder,Val_Motor3StartOrderNext)","27"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NSTART REQUEST$N===============================================================$Nif Demand is = to start order then request motor start","OTE(Out_Motor3Start)","29"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NSTOP REQUEST$N===============================================================$N","OTE(Out_Motor3Stop)","30"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NMOTOR 4$N===============================================================","NOP()","31"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NSTART ORDER$N===============================================================$NStart Order Method  = 0 (operator fix position)$NStart Order Method >= 1 (PSet (Set outside block)","MOV(PSet_Motor4StartOrder,Val_Motor4StartOrderNext)","32"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NSTART REQUEST$N===============================================================$Nif Demand is = to start order then request motor start","OTE(Out_Motor4Start)","34"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NSTOP REQUEST$N===============================================================$N","OTE(Out_Motor4Stop)","35"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NMOTOR 5$N===============================================================","NOP()","36"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NSTART ORDER$N===============================================================$NStart Order Method  = 0 (operator fix position)$NStart Order Method >= 1 (PSet (Set outside block)","MOV(PSet_Motor5StartOrder,Val_Motor5StartOrderNext)","37"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NSTART REQUEST$N===============================================================$Nif Demand is = to start order then request motor start","OTE(Out_Motor5Start)","39"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NSTOP REQUEST$N===============================================================$N","OTE(Out_Motor5Stop)","40"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NMOTOR 6$N===============================================================","NOP()","41"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NSTART ORDER$N===============================================================$NStart Order Method  = 0 (operator fix position)$NStart Order Method >= 1 (PSet (Set outside block)","MOV(PSet_Motor6StartOrder,Val_Motor6StartOrderNext)","42"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NSTART REQUEST$N===============================================================$Nif Demand is = to start order then request motor start","OTE(Out_Motor6Start)","44"
RCOMMENT,"U_MotorAvailable:AOI","Logic","===============================================================$NSTOP REQUEST$N===============================================================$N","OTE(Out_Motor6Stop)","45"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"U_MotorDemand:AOI","Logic","===============================================================$NMOTOR DEMAND$N===============================================================$NAnalog input determines motor demand.  The logic uses trip & reset operator setpoints.  The logic can be config","NOP()","0"
RCOMMENT,"U_MotorDemand:AOI","Logic","Analog Bad","OTE(Sts_AnalogBad)","1"
RCOMMENT,"U_MotorDemand:AOI","Logic","Analog Value","MOV(Inp_Analog.Val,Val_Analog)","2"
RCOMMENT,"U_MotorDemand:AOI","Logic","Zero Out Motor Demand","MOV(0,TempMotorDemand)","3"
RCOMMENT,"U_MotorDemand:AOI","Logic","Demand 1","ADD(1,TempMotorDemand,TempMotorDemand)","4"
RCOMMENT,"U_MotorDemand:AOI","Logic","Demand 2","ADD(1,TempMotorDemand,TempMotorDemand)","5"
RCOMMENT,"U_MotorDemand:AOI","Logic","Demand 3","ADD(1,TempMotorDemand,TempMotorDemand)","6"
RCOMMENT,"U_MotorDemand:AOI","Logic","Demand 4","ADD(1,TempMotorDemand,TempMotorDemand)","7"
RCOMMENT,"U_MotorDemand:AOI","Logic","Demand 5","ADD(1,TempMotorDemand,TempMotorDemand)","8"
RCOMMENT,"U_MotorDemand:AOI","Logic","Demand 6","ADD(1,TempMotorDemand,TempMotorDemand)","9"
RCOMMENT,"U_MotorDemand:AOI","Logic","Status Motor Demand","MOV(TempMotorDemand,Out_MotorDemand)","10"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"U_MotorStartOrderRotation:AOI","Logic","===============================================================$NMOTOR START ORDER ROTATION METHOD$N===============================================================$NDetermines Start Order of motors based on Rotation.  Motors are rotated to thier next avai","NOP()","0"
RCOMMENT,"U_MotorStartOrderRotation:AOI","Logic","===============================================================$NMOTOR ROTATION SELECTED$N===============================================================","MOV(Inp_Motor6StartOrderFdbk,Val_Motor6StartOrder)","1"
RCOMMENT,"U_MotorStartOrderRotation:AOI","Logic","===============================================================$NROTATION ENABLED$N===============================================================$Nenable the rotation calculation only once.","OTE(RotateMotors)","2"
RCOMMENT,"U_MotorStartOrderRotation:AOI","Logic","Jump to end of routine if rotate not enabled","JMP(SkipRotate)","3"
RCOMMENT,"U_MotorStartOrderRotation:AOI","Logic","===============================================================$NMOTOR 1 ROTATION CALC$N===============================================================$NRotate motor to next position","MOV(1,TempMotorStartOrder[1])","4"
RCOMMENT,"U_MotorStartOrderRotation:AOI","Logic","===============================================================$NMOTOR 2 ROTATION CALC$N===============================================================$NRotate motor to next position","MOV(1,TempMotorStartOrder[2])","5"
RCOMMENT,"U_MotorStartOrderRotation:AOI","Logic","===============================================================$NMOTOR 3 ROTATION CALC$N===============================================================$NRotate motor to next position","MOV(1,TempMotorStartOrder[3])","6"
RCOMMENT,"U_MotorStartOrderRotation:AOI","Logic","===============================================================$NMOTOR 4 ROTATION CALC$N===============================================================$NRotate motor to next position","MOV(1,TempMotorStartOrder[4])","7"
RCOMMENT,"U_MotorStartOrderRotation:AOI","Logic","===============================================================$NMOTOR 5 ROTATION CALC$N===============================================================$NRotate motor to next position","MOV(1,TempMotorStartOrder[5])","8"
RCOMMENT,"U_MotorStartOrderRotation:AOI","Logic","===============================================================$NMOTOR 6 ROTATION CALC$N===============================================================$NRotate motor to next position","MOV(1,TempMotorStartOrder[6])","9"
RCOMMENT,"U_MotorStartOrderRotation:AOI","Logic","===============================================================$NOUTPUT$N===============================================================$NMove Temporary Start Order to Output","MOV(TempMotorStartOrder[6],Val_Motor6StartOrder)","10"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"U_WallClock:AOI","Logic","============================================================$NU_WallClock:  CONTROLLER CLOCK HANDLER$N============================================================$NModified 2009-03-24, DER$NSimplified Day of Week calculation, removed unused parameters$N==","MOV(0,Wrk_SetDateTime[6])","0"
RCOMMENT,"U_WallClock:AOI","Logic","**TetraTech**$Nuse local since date time already has time zone info","SSV(WALLCLOCKTIME,,LocalDateTime,Wrk_SetDateTime[0])","1"
RCOMMENT,"U_WallClock:AOI","Logic","============================================================$NGET CURRENT DATE / TIME$N============================================================$N$NGet the Controller$'s real time clock broken down by Year, month, day...seconds$Nand store in a tag so t","MOV(Wrk_GetDateTime[5],Val_CurrentSecond)","2"
RCOMMENT,"U_WallClock:AOI","Logic","============================================================$NCALCULATE THE DAY OF THE WEEK$N============================================================$NThis version of the day of the week is based on:$N$Nhttp://alcor.concordia.ca/~gpkatch/gdate-algorit","CPT(Wrk_G,Wrk_GetDateTime[0]-(Wrk_F/10))","3"
RCOMMENT,"U_WallClock:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NThis rung calculates the remainder of the algorithm.$N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NThe $QDay Number$Q is calculated, and the MOD 7$N(remainder after division by 7) is stored as the Day of the Week.$N$NNOTE:  The $Q+2$Q offset aligns Val_DayOfWeek as:$N0=Sun, 1=Mon, 2=Tue, 3=Wed, 4=Thu, 5=Fri, 6=Sat","CPT(Val_DayOfWeek,(365*Wrk_G+(Wrk_G/4)-(Wrk_G/100)+(Wrk_G/400)+((Wrk_F*306+5)/10)+Wrk_GetDateTime[2]+2)MOD 7)","4"
RCOMMENT,"U_WallClock:AOI","Logic","============================================================$NRESET PULSE OUTPUTS$N============================================================$N$NThese rungs generate one-shot outputs once hourly, daily, monthly and yearly.","OTE(Sts_HourlyReset)","5"
