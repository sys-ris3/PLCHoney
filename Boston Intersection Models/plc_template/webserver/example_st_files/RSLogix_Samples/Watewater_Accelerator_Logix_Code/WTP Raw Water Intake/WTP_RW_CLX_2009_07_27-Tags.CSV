remark,"CSV-Import-Export"
remark,"Date = Mon Jul 13 08:13:24 2020"
remark,"Version = RSLogix 5000 v20.05"
remark,"Owner = "
remark,"Company = Microsoft"
0.3
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,,Local:2:C,"","AB:1756_DI:C:0","","(ExternalAccess := Read/Write)"
TAG,,Local:2:I,"","AB:1756_DI:I:0","","(ExternalAccess := Read/Write)"
COMMENT,,Local:2:I,"Level Switch $Nlow$NIO Fault",,"Local:2:I.FAULT.0"
COMMENT,,Local:2:I,"Level Switch $NHigh$NIO Fault",,"Local:2:I.FAULT.1"
COMMENT,,Local:2:I,"Level Switch $NHigh-High$NIO Fault",,"Local:2:I.FAULT.2"
COMMENT,,Local:2:I,"Bar Screen #1 $NIn-Auto$NIO Fault",,"Local:2:I.FAULT.3"
COMMENT,,Local:2:I,"Bar Screen #1 $NRunning$NIO Fault",,"Local:2:I.FAULT.4"
COMMENT,,Local:2:I,"Bar Screen #2 $NIn-Auto$NIO Fault",,"Local:2:I.FAULT.5"
COMMENT,,Local:2:I,"Bar Screen #1 $NRunning$NIO Fault",,"Local:2:I.FAULT.6"
COMMENT,,Local:2:I,"Grit Tank #1 In-Auto$NIO Fault",,"Local:2:I.FAULT.7"
COMMENT,,Local:2:I,"Grit Tank #1$NRunning$NIO Fault",,"Local:2:I.FAULT.8"
COMMENT,,Local:2:I,"Level Switch $NLow",,"Local:2:I.DATA.0"
COMMENT,,Local:2:I,"Level Switch $NHigh",,"Local:2:I.DATA.1"
COMMENT,,Local:2:I,"Level Switch $NHigh-High",,"Local:2:I.DATA.2"
COMMENT,,Local:2:I,"Bar Screen #1 $NIn-Auto",,"Local:2:I.DATA.3"
COMMENT,,Local:2:I,"Bar Screen #1 $NRunning",,"Local:2:I.DATA.4"
COMMENT,,Local:2:I,"Bar Screen #2 $NIn-Auto",,"Local:2:I.DATA.5"
COMMENT,,Local:2:I,"Bar Screen #2$NRunning",,"Local:2:I.DATA.6"
COMMENT,,Local:2:I,"Grit Tank #1 In-Auto",,"Local:2:I.DATA.7"
COMMENT,,Local:2:I,"Grit Tank #1$NRunning",,"Local:2:I.DATA.8"
TAG,,Local:3:C,"","AB:1756_DO:C:0","","(ExternalAccess := Read/Write)"
TAG,,Local:3:I,"","AB:1756_DO:I:0","","(ExternalAccess := Read/Write)"
TAG,,Local:3:O,"","AB:1756_DO:O:0","","(ExternalAccess := Read/Write)"
COMMENT,,Local:3:O,"Bar Screen #1$NStart/Stop",,"Local:3:O.DATA.0"
COMMENT,,Local:3:O,"Bar Screen #2$NStart/Stop",,"Local:3:O.DATA.1"
COMMENT,,Local:3:O,"Grit Tank #1$NStart/Stop",,"Local:3:O.DATA.2"
TAG,,Local:4:C,"","AB:1756_IF4_Float:C:0","","(ExternalAccess := Read/Write)"
TAG,,Local:4:I,"","AB:1756_IF4_Float:I:0","","(ExternalAccess := Read/Write)"
COMMENT,,Local:4:I,"Influent Well $NLevel Indication$N0 - 40 Ft$NIO Fault",,"Local:4:I.CH0FAULT"
COMMENT,,Local:4:I,"Bar Screen #1$NScreen Monitoring$N0-24 inches$NIO Fault",,"Local:4:I.CH1FAULT"
COMMENT,,Local:4:I,"Bar Screen #2$NScreen Monitoring$N0-24 inches$NIO Fault",,"Local:4:I.CH2FAULT"
COMMENT,,Local:4:I,"Grit Tank #1$NFlow$N0-20 MGD$NIO Fault",,"Local:4:I.CH3FAULT"
COMMENT,,Local:4:I,"Influent Well $NLevel Indication (LIT-1103)$N0 - 40 Ft",,"Local:4:I.CH0DATA"
COMMENT,,Local:4:I,"Bar Screen #1$NScreen Monitoring (DPIT-110)$N0-24 inches",,"Local:4:I.CH1DATA"
COMMENT,,Local:4:I,"Bar Screen #2$NScreen Monitoring (DPIT-1111)$N0-24 inches",,"Local:4:I.CH2DATA"
COMMENT,,Local:4:I,"Grit Tank #1$NFlow (FIT-1112)$N0-20 MGD",,"Local:4:I.CH3DATA"
TAG,,Local:5:C,"","AB:1756_IF4_Float:C:0","","(ExternalAccess := Read/Write)"
TAG,,Local:5:I,"","AB:1756_IF4_Float:I:0","","(ExternalAccess := Read/Write)"
TAG,,BarScrn01_DiffLv_Ain,"Raw Water Bar Screen #1 Differential Pressure Level (DPIT-1110)","P_AIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,BarScrn01_Intlk,"Raw Water Bar Screen #1 (M-210)$NInterlocks","P_Intlk","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,BarScrn01_Motor,"Raw Water Bar Screen #1 (M-210)$NMotor","P_Motor","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,BarScrn01_Perm,"Raw Water Bar Screen #1 (M-210)$NPermissives","P_Perm","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,BarScrn01_RCT,"Raw Water Bar Screen #1 (M-210)$NRepeat Cycle Timer","U_RepeatCycTmr","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,BarScrn01_Reset,"Raw Water Bar Screen #1 (M-210)$NReset","P_Reset","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,BarScrn01_ResInh,"Raw Water Bar Screen #1 (M-210)$NRestart Inhibit","P_ResInh","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,BarScrn01_RunTime,"Raw Water Bar Screen #1 (M-210)$NRun Time and Starts","P_RunTime","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,BarScrn02_DiffLv_AIn,"Raw Water Bar Screen #2 Differential Pressure Level (DPIT-1111)","P_AIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,BarScrn02_Intlk,"Raw Water Bar Screen #2 (M-211)$NInterlocks","P_Intlk","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,BarScrn02_Motor,"Raw Water Bar Screen #2 (M-211)$NMotor","P_Motor","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,BarScrn02_Perm,"Raw Water Bar Screen #2 (M-211)$NPermissives","P_Perm","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,BarScrn02_RCT,"Raw Water Bar Screen #2 (M-211)$NRepeat Cycle Timer","U_RepeatCycTmr","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,BarScrn02_Reset,"Raw Water Bar Screen #2 (M-211)$NReset","P_Reset","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,BarScrn02_ResInh,"Raw Water Bar Screen #2 (M-211)$NRestart Inhibit","P_ResInh","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,BarScrn02_RunTime,"Raw Water Bar Screen #2 (M-211)$NRun Time & Starts","P_RunTime","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,GritTk01Drv_Intlk,"Raw Water Grit Tank #1 (M-213)$NInterlocks","P_Intlk","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,GritTk01Drv_Motor,"Raw Water Grit Tank #1 (M-213)$NMotor","P_Motor","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,GritTk01Drv_Perm,"Raw Water Grit Tank #1 (M-213)$NPermissives","P_Perm","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,GritTk01Drv_RCT,"Raw Water Grit Tank #1 (M-213)$NRepeat Cycle Timer","U_RepeatCycTmr","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,GritTk01Drv_Reset,"Raw Water Grit Tank #1 (M-213)$NReset","P_Reset","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,GritTk01Drv_ResInh,"Raw Water Grit Tank #1 (M-213)$NRestart Inhibit","P_ResInh","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,GritTk01Drv_RunTime,"Raw Water Grit Tank #1 (M-213)$NRuntime & Starts","P_RunTime","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,GritTk01Flow_AIn,"Raw Water Grit Tank #1 Flow  (FIT-1112)$NTotalizer","P_AIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,GritTk01Flow_Tot,"Raw Water Grit Tank #1 Flow  (FIT-1112)","U_FlowTot","","(Constant := false, ExternalAccess := Read/Write)"
ALIAS,,I_BarScrn01_DiffLv,"","","Local:4:I.CH1DATA","(RADIX := Float, ExternalAccess := Read/Write)"
ALIAS,,I_BarScrn01_DiffLv_IOFault,"","","Local:4:I.CH1Fault","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_BarScrn01_inAuto,"","","Local:2:I.DATA.3","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_BarScrn01_inAuto_IOFault,"","","Local:2:I.Fault.3","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_BarScrn01_RunFdbk,"","","Local:2:I.DATA.4","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_BarScrn01_RunFdbk_IOFault,"","","Local:2:I.Fault.4","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_BarScrn02_DiffLv,"","","Local:4:I.CH2DATA","(RADIX := Float, ExternalAccess := Read/Write)"
ALIAS,,I_BarScrn02_DiffLv_IOFault,"","","Local:4:I.CH2Fault","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_BarScrn02_inAuto,"","","Local:2:I.DATA.5","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_BarScrn02_inAuto_IOFault,"","","Local:2:I.Fault.5","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_BarScrn02_RunFdbk,"","","Local:2:I.DATA.6","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_BarScrn02_RunFdbk_IOFault,"","","Local:2:I.Fault.6","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_GritTk01Drv_InAuto,"","","Local:2:I.DATA.7","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_GritTk01Drv_InAuto_IOFault,"","","Local:2:I.Fault.7","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_GritTk01Drv_RunFdbk,"","","Local:2:I.DATA.8","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_GritTk01Drv_RunFdbk_IOFault,"","","Local:2:I.Fault.8","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_GritTk01_Flow,"","","Local:4:I.CH3DATA","(RADIX := Float, ExternalAccess := Read/Write)"
ALIAS,,I_GritTk01_Flow_IOFault,"","","Local:4:I.CH3Fault","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_RW_WW_Lv,"","","Local:4:I.CH0DATA","(RADIX := Float, ExternalAccess := Read/Write)"
ALIAS,,I_RW_WW_LvSw_Hi,"","","Local:2:I.DATA.1","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_RW_WW_LvSw_HiHi,"","","Local:2:I.DATA.2","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_RW_WW_LvSw_HiHi_IOFault,"","","Local:2:I.Fault.2","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_RW_WW_LvSw_Hi_IOFault,"","","Local:2:I.Fault.1","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_RW_WW_LvSw_Lo,"","","Local:2:I.DATA.0","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_RW_WW_LvSw_Lo_IOFault,"","","Local:2:I.Fault.0","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,I_RW_WW_Lv_IOFault,"","","Local:4:I.CH0Fault","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,O_BarScrn01_Out_Run,"","","Local:3:O.DATA.0","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,O_BarScrn02_Out_Run,"","","Local:3:O.DATA.1","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,,O_GritTk01Drv_Out_Run,"","","Local:3:O.DATA.2","(RADIX := Decimal, ExternalAccess := Read/Write)"
TAG,,PLC_CommFail,"","U_CommFail","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,PLC_Device_ResetPB,"Site Wide Device Reset Push Button","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,PLC_Heartbeat,"PLC Heartbeat","U_Heartbeat","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,PLC_Simulation,"Application running IN SIMULATION","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,PLC_WallClock,"Wall Clock","U_WallClock","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,RW_WW_LvSw_Hi,"Raw Water Wetwell Level Switch $NHigh","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,RW_WW_LvSw_HiHi,"Raw Water Wetwell Level Switch $NHigh-High","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,RW_WW_LvSw_Lo,"Raw Water Wetwell Level Switch $NLow","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,RW_WW_Lv_Ain,"Raw Water Wetwell Level (LIT-203)","P_AIn","","(Constant := false, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
ALIAS,BarScreen01,Equip_DiffLv,"","","BarScrn01_DiffLv_Ain","(ExternalAccess := Read/Write)"
ALIAS,BarScreen01,Equip_GroupReset,"","","PLC_Device_ResetPB","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,BarScreen01,Equip_InAuto,"","","I_BarScrn01_inAuto","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,BarScreen01,Equip_InAuto_IOFault,"","","I_BarScrn01_inAuto_IOFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,BarScreen01,Equip_Intlk,"","","BarScrn01_Intlk","(ExternalAccess := Read/Write)"
TAG,BarScreen01,Equip_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
ALIAS,BarScreen01,Equip_Motor,"","","BarScrn01_Motor","(ExternalAccess := Read/Write)"
ALIAS,BarScreen01,Equip_Out_Run,"","","O_BarScrn01_Out_Run","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,BarScreen01,Equip_RCT,"","","BarScrn01_RCT","(ExternalAccess := Read/Write)"
ALIAS,BarScreen01,Equip_RunFdbk,"","","I_BarScrn01_RunFdbk","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,BarScreen01,Equip_RunFdbk_IOFault,"","","I_BarScrn01_RunFdbk_IOFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
TAG,BarScreen01,Wrk_Hand,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,BarScreen01,Wrk_ResetReqd,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,BarScreen01,Wrk_ResetRequired,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
ALIAS,BarScreen02,Equip_DiffLv,"","","BarScrn02_DiffLv_AIn","(ExternalAccess := Read/Write)"
ALIAS,BarScreen02,Equip_GroupReset,"","","PLC_Device_ResetPB","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,BarScreen02,Equip_InAuto,"","","I_BarScrn02_inAuto","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,BarScreen02,Equip_InAuto_IOFault,"","","I_BarScrn02_inAuto_IOFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,BarScreen02,Equip_Intlk,"","","BarScrn02_Intlk","(ExternalAccess := Read/Write)"
TAG,BarScreen02,Equip_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
ALIAS,BarScreen02,Equip_Motor,"","","BarScrn02_Motor","(ExternalAccess := Read/Write)"
ALIAS,BarScreen02,Equip_Out_Run,"","","O_BarScrn02_Out_Run","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,BarScreen02,Equip_RCT,"","","BarScrn02_RCT","(ExternalAccess := Read/Write)"
ALIAS,BarScreen02,Equip_RunFdbk,"","","I_BarScrn02_RunFdbk","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,BarScreen02,Equip_RunFdbk_IOFault,"","","I_BarScrn02_RunFdbk_IOFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
TAG,BarScreen02,Wrk_Hand,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,BarScreen02,Wrk_ResetReqd,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,BarScreen02,Wrk_ResetRequired,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
ALIAS,GritTank01,Equip_GroupReset,"","","PLC_Device_ResetPB","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,GritTank01,Equip_InAuto,"","","I_GritTk01Drv_InAuto","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,GritTank01,Equip_InAuto_IOFault,"","","I_GritTk01Drv_InAuto_IOFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,GritTank01,Equip_Intlk,"","","GritTk01Drv_Intlk","(ExternalAccess := Read/Write)"
TAG,GritTank01,Equip_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
ALIAS,GritTank01,Equip_Motor,"","","GritTk01Drv_Motor","(ExternalAccess := Read/Write)"
ALIAS,GritTank01,Equip_Out_Run,"","","O_GritTk01Drv_Out_Run","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,GritTank01,Equip_RCT,"","","GritTk01Drv_RCT","(ExternalAccess := Read/Write)"
ALIAS,GritTank01,Equip_RunFdbk,"","","I_GritTk01Drv_RunFdbk","(RADIX := Decimal, ExternalAccess := Read/Write)"
ALIAS,GritTank01,Equip_RunFdbk_IOFault,"","","I_GritTk01Drv_RunFdbk_IOFault","(RADIX := Decimal, ExternalAccess := Read/Write)"
TAG,GritTank01,Wrk_Hand,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,GritTank01,Wrk_ResetReqd,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,GritTank01,Wrk_ResetRequired,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,Wetwell,P_AIn_01,"","P_AIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Wetwell,P_Alarm_01,"","P_Alarm","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Wetwell,P_DIn_01,"","P_DIn","","(Constant := false, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_AIn:AOI,Inp_PV,"Input Signal (process variable) from Sensor","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_AIn:AOI,Inp_PVBad,"1=PV or I/O Comms Status Bad, 0=OK","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Inp_PVUncertain,"1=PV Value Not Reliable, 0=OK","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Inp_Sim,"1=Use simulated PV (Set_SimPV); 0=Use Input (Inp_PV)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Inp_Reset,"1=Reset all Alarms requiring reset","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_NoSubstPV,"1=Disallow selection of Substitute PV","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_SetTrack,"1=PSets track OSets in Oper, OSets track PSets in Prog, 0=no tracking","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_PCmdClear,"1=Clear Program Commands on receipt$N0=Leave Set","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HasHiHiAlm,"1=High-High Alarm exists and will be checked","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HasHiAlm,"1=High Alarm exists and will be checked","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HasLoAlm,"1=Low Alarm exists and will be checked","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HasLoLoAlm,"1=Low-Low Alarm exists and will be checked","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HasFailAlm,"1=Analog Input Failure Alarm exists and will be checked","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HiHiResetReqd,"1=Reset required to clear High-High Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HiResetReqd,"1=Reset required to clear High Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_LoResetReqd,"1=Reset required to clear Low Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_LoLoResetReqd,"1=Reset required to clear Low-Low Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_FailResetReqd,"1=Reset required to clear Analog InputFailure Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HiHiAckReqd,"1=Acknowledge required for High-High Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HiAckReqd,"1=Acknowledge required for High Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_LoAckReqd,"1=Acknlowledge required for Low Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_LoLoAckReqd,"1=Acknowledge required for Low-Low Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_FailAckReqd,"1=Acknowledge required for Analog Input Failure Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HiHiSeverity,"High-High Alarm Severity 1=info, 2=warn, 3=excep, 4=fault","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HiSeverity,"High Alarm Severity 1=info, 2=warn, 3=excep, 4=fault","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_LoSeverity,"Low Alarm Severity 1=info, 2=warn, 3=excep, 4=fault","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_LoLoSeverity,"Low-Low Alarm Severity 1=info, 2=warn, 3=excep, 4=fault","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_FailSeverity,"Failure Alarm Severity 1=info, 2=warn, 3=excep, 4=fault","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_InpRawMin,"Input (unscaled) Minimum for Scaling","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_InpRawMax,"Input (unscaled) Maximum for Scaling","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_PVEUMin,"PV (Output) Minimum for Scaling to EU","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_PVEUMax,"PV (Output) Maximum for Scaling to EU","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_FiltTC,"PV Filter Time Constant (sec),$N0.0 = unfiltered","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HiHiDB,"High-High Alarm Deadband (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HiHiMinDuration,"Minimum time above High-High Limit to raise Alarm (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HiDB,"High Alarm Deadband (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_HiMinDuration,"Minimum time above High Limit to raise Alarm (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_LoDB,"Low Alarm Deadband (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_LoMinDuration,"Minimum time below Low Limit to raise Alarm (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_LoLoDB,"Low-Low Alarm Deadband (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_LoLoMinDuration,"Minimum time below Low-Low Limit to raise Alarm (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_FailHiLim,"Out-of-Range (fail) High Limit (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_FailLoLim,"Out-of-Range (fail) Low Limit (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_FailDB,"Out-of-Range (fail) High/Low Deadband (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Cfg_FailMinDuration,"Minimum time Bad or Out of Range to raise Fail Alarm (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PSet_Owner,"Program Owner Request ID (non-zero) or Release (zero)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PSet_HiHiLim,"Program-Entered High-High Alarm Threshold (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PSet_HiLim,"Program-Entered High Alarm Threshold (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PSet_LoLim,"Program-Entered Low Alarm Threshold (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PSet_LoLoLim,"Program-Entered Low-Low Alarm Threshold (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,MSet_SubstPV,"Maintenance-Entered Substitute PV (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,OSet_HiHiLim,"Operator-Entered High-High Alarm Threshold (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,OSet_HiLim,"Operator-Entered High Alarm Threshold (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,OSet_LoLim,"Operator-Entered Low Alarm Threshold (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,OSet_LoLoLim,"Operator-Entered Low-Low Alarm Threshold (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Set_SimPV,"PV used in Simulation (Inp_Sim=1) (EU)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_Acq,"Program Command to Acquire ownership (Oper to Prog)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_Rel,"Program Command to Release ownership (Prog to Oper)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_Lock,"Program Command to Lock Mode in Prog","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_Unlock,"Program Command to Unlock Mode","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_Reset,"Program Command to Reset all Alarms requiring Reset","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_HiHiAck,"Program Command to Acknowledge High-High Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_HiHiInhibit,"Program Command to Inhibit High-High Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_HiHiUninhibit,"Program Command to UninhibitHigh-High Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_HiAck,"Program Command to Acknowledge High Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_HiInhibit,"Program Command to Inhibit High Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_HiUninhibit,"Program Command to Uninhibit High Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_LoAck,"Program Command to Acknowledge Low Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_LoInhibit,"Program Command to Inhibit Low Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_LoUninhibit,"Program Command to Uninhibit Low Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_LoLoAck,"Program Command to Acknowledge Low-Low Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_LoLoInhibit,"Program Command to Inhibit Low-Low Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_LoLoUninhibit,"Program Command to Uninhibit Low-Low Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_FailAck,"Program Command to Acknowldege Analog Input Failure Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_FailInhibit,"Program Command to Inhibit Analog Input Failure Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,PCmd_FailUninhibit,"Program Command to Uninhibit Analog Input Failure Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,MCmd_SubstPV,"Maintenance Command to use Substitute PV (override input)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,MCmd_InpPV,"Maintenance Command to use Input PV (normal)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,OCmd_Reset,"Operator Command to Reset all Alarms requiring Reset","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_AIn:AOI,Val,"Analog Value (after Substitute PV, if used)","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_AIn:AOI,Val_InpPV,"Analog Input Value (actual, before Substitute PV selection)","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_AIn:AOI,Val_PVEUMin,"Minimum of scaled range = MIN (Cfg_PVEUMin, Cfg_PVEUMax)","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Val_PVEUMax,"Maximum of scaled range = MAX (Cfg_PVEUMin, Cfg_PVEUMax)","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Val_Owner,"Current Object Owner ID (0=not owned)","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Val_Notify,"Current Alarm Level and Acknowledgement (enumeration)","SINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Val_HiHiLim,"Current High-High Alarm Threshold","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_AIn:AOI,Val_HiLim,"Current High Alarm Threshold","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_AIn:AOI,Val_LoLim,"Current Low Alarm Threshold","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_AIn:AOI,Val_LoLoLim,"Current Low-Low Alarm Threshold","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_AIn:AOI,Sts_SubstPV,"1=Using Substitute PV (Input being overridden)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_InpPV,"1=Using Input PV (normal)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_PVBad,"1=PV Bad quality or Out of Range","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_PVUncertain,"1=PV Value is Uncertain (quality)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_Err,"1=Error in Config, see detail Err_ bits for reason","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_AIn:AOI,Err_Raw,"1=Error in Config: Raw Input Scaling Min = Max","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Err_EU,"1=Error in Config: Scaled EU Min = Max","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Err_Filt,"1=Error in Config: PV filter params (RateTime, TC)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Err_DB,"1=Error in Config: an Alarm Deadband is < 0.0","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Err_Alarm,"1=Error in Config: Invalid Alarm Min Duration or Severity","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_Maint,"1=Mode is Maintenance (supersedes Prog, Oper)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_Prog,"1=Mode is Program","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_Oper,"1=Mode is Operator","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_ProgOperLock,"1=Program or Operator has requested Mode Lock","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_HiHi,"1=Analog Input is above High-High limit","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Alm_HiHi,"1=Analog Input is in High-High Alarm","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Ack_HiHi,"1=High-High Alarm has been acknowledged","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_HiHiDisabled,"1=High-High Alarm is Disabled (not saved or sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_HiHiInhibited,"1=High-High Alarm is Inhibited by logic","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_HiHiSuppressed,"1=High-High Alarm has been suppressed (logged only)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_Hi,"1=Analog Input is above High limit","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Alm_Hi,"1=Analog Input is in High Alarm","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Ack_Hi,"1=High Alarm has been acknowledged","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_HiDisabled,"1=High Alarm is Disabled (not saved or sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_HiInhibited,"1=High Alarm is Inhibited by logic","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_HiSuppressed,"1=High Alarm has been suppressed (logged only)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_Lo,"1=Analog Input is below Low limit","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Alm_Lo,"1=Analog Input is in Low Alarm","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Ack_Lo,"1=Low Alarm has been acknowledged","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_LoDisabled,"1=Low Alarm is Disabled (not saved or sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_LoInhibited,"1=Low Alarm is Inhibited by logic","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_LoSuppressed,"1=Low Alarm has been suppressed (logged only)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_LoLo,"1=Analog Input is below Low-Low limit","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Alm_LoLo,"1=Analog Input is in Low-Low Alarm","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Ack_LoLo,"1=Low-Low Alarm has been acknowledged","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_LoLoDisabled,"1=Low-Low Alarm is Disabled (not saved or sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_LoLoInhibited,"1=Low-Low Alarm is Inhibited by logic","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_LoLoSuppressed,"1=Low-Low Alarm has been suppressed (logged only)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_Fail,"1=Analog Input is Out of Range or PV Bad","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Alm_Fail,"1=Analog Input Failure Alarm (Bad or Out of Range)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Ack_Fail,"1=Analog Input Failure Alarm has been acknowledged","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_FailDisabled,"1=Analog input Failure Alarm is Disabled (not saved or sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_FailInhibited,"1=Analog Input Failure Alarm is inhibited by logic","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Sts_FailSuppressed,"1=Analog Input Failure Alarm has been suppressed (logged only)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Rdy_SubstPV,"1=Ready for MCmd_SubstPV","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Rdy_InpPV,"1=Ready for MCmd_InpPV","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,Rdy_Reset,"1=At least one Alarm requires Reset","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_AIn:AOI,LoLo,"Low-Low Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Lo,"Low Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Hi,"High Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,HiHi,"High-High Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Mode,"Analog Input Mode Selection","P_Mode","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Cfg_EU,"Engineering Units for display on HMI","STRING_8","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Cfg_Tag,"Tagname for display on HMI","STRING_20","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Cfg_Label,"Label for graphic symbol displayed on HMI","STRING_20","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Cfg_Desc,"Description for display on HMI","STRING_40","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Fail,"Analog Input Failure Alarm (bad quality or out of range)","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_Notify,"Buffer for building Val_Notify","SINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_SubstPV,"Internal flag: Using Substitute PV","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_UnfiltPV,"Unfiltered PV, input to 1st order filter","REAL","","(RADIX := Float, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_Alpha,"Filter multiplier = (1 / (1+TC/dT) )","REAL","","(RADIX := Float, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_ScanT,"Scan Timer (milliseconds, always runs)","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_ScanTime,"Time since this instance was last scanned","REAL","","(RADIX := Float, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_FiltPV,"Filtered PV","REAL","","(RADIX := Float, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_InpDINT,"Input REAL bit pattern as a DINT (check for Inf/NaN)","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_InpInfNaN,"Input is Infinite or Not a Number","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_ValidONS,"Selected PV goes from Infinite or Not a Number to VALID","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_SelPVDINT,"Selected PV check for Infinite or Non A Number","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_AIn:AOI,Wrk_SelPVInfNaN,"Selected PV (Input or Substitute) is Infinite or NaN","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_Alarm:AOI,Inp,"Alarm Condition Input 1=Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Alarm:AOI,Inp_Reset,"1=Reset Alarm requiring reset","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Alarm:AOI,Cfg_ResetReqd,"1=Reset required to clear Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Cfg_AckReqd,"1=Acknowledge required for Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Cfg_Severity,"1=Info Only; 2=Warning; 3=Process Exception; 4=Fault","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Cfg_MinDuration,"Minimum time (sec) Input must stay on to generate Alarm","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,PCmd_Reset,"Program Command to Reset latched alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,PCmd_Ack,"Program Command to Acknowledge alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,PCmd_Inhibit,"Program Command to Inhibit alarm (force Alm to 0)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,PCmd_Uninhibit,"Program Command to Uninhibit alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,OCmd_Reset,"Operator Command to Reset latched alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,OCmd_Ack,"Operator Command to Acknowledge alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,OCmd_Disable,"Operator Command to Disable alarm (force Alm to 0)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,OCmd_Enable,"Operator Command to Enable alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Val_Notify,"Current Alarm Level and Acknowledgement (enumeration)","SINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Alm,"Alarm output 1=In Alarm","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Alarm:AOI,Ack,"Alarm acknowledged status: 1=Ack rcvd","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Alarm:AOI,Disabled,"1=Alarm has been Disabled by Operator (will not be sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Alarm:AOI,Inhibited,"1=Alarm has been Inhibited by logic (will not be sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Alarm:AOI,Suppressed,"1=Alarm has been suppressed (not visible on HMI)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Alarm:AOI,Sts_Err,"1=Error in Config: see detail Err_ bits for reason","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Err_MinDuration,"1=Error in Config: Invalid Min Duration (use 0 to 2147483)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Err_Severity,"1=Error in Config: Invalid Severity (use 1 to 4)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Rdy_Reset,"Ready to receive OCmd_Reset (enable button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Rdy_Ack,"Ready to receive OCmd_Ack (enable button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Rdy_Disable,"Ready to receive OCmd_Disable (enable button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Rdy_Enable,"Ready to receive OCmd_Enable (enable button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Wrk_MinDurationT,"Alarm Condition Minimum Duration Timer","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Alarm:AOI,Wrk_Alm,"Internal Alarm Status","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Alarm:AOI,Wrk_Inhibited,"Internal Alarm Inhibit Status","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Alarm:AOI,Wrk_AlmMinOnT,"Alarm output minimum ON time to be seen by alarm server","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_DIn:AOI,Inp_PV,"Input Signal (process variable) from Sensor","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_DIn:AOI,Inp_PVBad,"Input Comm Status or Quality 1=Bad, 0=OK","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Inp_Target,"Target State of Input (Alarm if not in Target State)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_DIn:AOI,Inp_Gate,"Gate Condition (=1 to enable Alarm)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_DIn:AOI,Inp_Sim,"1=Use simulated PV (Set_SimPV); 0=Use Input (Inp_PV)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Inp_Reset,"1=Reset Alarm requiring reset","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Cfg_NoSubstPV,"1=Disallow selection of Substitute PV","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Cfg_NormTextVis,"1=Display state text in $Qnormal$Q state (= target), 0=hide (some HMI objects)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Cfg_PCmdClear,"1=Clear Program Commands on receipt$N0=Leave Set","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Cfg_HasTgtDisagreeAlm,"1=Target Disagree Alarm exists and will be checked","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Cfg_TgtDisagreeResetReqd,"1=Target Disagree Alarm is latched in, requires Reset Command to clear","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Cfg_TgtDisagreeAckReqd,"1=Target Disagree Alarm must be acknowledged","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Cfg_TgtDisagreeSeverity,"Target Disagree Alarm Severity: 1=info, 2=warn, 3=excep, 4=fault","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Cfg_GateDly,"Time Inp_Gate must be true before Alarm is checked (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Cfg_Debounce,"Minimum time Status must maintain state, (sec)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Cfg_TgtDisagreeMinDuration,"Minimum time Input must disagree with target to generate an Alarm (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,MSet_SubstPV,"Maintenance-Entered Substitute PV","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Set_SimPV,"PV used in Simulation (Inp_Sim=1)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,PCmd_Reset,"Program Command to Reset all latched Alarms","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,PCmd_TgtDisagreeAck,"Program Command to Acknowledge the Target Disagree Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,PCmd_TgtDisagreeInhibit,"Program Command to Inhibit the Target Disagree Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,PCmd_TgtDisagreeUninhibit,"Program Command to Uninhibit the Target Disagree Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,MCmd_SubstPV,"Maintenance Command to use Substitute PV (override input)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,MCmd_InpPV,"Maintenance Command to use Input PV (normal)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,OCmd_Reset,"Operator Command to Reset all latched Alarms","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_DIn:AOI,Val_Notify,"Current Alarm Level and Acknowledgement (enumeration)","SINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Sts,"Discrete Input Status (incl. Debounce, Manual Override, if used)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_DIn:AOI,Sts_PV,"Discrete Input Status (actual, not subject to Override)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_DIn:AOI,Sts_SubstPV,"1=Using Substitute PV (Input being overridden)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Sts_InpPV,"1=Using Input PV (normal)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Sts_PVBad,"Input Comm Status/ Quality (0=OK, 1=Bad)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Sts_Err,"1=Error in Config: see detail bits for reason","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_DIn:AOI,Err_Timer,"1=Error in Config: Invalid Timer Preset (use 0 to 2147483)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Err_Alarm,"1=Error in Config: Invalid Alarm Min Duration or Severity","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Sts_TgtDisagree,"1=Input is not in Target state","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Alm_TgtDisagree,"1=Alarm: Input is not in Target state","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Ack_TgtDisagree,"1=Target Disagree Alarm has been acknowledged","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Sts_TgtDisagreeDisabled,"1=Target Disagree Alarm is Disabled (not saved or sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Sts_TgtDisagreeInhibited,"1=Target Disagree Alarm is Inhibited by logic","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Sts_TgtDisagreeSuppressed,"1=Target Disagree Alarm is Suppressed (logged only)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Rdy_SubstPV,"1=Ready for MCmd_SubstPV","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Rdy_InpPV,"1=Ready for MCmd_InpPV","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Rdy_Reset,"1=Ready for Operator Alarm Reset Command","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_DIn:AOI,Wrk_GateDlyT,"Gate Delay timer","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_DIn:AOI,Cfg_Tag,"Tagname for display on HMI","STRING_20","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_DIn:AOI,Cfg_Desc,"Description for display on HMI","STRING_40","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_DIn:AOI,Cfg_Label,"Label for graphic symbol displayed on HMI","STRING_20","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_DIn:AOI,Wrk_Sts,"Internal Status (after Manual Override selection)","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_DIn:AOI,TgtDisagree,"Target Disagree Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_DIn:AOI,Wrk_FallT,"Timer to ensure Status LOW time on falling edge","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_DIn:AOI,Wrk_RiseT,"Timer to ensure Status HIGH time on rising edge","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_DIn:AOI,Wrk_SubstPV,"Internal flag: Using Substitute PV","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_DIn:AOI,Cfg_1StText,"Text to display in PV=1 State","STRING_8","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_DIn:AOI,Cfg_0StText,"Text to display in PV=0 State","STRING_8","","(Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_Intlk:AOI,Inp_Intlk00,"Interlock Cond. 00 (1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Inp_Intlk01,"Interlock Cond. 01$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Inp_Intlk02,"Interlock Cond. 02$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Inp_Intlk03,"Interlock Cond. 03$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Inp_Intlk04,"Interlock Cond. 04$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Inp_Intlk05,"Interlock Cond. 05$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Inp_Intlk06,"Interlock Cond. 06$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Inp_Intlk07,"Interlock Cond. 07$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Inp_Intlk08,"Interlock Cond. 08$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Inp_Intlk09,"Interlock Cond. 09$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Inp_Intlk10,"Interlock Cond. 10$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Inp_Intlk11,"Interlock Cond. 11$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Inp_Intlk12,"Interlock Cond. 12$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Inp_Intlk13,"Interlock Cond. 13$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Inp_Intlk14,"Interlock Cond. 14$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Inp_Intlk15,"Interlock Cond. 15$N(1=Stop, 0=OK)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Inp_Reset,"1=Reset Latched Interlocks and First-Out","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Cfg_Latched,"Set bits indicate which conditions are latched (sealed in)","INT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Cfg_Bypassable,"Set bits indicate which conditions can be bypassed","INT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Cfg_PCmdClear,"1=Clear Program Commands on receipt$N0=Leave Set","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,PCmd_Reset,"Program Command to Reset Latched Interlocks","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,OCmd_Reset,"Operator Command to Reset Latched Interlocks","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Sts_IntlkOK,"Overall Interlock Status (1=OK to run, 0=Stop)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Sts_NBIntlkOK,"Non-Bypassable Interlock Status (1=All NB Interlocks OK to run)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Sts_Intlk,"Individual Interlock Status (1=Stop, 0=OK)","INT","","(RADIX := Binary, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Sts_FirstOut,"Interlock First Out Status (bit 1 is First Not-OK condition)","INT","","(RADIX := Binary, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Sts_NBFirstOut,"Non-bypassable Interlock First-Out Status (bit=1 is First NB Not-OK condition)","INT","","(RADIX := Binary, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Intlk:AOI,Rdy_Reset,"1=Ready to receive OCmd_Reset (reset required)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Intlk:AOI,Cfg_CondTxt,"Short HMI description of Interlock Conditions","STRING_20[16]","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Intlk:AOI,Wrk_Inp,"Collection copy of Inp_IntlkXXs","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Intlk:AOI,Wrk_NB,"Working register for Non-Bypassable Interlock ogic","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Intlk:AOI,Wrk_Intlk,"Working register for Interlock logic","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Intlk:AOI,Wrk_FirstOut,"Working register for First Out logic","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Intlk:AOI,Wrk_Sts,"Working register for generating Interlock status","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Intlk:AOI,Wrk_NBFirstOut,"Working register for Non-Bypassable First Out logic","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Intlk:AOI,Wrk_PrevSts,"Interlock Status previous scan","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Intlk:AOI,Wrk_PrevNB,"Non-Bypassable Status previous scan","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_Mode:AOI,Inp_Hand,"1=Select Hand (typ. hardwired)  Mode","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Mode:AOI,Inp_Ovrd,"1=Select Override (typ. Process/Safety Interlock) Mode","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Mode:AOI,Cfg_PCmdClear,"1=Clear Program Command on receipt; 0=Use Level-based (maintained) PCmds","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,Cfg_OvrdOverLock,"1=Override supersedes Prog/Oper Lock, 0=don$'t override Lock","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,PCmd_Acq,"Program Command to Acquire Ownership (Oper to Prog)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,PCmd_Rel,"Program Command to Release Ownership (Prog to Oper)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,PCmd_Lock,"Program Command to Lock Mode in Prog","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,PCmd_Unlock,"Program Command to Unlock Mode","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,MCmd_Acq,"Maintenance Command to Acquire Ownership (Oper/Prog/Ovrd to Maint)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,MCmd_Rel,"Maintenance Command to Release Ownership (Maint to Oper/Prog/Ovrd)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,OCmd_AcqLock,"Operator Command to Acquire and Lock Mode in Oper","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,OCmd_Unlock,"Operator Command to Unlock Operator Mode","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,Sts_Hand,"1=Mode is Hand (supersedes Maint, Ovrd, Prog, Oper)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode:AOI,Sts_Maint,"1=Mode is Maintenance (supersedes Ovrd, Prog, Oper)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode:AOI,Sts_Ovrd,"1=Mode is Override (supersedes Prog, Oper)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode:AOI,Sts_Prog,"1=Mode is Program","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode:AOI,Sts_Oper,"1=Mode is Operator","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode:AOI,Sts_ProgOperLock,"1=Program or Operator has requested Mode Lock","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode:AOI,Sts_ProgOperSel,"Prog/Oper selection 1=Program, 0=Operator","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Mode:AOI,Rdy_Acq,"1=Ready for MCmd_Acq","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Mode:AOI,Rdy_Rel,"1=Ready for MCmd_Rel","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Mode:AOI,Rdy_AcqLock,"1=Ready for OCmd_AcqLock","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Mode:AOI,Rdy_Unlock,"1=Ready for OCmd_Unlock","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Mode:AOI,Wrk_Locked,"1=Program/Operator Mode selection is Locked","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Mode:AOI,Wrk_Prog,"Internal Program (1) / Operator (0) Mode selection","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Mode:AOI,Wrk_Maint,"Internal Maintenance Mode","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_Motor:AOI,Inp_RunFdbk,"Input Signal: RUN feedback from motor","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Motor:AOI,Inp_PermOK,"1=Permissives OK, motor can start","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Motor:AOI,Inp_NBPermOK,"1=Non-Bypassable Permissives OK, motor can start","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Motor:AOI,Inp_IntlkOK,"1=Interlocks OK, motor can start/run","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Motor:AOI,Inp_NBIntlkOK,"1=Non-Bypassable Interlocks OK, motor can start/run","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Motor:AOI,Inp_IOFault,"Input Communication Status 0=OK, 1=fail","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Inp_Sim,"1=Simulate working motor; 0=Start/Stop/ Monitor actual motor","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Inp_Hand,"1=Select Hand (hardwired) Control Strategy","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Inp_Ovrd,"1=Select Override control strategy","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Inp_OvrdState,"1=Override to RUN, 0=Override to STOP","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Inp_Reset,"1=Reset all fault conditions and latched Alarms","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_HasRunFdbk,"1=Motor provides a run feedback signal","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_UseRunFdbk,"1=Motor run feedback should be used for failure checking","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_HasPermObj,"1=Tells HMI a P_Perm is connected to Inp_Perm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_HasIntlkObj,"1=Tells HMI a P_Intlk is connected to Inp_Intlk","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_HasResInhObj,"1=Tells HMI a P_ResInh Restart Inhibit is connected","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_HasRunTimeObj,"1=Tells HMI a P_RunTime is connected","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_PCmdClear,"1=Clear Program Commands on receipt$N0=Leave Set","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_OvrdPermIntlk,"1=Override ignores Bypassable Perm/ Intlk; 0=always use Perm/Intlk","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_HasFailToStartAlm,"1=Fail to Start Alarm exists and will be checked","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_HasFailToStopAlm,"1=Fail to Stop Alarm exists and will be checked","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_HasIntlkTripAlm,"1=Interlock Trip Alarm exists and will be checked","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_HasIOFaultAlm,"1=I/O Fault Alarm exists and will be checked","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_FailToStartResetReqd,"1=Reset required to clear Fail to Start Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_FailToStopResetReqd,"1=Reset required to clear Fail to Stop Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_IntlkTripResetReqd,"1=Reset required to clear Interlock Trip Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_IOFaultResetReqd,"1=Reset required to clear I/O Fault Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_FailToStartAckReqd,"1=Acknowledge required for Fail to Start Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_FailToStopAckReqd,"1=Acknowledge required for Fail to Stop Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_IntlkTripAckReqd,"1=Acknowledge required for Interlock Trip Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_IOFaultAckReqd,"1=Acknowledge required for I/O Fault Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_FailToStartSeverity,"Fail To Start Alarm Severity 1=info 2=warn 3=excep 4=fault","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_FailToStopSeverity,"Fail To Stop Alarm Severity 1=info 2=warn 3=excep 4=fault","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_IntlkTripSeverity,"Interlock Trip Alarm Severity 1=info 2=warn 3=excep 4=fault","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_IOFaultSeverity,"I/O Fault Alarm Severity 1=info 2=warn 3=excep 4=fault","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_SimFdbkT,"Delay to echo back  of Running/Stopped status when in Simulation (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_FailToStartT,"Time after Start to get Run Feedback before Fault (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Cfg_FailToStopT,"Time after Stop to drop Run Feedback before Fault (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PSet_Owner,"Program Owner Request ID (non-zero) or Release (zero)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_Start,"Program Command to Start Motor","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_Stop,"Program Command to Stop Motor","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_Acq,"Program Command to Acquire ownership (Oper/OOS to Prog)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_Rel,"Program Command to Release ownership (Prog to OOS)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_Lock,"Program Command to Lock Mode in Prog","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_Unlock,"Program Command to Unlock Mode","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_Reset,"Program Command to Reset all Alarms requiring Reset","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_FailToStartAck,"Program Command to Acknowledge Fail to Start Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_FailToStartInhibit,"Program Command to Inhibit Fail to Start Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_FailToStartUninhibit,"Program Command to Uninhibit Fail to Start Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_FailToStopAck,"Program Command to Acknowledge Fail to Stop Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_FailToStopInhibit,"Program Command to Inhibit Fail to Stop Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_FailToStopUninhibit,"Program Command to Uninhibit Fail to Stop Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_IntlkTripAck,"Program Command to Acknowledge Interlock Trip Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_IntlkTripInhibit,"Program Command to Inhibit Interlock Trip Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_IntlkTripUninhibit,"Program Command to Uninhibit Interlock Trip Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_IOFaultAck,"Program Command to Acknowledge I/O Fault Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_IOFaultInhibit,"Program Command to Inhibit I/O Fault Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,PCmd_IOFaultUninhibit,"Program Command to Uninhibit I/O Fault Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,OCmd_Start,"Operator Command to Start Motor","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,OCmd_Stop,"Operator Command to Stop Motor","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,OCmd_Bypass,"Operator Command to Bypass all Bypassable Interlocks and Permissives","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,OCmd_Check,"Operator Command to Check (not bypass) all Interlocks and Permissives","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,MCmd_Disable,"Maintenance Command to Disable Motor","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,MCmd_Enable,"Maintenance Command to Enable (allow to run) Motor","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,OCmd_Reset,"Operator Command to Reset all Alarms requiring Reset","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Motor:AOI,Out_Run,"1=Run Motor, 0=Stop Motor","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Out_Start,"1=Start Motor, 0=Motor left in current state","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Out_Stop,"1=Stop Motor, 0=Motor left in current state","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Val_Owner,"Current Object Owner ID (0=not owned)","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Val_Notify,"Current Alarm Level and Acknowledgement (enumeration)","SINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_Stopped,"1=Motor requested to stop and is confirmed stopped","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Sts_Starting,"1=Motor requested to run and awaiting run feedback","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Sts_Running,"1=Motor requested to run and is confirmed running","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Sts_Stopping,"1=Motor requested to stop and awaiting stopped feedback","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Sts_Available,"1=Motor available for control by automation (Prog)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_Bypass,"1=Bypassable Interlocks and Permissives are Bypassed","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_BypActive,"1=Bypassing Active (Bypassed or Maintenance)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_Disabled,"1=Motor is Disabled","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_Err,"1=Error in Config: see detail bits for reason","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Err_Timer,"1=Error in Config: Start/Stop Check timer preset (use 0 to 2147483)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Err_Sim,"1=Error in Config: Simulation timer preset (use 0 to 2147483)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Err_Alarm,"1=Error in Config: Invalid Alarm Severity","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_Hand,"1=Mode is Hand (supersedes Maint, Ovrd, Prog, Oper)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Sts_Maint,"1=Mode is Maintenance (supersedes Ovrd, Prog, Oper)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Sts_Ovrd,"1=Mode is Override (supersedes Prog, Oper)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Sts_Prog,"1=Mode is Program (auto)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Sts_Oper,"1=Mode is Operator (manual)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Motor:AOI,Sts_ProgOperLock,"1=Program or Operator has requested Mode Lock","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_FailToStart,"1=Motor Failed to Start (one-shot)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Alm_FailToStart,"1=Motor Fail to Start Alarm","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Ack_FailToStart,"1=Fail to Start Alarm has been acknowledged","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_FailToStartDisabled,"1=Fail to Start Alarm has been disabled (will not be sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_FailToStartInhibited,"1=Fail to Start Alarm has been inhibited by logic","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_FailToStartSuppressed,"1=Fail to Start Alarm has been suppressed (logged only)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_FailToStop,"1=Motor Failed to Stop","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Alm_FailToStop,"1=Motor Fail to Stop Alarm","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Ack_FailToStop,"1=Fail to Stop Alarm has been acknowledged","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_FailToStopDisabled,"1=Fail to Stop Alarm has been disabled (will not be sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_FailToStopInhibited,"1=Fail to Stop Alarm has been inhibited by logic","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_FailToStopSuppressed,"1=Fail to Stop Alarm has been suppressed (logged only)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_IntlkTrip,"1=Motor stopped by an Interlock NOT OK (one-shot)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Alm_IntlkTrip,"1=Alarm: Motor stopped by an Interlock NOT OK","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Ack_IntlkTrip,"1=Interlock Trip Alarm has been acknowledged","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_IntlkTripDisabled,"1=Interlock Trip Alarm is Disabled (not saved or sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_IntlkTripInhibited,"1=Interlock Trip Alarm has been inhibited by logic","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_IntlkTripSuppressed,"1=Interlock Trip Alarm has been suppressed (logged only)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_IOFault,"I/O Comm Fault Status (0=OK, 1=Bad)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Alm_IOFault,"1=I/O Fault Alarm","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Ack_IOFault,"1=I/O Fault Alarm has been acknowledged","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_IOFaultDisabled,"1=I/O Fault Alarm is Disabled (not saved or sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_IOFaultInhibited,"1=I/O Fault Alarm has been inhibited by logic","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Sts_IOFaultSuppressed,"1=I/O Fault Alarm has been suppressed (logged only)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Rdy_Start,"1=Ready to receive OCmd_Start (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Rdy_Stop,"1=Ready to receive OCmd_Stop (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Rdy_Bypass,"1=Ready to receive OCmd_Bypass (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Rdy_Check,"1=Ready to receive OCmd_Check (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Rdy_Disable,"1=Ready to receive MCmd_Disable (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Rdy_Enable,"1=Ready to receive MCmd_Enable (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Rdy_Reset,"1=Ready to receive OCmd_Reset (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Motor:AOI,Mode,"Motor Mode Selection","P_Mode","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,IOFault,"I/O Fault Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,IntlkTrip,"Interlock Trip Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,FailToStop,"Motor Failed to Stop Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,FailToStart,"Motor Failed to Start Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Cfg_Tag,"Tagname for display on HMI","STRING_20","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Cfg_Label,"Label for graphic symbol displayed on HMI","STRING_20","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Cfg_Desc,"Description for display on HMI","STRING_40","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Wrk_Run,"1=Motor should be $Qrunning$Q, 0=should be $Qstopped$Q","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Wrk_SimRunT,"Simulation Delay until Running","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Wrk_StopT,"Stop Check Timer","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Wrk_StartT,"Start Check Timer","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Wrk_Fault,"1=a Motor Fault has been detected","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Wrk_SimStopT,"Simulation Delay until Stopped","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Wrk_RunFdbk,"Run Feedback based on mode, simulation, etc. 1=running","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Wrk_IntlkTrip,"1=Interlock Not OK Tripped Running Motor","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Wrk_Notify,"Buffer for building Val_Notify","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Wrk_Bypass,"Internal Bypassable Permissives and Interlocks are Bypassed flag","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Motor:AOI,Wrk_Disabled,"Internal Motor is Disabled","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_Perm:AOI,Inp_Perm00,"Permissive Cond 00$N(1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Perm:AOI,Inp_Perm01,"Permissive Cond 01 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Perm:AOI,Inp_Perm02,"Permissive Cond 02 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Perm:AOI,Inp_Perm03,"Permissive Cond 03 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Perm:AOI,Inp_Perm04,"Permissive Cond 04 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Perm:AOI,Inp_Perm05,"Permissive Cond 05$N(1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Perm:AOI,Inp_Perm06,"Permissive Cond 06 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Perm:AOI,Inp_Perm07,"Permissive Cond 07 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Perm:AOI,Inp_Perm08,"Permissive Cond 08 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Perm:AOI,Inp_Perm09,"Permissive Cond 09 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Perm:AOI,Inp_Perm10,"Permissive Cond 10$N(1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Perm:AOI,Inp_Perm11,"Permissive Cond 11 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Perm:AOI,Inp_Perm12,"Permissive Cond 12 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Perm:AOI,Inp_Perm13,"Permissive Cond 13 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Perm:AOI,Inp_Perm14,"Permissive Cond 14 (1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Perm:AOI,Inp_Perm15,"Permissive Cond 15$N(1=OK,0=don$'t start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Perm:AOI,Cfg_Bypassable,"Set bits indicate which conditions can be bypassed","INT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Perm:AOI,Sts_PermOK,"Overall Permissive Status (1=OK to start)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Perm:AOI,Sts_NBPermOK,"Non-Bypassable Permissive Status (1 =all non- bypassable Permissives OK to start)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Perm:AOI,Sts_Perm,"Individual Permissive Status (1=OK, 0=don$'t start)","INT","","(RADIX := Binary, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Perm:AOI,Cfg_CondTxt,"Short HMI description of Permissive Conditions","STRING_20[16]","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Perm:AOI,Wrk_Inp,"Collection copy of Inp_PermXXs","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Perm:AOI,Wrk_Bypass,"Working Register for Bypassable Permissives","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_Reset:AOI,Inp_Reset,"Reset Input, 1=Reset, from pushbutton or another object","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Reset:AOI,Inp_ResetReqd,"1=Reset Required, enable Reset button","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Reset:AOI,Cfg_MinHoldTime,"Minimum Time to hold Reset Output true (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Reset:AOI,PCmd_Reset,"Program Command to Reset, from other object","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Reset:AOI,OCmd_Reset,"Operator Command to Reset, from HMI","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Reset:AOI,Out_Reset,"1=Reset received for this P_Reset$'s scope","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Reset:AOI,Sts_Err,"1=Error in Config: Invalid Hold Time (use 0 to 2147483)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Reset:AOI,Rdy_Reset,"1=Ready to receive OCmd_Reset (enable button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Reset:AOI,Wrk_HoldT,"Reset Output Hold Timer (TOF)","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Reset:AOI,Wrk_EnableInONS,"EnableIn transition detection to pulse Reset Output","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Reset:AOI,Wrk_HoldONS,"One-Shot to fire Hold Timer to ensure min. output ON time.","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Reset:AOI,Wrk_ResetCond,"Any incoming Reset condition is TRUE","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_ResInh:AOI,Inp_Stopped,"Equipment is confirmed Stopped","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ResInh:AOI,Inp_Starting,"Equipment is Starting, indicating a start attempt","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ResInh:AOI,Inp_Running,"Equipment is confirmed Running","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ResInh:AOI,Cfg_ThreeColdStarts,"Sec within which three starts are allowed if cold","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ResInh:AOI,Cfg_FirstFailCold,"Sec for cold motor to wait after 1st start failure before ready to start","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ResInh:AOI,Cfg_SubseqFailCold,"Sec for cold motor to wait after 2nd and subsequent start failure before ready","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ResInh:AOI,Cfg_FirstFailHot,"Sec for hot motor to wait after 1st start failure before ready to start","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ResInh:AOI,Cfg_SubseqFailHot,"Sec for hot motor to wait after 2nd and subsequent start failure before ready","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ResInh:AOI,Cfg_HotRestartOK,"Sec for hot motor to run so it can immediately restart after stop","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ResInh:AOI,Cfg_RestartHot,"Sec for hot motor to wait after stop if stopped before Hot Restart OK time","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ResInh:AOI,Cfg_HotToCold,"Sec for a stopped hot motor to become cold","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ResInh:AOI,Val_MinToReady,"Minutes yet inhibited before ready to start (mmm:ss)","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_ResInh:AOI,Val_SecToReady,"Seconds yet inhibited before ready to start$N(mmm:ss)","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_ResInh:AOI,Val_State,"State Number (see State Diagram in docs) for HMI","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ResInh:AOI,Sts_Ready,"Permissive for unit to start 1=ready, 0=not ready","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_ResInh:AOI,Sts_Err,"1=Error in Config: Invalid Time (use 0.0 to 2147483)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_ResInh:AOI,Wrk_FirstColdStartT,"Time since first cold start","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_FirstFailColdT,"Time for cold motor to wait after 1st start failure before ready","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_SubsFailColdT,"Time for cold motor to wait after 2nd and subs. failures before ready","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_FirstFailHotT,"Time for hot motor to wait after 1st start failure before ready","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_SubsFailHotT,"Time for hot motor to wait after 2nd and subs. failures before ready","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_HotRestartOKT,"Time for hot motor to run so it can restart immediately when stopped","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_RestartHotT,"Time for hot motor to wait after stop after running less than Hot Restart OK time","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_HotToColdT,"Time for a stopped hot motor to become cold","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_FailCount,"Number of failed start attempts","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_mSecUntilReady,"Milliseconds until the inhibit time is done and the unit is ready to start","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_SecUntilReady,"Seconds until inhibit time is done and the unit is ready to start","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_State,"Instruction State (see state diagram in design docs)","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_Ready,"Internal storage of Sts_Ready:$N1 = OK to start","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ResInh:AOI,Wrk_SecondColdStartT,"Time since second cold start","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_RunTime:AOI,Inp_Starting,"1=Motor is Starting (from motor instruction)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_RunTime:AOI,Inp_Running,"1=Motor is Running (from motor instruction)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_RunTime:AOI,Cfg_PCmdClear,"1=Clear Program Commands on receipt$N0=Leave Set","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_RunTime:AOI,PCmd_ClearStarts,"Program Command to Clear Count of Starts (attempts)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_RunTime:AOI,PCmd_ClearMaxHrs,"Program Command to Clear Maximum (continuous) Run Time for any start","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_RunTime:AOI,PCmd_ClearTotHrs,"Program Command to Clear Total Running Time","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_RunTime:AOI,MCmd_ClearStarts,"Maintenance Command to Clear Count of Starts (attempts)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_RunTime:AOI,MCmd_ClearMaxHrs,"Maintenance Command to Clear Maximum (continuous) Run Time for any start","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_RunTime:AOI,MCmd_ClearTotHrs,"Maintenance Command to Clear Total Running Time","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_RunTime:AOI,Val_Starts,"Total number of motor starts or attempts","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_RunTime:AOI,Val_CurRunHrs,"Current running time this start (hours)","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_RunTime:AOI,Val_MaxRunHrs,"Maximum continuous running time for a given start (hours)","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_RunTime:AOI,Val_TotRunHrs,"Total accumulated running time (hours)","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_RunTime:AOI,Wrk_CurHours,"Whole hours of current run time","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_RunTime:AOI,Wrk_CurRunT,"Timer for timing current run time","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_RunTime:AOI,Wrk_TotTenths,"Tenths of hours of total run time","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_RunTime:AOI,Wrk_Starts,"Counter for counting motor starts","COUNTER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_RunTime:AOI,Wrk_TotRunT,"Retentive timer for timing 0.1 hour total run time","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_RunTime:AOI,Wrk_MaxHours,"Internal Maximum Run Hours","REAL","","(RADIX := Float, Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,U_CommFail:AOI,Inp_Heartbeat,"Heartbeat from Remote PLC","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_CommFail:AOI,CFG_DelayTimerSec,"Delay Timer in Seconds","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_CommFail:AOI,Sts_CommFail,"Communication Failure Alarm","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_CommFail:AOI,HeartBeatDelayTimerOn,"","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,U_CommFail:AOI,HeartBeatDelayTimerOff,"","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,U_CommFail:AOI,ConnectionStatusDelayTimer,"","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,U_FlowTot:AOI,Inp_AIn,"Flow Analog Input AOI","P_AIn","","(Usage := InOut, Constant := false, Required := true, Visible := true)"
TAG,U_FlowTot:AOI,Inp_WallClock,"PLC Wall Clock","U_WallClock","","(Usage := InOut, Constant := false, Required := true, Visible := true)"
TAG,U_FlowTot:AOI,Inp_ProgStartReq,"Prog Start Request.  If needed map to turn on totalizer, (ex. pump running) else Defaults to 1 (always start)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,U_FlowTot:AOI,Val_FlowRate,"Current Flow Rate","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_FlowTot:AOI,Val_DailyTot,"Todays Total Flow","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_FlowTot:AOI,Val_YestTot,"Yesterday Total Flow","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_FlowTot:AOI,Val_YearlyTot,"This Year Total Flow","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_FlowTot:AOI,Val_LastYearTot,"Last Year Total Flow","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_FlowTot:AOI,YearlyTotalizer,"","TOTALIZER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,U_FlowTot:AOI,DailyTotalizer,"","TOTALIZER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,U_FlowTot:AOI,FlowRateLowLimit_SSUM,"","SELECTED_SUMMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,U_FlowTot:AOI,LowCutoff_BNOT,"","FBD_BOOLEAN_NOT","","(Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,U_Heartbeat:AOI,CFG_DelayTimerSec,"Delay Timer in Seconds","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_Heartbeat:AOI,Heartbeat,"Heartbeat from Remote PLC","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_Heartbeat:AOI,DelayTimerOn,"","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,U_Heartbeat:AOI,DelayTimerOff,"","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,U_RepeatCycTmr:AOI,CFG_OffTimeLoLimitSec,"Off Time Low Limit (Sec)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_RepeatCycTmr:AOI,CFG_OnTimeLoLimitSec,"On Time Low Limit (Sec)","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_RepeatCycTmr:AOI,OSet_CycleNowPB,"Operator Cycle Now Push button","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_RepeatCycTmr:AOI,Oset_OnTimePreset,"Operator On Time Preset","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_RepeatCycTmr:AOI,Oset_OffTimePreset,"Operator Off Time Preset","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_RepeatCycTmr:AOI,Sts_EquipAvailable,"Motor Available","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_RepeatCycTmr:AOI,Val_OnTimeElapsed,"On Time Elapsed","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_RepeatCycTmr:AOI,Val_OffTimeElapsed,"Off Time Elapsed","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_RepeatCycTmr:AOI,Val_OnTimeLoLimit,"On Time Low Limit","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_RepeatCycTmr:AOI,Val_OnTimeHiLimit,"On Time High Limit","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_RepeatCycTmr:AOI,Val_OffTimeLoLimit,"Off Time Low Limit","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_RepeatCycTmr:AOI,Val_OffTimeHiLimit,"Off Time High Limit","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_RepeatCycTmr:AOI,Out_On,"Motor Run Output","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_RepeatCycTmr:AOI,ONTimer,"On Timer","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,U_RepeatCycTmr:AOI,OFFTimer,"Off Timer","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,U_RepeatCycTmr:AOI,TimerHighLimitSec,"Timer High Limit (Sec)","REAL","","(RADIX := Float, Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,U_WallClock:AOI,OCmd_SetTime,"Set the Date and Time Bit","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_WallClock:AOI,OSet_Year,"Year To Set","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_WallClock:AOI,OSet_Month,"Month To Set","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_WallClock:AOI,OSet_Day,"Day To Set","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_WallClock:AOI,OSet_Hour,"Hour To Set","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_WallClock:AOI,OSet_Minute,"Minute To Set","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_WallClock:AOI,OSet_Second,"Second To Set","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Val_CurrentYear,"Current Year","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Val_CurrentMonth,"Current Month","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Val_CurrentDay,"Current Day","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Val_CurrentHour,"Current Hour","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Val_CurrentMinute,"Current Minute","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Val_CurrentSecond,"Current Second","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Val_DayOfWeek,"Day of Week$N 0 = Sun, 1=Mon, 2=Tues, 3=Wed, 4=Thur, 5=Fri, 6=Sat","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Sts_HourlyReset,"Hourly Reset","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Sts_DailyReset,"Daily Reset","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Sts_MonthlyReset,"Monthly Reset","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Sts_YearlyReset,"Yearly Reset","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,U_WallClock:AOI,Wrk_SetDateTime,"","DINT[7]","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,U_WallClock:AOI,Wrk_GetDateTime,"Result of GSV to Wallclocktime -- input to Day of Week calculation","DINT[7]","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
COMMENT,U_WallClock:AOI,Wrk_GetDateTime,"Year",,"Wrk_GetDateTime[0]"
COMMENT,U_WallClock:AOI,Wrk_GetDateTime,"Month",,"Wrk_GetDateTime[1]"
COMMENT,U_WallClock:AOI,Wrk_GetDateTime,"Day",,"Wrk_GetDateTime[2]"
COMMENT,U_WallClock:AOI,Wrk_GetDateTime,"Hour",,"Wrk_GetDateTime[3]"
COMMENT,U_WallClock:AOI,Wrk_GetDateTime,"Minute",,"Wrk_GetDateTime[4]"
COMMENT,U_WallClock:AOI,Wrk_GetDateTime,"Second",,"Wrk_GetDateTime[5]"
COMMENT,U_WallClock:AOI,Wrk_GetDateTime,"Microsecond",,"Wrk_GetDateTime[6]"
TAG,U_WallClock:AOI,Wrk_G,"Function of Year and Month, used to calculate Day of Week","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,U_WallClock:AOI,Wrk_F,"Function of Month, used to calculate Day of Week","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,U_WallClock:AOI,Wrk_DayONS,"One-Shot for daily pulse output","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,U_WallClock:AOI,Wrk_HourONS,"One-Shot for hourly pulse output","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,U_WallClock:AOI,Wrk_MonthONS,"One-Shot for monthly pulse output","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,U_WallClock:AOI,Wrk_YearONS,"One-Shot for yearly pulse output","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"BarScreen01","A01_BarScreen01_LDR","===============================================================$NDEVICE MOTOR$N===============================================================$NThis rung actually monitors and controls the Device motor.$NMapping inputs:  Run Feedback$NHand Mode selection","OTE(Equip_IOFault)","0"
RCOMMENT,"BarScreen01","A01_BarScreen01_LDR","===============================================================$NRESET$N===============================================================$NDEVICE RESET$NResets all alarms, interlocks and faults for the P1 motor and related signals. $NIt also receives and fo","OTE(Wrk_ResetReqd)","2"
RCOMMENT,"BarScreen01","A03_BarScreen01_Auto","===============================================================$NBar Screen Auto$N===============================================================$NRepeat Cycle Timer & Hi Differential Alarm Runs the Equipment","RepeatCycTmr(Equip_RCT)","0"
RCOMMENT,"BarScreen01","Main","===============================================================$NSUB ROUTINE$N===============================================================","JSR(A04_DiffLevel,0)","0"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"BarScreen02","A01_BarScreen02_LDR","===============================================================$NDEVICE MOTOR$N===============================================================$NThis rung actually monitors and controls the Device motor.$NMapping inputs:  Run Feedback$NHand Mode selection","OTE(Equip_IOFault)","0"
RCOMMENT,"BarScreen02","A01_BarScreen02_LDR","===============================================================$NRESET$N===============================================================$NDEVICE RESET$NResets all alarms, interlocks and faults for the P1 motor and related signals. $NIt also receives and fo","OTE(Wrk_ResetReqd)","2"
RCOMMENT,"BarScreen02","A03_BarScreen02_Auto","===============================================================$NBar Screen Auto$N===============================================================$NRepeat Cycle Timer & Hi Differential Alarm Runs the Equipment","RepeatCycTmr(Equip_RCT)","0"
RCOMMENT,"BarScreen02","Main","===============================================================$NSUB ROUTINE$N===============================================================","JSR(A04_DiffLevel,0)","0"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"GritTank01","A01_GritTankDrive_LDR","===============================================================$NDEVICE MOTOR$N===============================================================$NThis rung actually monitors and controls the Device motor.$NMapping inputs:  Run Feedback$NHand Mode selection","OTE(Equip_IOFault)","0"
RCOMMENT,"GritTank01","A01_GritTankDrive_LDR","===============================================================$NRESET$N===============================================================$NDEVICE RESET$NResets all alarms, interlocks and faults for the P1 motor and related signals. $NIt also receives and fo","OTE(Wrk_ResetReqd)","2"
RCOMMENT,"GritTank01","A03_GritTankDrive_Auto","===============================================================$NBar Screen Auto$N===============================================================$NRepeat Cycle Timer & Hi Differential Alarm Runs the Equipment","RepeatCycTmr(Equip_RCT)","0"
RCOMMENT,"GritTank01","Main","===============================================================$NSUB ROUTINE$N===============================================================","JSR(A04_GritTankFlow,0)","0"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"MainProgram","Main","===============================================================$NPUMP  SIMULATION$N===============================================================$NGlobal on/off inputs simulation","OTL(PLC_Simulation)","0"
RCOMMENT,"MainProgram","Main","===============================================================$NWALL CLOCK$N==============================================================","WallClock(PLC_WallClock)","1"
RCOMMENT,"MainProgram","Main","===============================================================$NHEART BEAT$N==============================================================","Heartbeat(PLC_Heartbeat)","2"
RCOMMENT,"MainProgram","Main","===============================================================$NPLC COMMUNICATION FAIL$N==============================================================$NUse if plc is not using produce/consume","CommFail(PLC_CommFail)","3"
RCOMMENT,"MainProgram","Main","===============================================================$NSUB ROUTINE$N===============================================================","JSR(A04_MiscAnalogOutputs,0)","4"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"Wetwell","Main","===============================================================$NSUB ROUTINE$N===============================================================","JSR(A01_Wetwell,0)","0"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
remark,"Comments for Program (P_AIn:AOI) Routine (EnableInFalse) not exported: source is protected"
remark,"Comments for Program (P_AIn:AOI) Routine (Logic) not exported: source is protected"
remark,"Comments for Program (P_AIn:AOI) Routine (Prescan) not exported: source is protected"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
remark,"Comments for Program (P_Alarm:AOI) Routine (EnableInFalse) not exported: source is protected"
remark,"Comments for Program (P_Alarm:AOI) Routine (Logic) not exported: source is protected"
remark,"Comments for Program (P_Alarm:AOI) Routine (Prescan) not exported: source is protected"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
remark,"Comments for Program (P_DIn:AOI) Routine (EnableInFalse) not exported: source is protected"
remark,"Comments for Program (P_DIn:AOI) Routine (Logic) not exported: source is protected"
remark,"Comments for Program (P_DIn:AOI) Routine (Prescan) not exported: source is protected"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
remark,"Comments for Program (P_Intlk:AOI) Routine (EnableInFalse) not exported: source is protected"
remark,"Comments for Program (P_Intlk:AOI) Routine (Logic) not exported: source is protected"
remark,"Comments for Program (P_Intlk:AOI) Routine (Prescan) not exported: source is protected"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
remark,"Comments for Program (P_Mode:AOI) Routine (EnableInFalse) not exported: source is protected"
remark,"Comments for Program (P_Mode:AOI) Routine (Logic) not exported: source is protected"
remark,"Comments for Program (P_Mode:AOI) Routine (Prescan) not exported: source is protected"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
remark,"Comments for Program (P_Motor:AOI) Routine (EnableInFalse) not exported: source is protected"
remark,"Comments for Program (P_Motor:AOI) Routine (Logic) not exported: source is protected"
remark,"Comments for Program (P_Motor:AOI) Routine (Prescan) not exported: source is protected"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
remark,"Comments for Program (P_Perm:AOI) Routine (EnableInFalse) not exported: source is protected"
remark,"Comments for Program (P_Perm:AOI) Routine (Logic) not exported: source is protected"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"P_Reset:AOI","EnableInFalse","============================================================$NP_Reset:  RESET Enable In False Handling$N============================================================$NOn Enable In False:$N$NClear the bit used to detect Enable In transition from False to Tr","OTU(Wrk_EnableInONS)","0"
RCOMMENT,"P_Reset:AOI","EnableInFalse","============================================================$NCONFIGURATION$N============================================================$NThis rung takes the configured Output Hold time and calculates$Nthe appropriate hold timer preset.  A negative prese","OTE(Sts_Err)","1"
RCOMMENT,"P_Reset:AOI","EnableInFalse","============================================================$NCOMMAND AND INPUT HANDLING$N============================================================$NThis rung processes received Reset Commands from:$N$N1.  Higher-level strategies via Program Command$N2","TOF(Wrk_HoldT,?,?)","2"
RCOMMENT,"P_Reset:AOI","EnableInFalse","The Hold Timer $Qdone$Q bit comes on immediately and stays on$Nfor the hold time.  If it, or any held-on reset initiator, is TRUE, set the Output.","OTE(Out_Reset)","3"
RCOMMENT,"P_Reset:AOI","EnableInFalse","If an associated object is ready to be reset, set the Inp_Reset pin on this object.$NThen, if something needs reset, and we$'re not already resetting it, enable this$Nobject$'s Reset Pushbutton.$N$N(If this function is not wired, the button will generally be enabled.$NIf this function IS wired, it is suggested to make the enabled Reset button$NFLASH to alert the operator that a reset is required!)","OTE(Rdy_Reset)","4"
RCOMMENT,"P_Reset:AOI","Logic","============================================================$NP_Reset:  PROCESS -- RESET$N============================================================$NRevision 0.6-01 FOR TEST:  2009-03-16, DER$NAligned name, description and local STRING values, sizes, a","OTE(Sts_Err)","0"
RCOMMENT,"P_Reset:AOI","Logic","============================================================$NCOMMAND AND INPUT HANDLING$N============================================================$NThis rung processes received Reset Commands from:$N$N1.  Higher-level strategies via Program Command$N2","TOF(Wrk_HoldT,?,?)","1"
RCOMMENT,"P_Reset:AOI","Logic","The Hold Timer $Qdone$Q bit comes on immediately and stays on$Nfor the hold time.  If it, or any held-on reset initiator, is TRUE, set the Output.","OTE(Out_Reset)","2"
RCOMMENT,"P_Reset:AOI","Logic","If an associated object is ready to be reset, set the Inp_Reset pin on this object.$NThen, if something needs reset, and we$'re not already resetting it, enable this$Nobject$'s Reset Pushbutton.$N$N(If this function is not wired, the button will generally be enabled.$NIf this function IS wired, it is suggested to make the enabled Reset button$NFLASH to alert the operator that a reset is required!)","OTE(Rdy_Reset)","3"
RCOMMENT,"P_Reset:AOI","Prescan","============================================================$NPRESCAN (POWERUP) HANDLING$N============================================================$NOn Prescan, clear any $Qlurking$Q Commands.","OTU(PCmd_Reset)","0"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"P_ResInh:AOI","EnableInFalse","============================================================$NP_ResInh:  RESTART INHIBIT Enable In False Handling$N============================================================$NTreat Enable In False (False Rung) as if$N Inp_Starting = 0, Inp_Running = 0 a","MOV(3,Wrk_State)","0"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","===========================================================================$NCONFIGURATION$N===========================================================================$N$NThis rung gets Configuration data.  Timer Configurations are scaled from seconds to$Nmilliseconds and stored in the appropriate timer presets.$NIf a calculated timer preset is negative, it will fault the controller;$Noverwrite it and flag the configuration as bad.","MOV(Wrk_FirstColdStartT.PRE,Wrk_SecondColdStartT.PRE)","1"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","====================================================================================$NRESTART INHIBIT STATE MACHINE$N====================================================================================$N$NThe following code implements the State Machine lo","JMP(S12)","2"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S01:  COLD MOTOR READY TO START  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the motor is cold, but ready to start.  $NThe time since the last cold start attempt is accumulated.$N$NWhen the motor is started:$NIf it has been at least Last Cold Start minutes since the last attempt was made to start the motor, $Nthe motor is still considered cold, it has had enough time to cool off.  $NIf it has been less than Last Cold Start minutes since the last attempt was made to start the motor, $Nthe motor is considered hot due to multiple re-starts in too short a time period.  $N","OTL(Wrk_Ready)","3"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S02:  COLD MOTOR STARTING  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, a Cold motor start attempt has been made.$NThe time since the last Cold start attempt is accumulated.   $NThe motor must confirm that it is running within RestartInhibit.Wrk_StartCheckTime minutes.  $NIf it does, the state will change to S3: Cold Motor Running$NIf it does not start properly within the allowable time, the state will change to either S4: 1st Failed Cold Restart, or S5: Subsequent Cold Failed Restart.$N","OTL(Wrk_Ready)","5"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S03:  COLD MOTOR RUNNING$N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, $NThe time since the last cold start attempt is accumulated.  $NIf the cold motor is turned off, the state will change back to S1: Ready to Start, Cold.","OTL(Wrk_Ready)","8"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S04:  COLD MOTOR FIRST FAILURE TO START  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Cold motor has failed to start for the first time since it was last running properly.$NThe time since the last cold start attempt is accumulated.   $NThe state is changed back to S1: Ready to Start, Cold when RestartInhibit.Wrk_FirstFailCold timer elapses.","SUB(Wrk_FirstFailColdT.PRE,Wrk_FirstFailColdT.ACC,Wrk_mSecUntilReady)","10"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S05:  COLD MOTOR SUBSEQUENT FAILURE TO START  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Cold motor has failed to start at least twice in a row since it was last running properly.$NThe time since the last cold start attempt is accumulated.   $NThe state is changed back to S1: Ready to Start, Cold when RestartInhibit.Wrk_SubsFailCold timer elapses.","SUB(Wrk_SubsFailColdT.PRE,Wrk_SubsFailColdT.ACC,Wrk_mSecUntilReady)","13"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S06:  COLD MOTOR STARTING$N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, a Hot motor start attempt has been made.$NThe motor must confirm that it is running within RestartInhibit.Wrk_StartCheckTime minutes.  $NIf it does, the state will change to S7: Hot Motor Running < 4 Hours.$NIf it does not start properly within the allowable time, the state will change to either S10: 1st Failed Hot Restart, or S11: Subsequent Hot Failed Restart.","OTL(Wrk_Ready)","16"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S07:  HOT MOTOR RUNNING  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Hot motor has been started. $NIf it is stopped before RestartInhibit.Wrk_HotRestartOk elapses,$Nit must wait RestartInhibit.Wrk_RestartHot minutes before it can be restarted  (S08).$NIf it is stopped after RestartInhibit.Wrk_HotRestartOk elapses, it can be restarted immediately (S09).","RTO(Wrk_HotRestartOKT,?,?)","19"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S08:  HOT MOTOR SHORT RUN THEN STOPPED$N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Hot motor has been stopped before RestartInhibit.Wrk_HotRestartOk elapsed.$NIt must wait RestartInhibit.Wrk_RestartHot minutes before it can be restarted  (S12).","SUB(Wrk_RestartHotT.PRE,Wrk_RestartHotT.ACC,Wrk_mSecUntilReady)","21"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S09:  HOT MOTOR LONG RUN COOLED  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Hot motor has been running long enough to have cooled.$NSince it is stopped (Enable In is false), it can be restarted immediately  (S1).$N","OTL(Wrk_Ready)","24"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S10:  HOT MOTOR FIRST FAILURE TO START $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Hot motor has failed to start for the first time since it was last running properly.$NThe time since the Hot motor stopped is accumulated.   Once it reaches the First Hot Fail time,$Nit can be restarted  (S12).","SUB(Wrk_FirstFailHotT.PRE,Wrk_FirstFailHotT.ACC,Wrk_mSecUntilReady)","26"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S11:  HOT MOTOR SUBSEQUENT FAILURE TO START$N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Hot motor has failed to start at least twice in a row since it was last running properly.$NThe time since the Hot motor stopped is accumulated.   Once it reaches the Subsequent Hot Fail Time,$Nit can be restarted  (S12).","SUB(Wrk_SubsFailHotT.PRE,Wrk_SubsFailHotT.ACC,Wrk_mSecUntilReady)","29"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S12:  HOT MOTOR READY TO START$N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the motor is Hot, but ready to start.  $NThe time since the Hot motor stopped is accumulated.   $NRestartInhibit.Wrk_LastColdStart is run so it is properly timed out when changing to S1: Ready to Start, Cold.  $NIf 16 hours have elapsed since the Hot motor was running, the state will be changed to S1: Ready to Start, Cold.  $NThis reflects the fact that the motor has had time to cool off.  $NOtherwise, the logic waits for a Start attempt to change the state to S6: Start Check, Hot.","RTO(Wrk_HotToColdT,?,?)","32"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","This is common return point for ALL states when Enable In is FALSE.$N$N====================================================================================$NSTART TIMERS$N====================================================================================$N$NThese two rungs run the cold start timers used in the $QThree Starts$Q logic when NOT in State 1.$N","TON(Wrk_SecondColdStartT,?,?)","35"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","====================================================================================$NVALUES$N====================================================================================$N$NThis rung makes sure that the RestartInhibit.Wrk_mSecsUntilReady value is","CLR(Wrk_mSecUntilReady)","37"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","This rung takes the time remaining until the motor is ready to start (in milliseconds), converts it$Nto seconds, then reports it in  minutes : seconds format for display on the HMI or LAWSDAC.","MOD(Wrk_SecUntilReady,60,Val_SecToReady)","38"
RCOMMENT,"P_ResInh:AOI","EnableInFalse","Finally, copy out the internal State number so the HMI can display an animated state diagram.","MOV(Wrk_State,Val_State)","39"
RCOMMENT,"P_ResInh:AOI","Logic","============================================================$NP_ResInh:  PROCESS -- RESTART INHIBIT$N============================================================$NRevision 0.12-02 FOR TEST:  2009-03-16, DER$NAligned name, description and local STRING valu","MOV(3,Wrk_State)","0"
RCOMMENT,"P_ResInh:AOI","Logic","===========================================================================$NCONFIGURATION$N===========================================================================$N$NThis rung gets Configuration data.  Timer Configurations are scaled from seconds to$Nmilliseconds and stored in the appropriate timer presets.$NIf a calculated timer preset is negative, it will fault the controller;$Noverwrite it and flag the configuration as bad.","MOV(Wrk_FirstColdStartT.PRE,Wrk_SecondColdStartT.PRE)","1"
RCOMMENT,"P_ResInh:AOI","Logic","====================================================================================$NRESTART INHIBIT STATE MACHINE$N====================================================================================$N$NThe following code implements the State Machine lo","JMP(S12)","2"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S01:  COLD MOTOR READY TO START  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the motor is cold, but ready to start.  $NThe time since the last cold start attempt is accumulated.$N$NWhen the motor is started:$NIf it has been at least Last Cold Start minutes since the last attempt was made to start the motor, $Nthe motor is still considered cold, it has had enough time to cool off.  $NIf it has been less than Last Cold Start minutes since the last attempt was made to start the motor, $Nthe motor is considered hot due to multiple re-starts in too short a time period.","OTL(Wrk_Ready)","3"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S02:  COLD MOTOR STARTING  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, a Cold motor start attempt has been made.$NThe time since the last Cold start attempt is accumulated.   $NThe motor must confirm that it is running within RestartInhibit.Wrk_StartCheckTime minutes.  $NIf it does, the state will change to S3: Cold Motor Running$NIf it does not start properly within the allowable time, the state will change to either S4: 1st Failed Cold Restart, or S5: Subsequent Cold Failed Restart.","OTL(Wrk_Ready)","9"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S03:  COLD MOTOR RUNNING$N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, $NThe time since the last cold start attempt is accumulated.  $NIf the cold motor is turned off, the state will change back to S1: Ready to Start, Cold.","OTL(Wrk_Ready)","13"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S04:  COLD MOTOR FIRST FAILURE TO START  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Cold motor has failed to start for the first time since it was last running properly.$NThe time since the last cold start attempt is accumulated.   $NThe state is changed back to S1: Ready to Start, Cold when RestartInhibit.Wrk_FirstFailCold timer elapses.","SUB(Wrk_FirstFailColdT.PRE,Wrk_FirstFailColdT.ACC,Wrk_mSecUntilReady)","16"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S05:  COLD MOTOR SUBSEQUENT FAILURE TO START  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Cold motor has failed to start at least twice in a row since it was last running properly.$NThe time since the last cold start attempt is accumulated.   $NThe state is changed back to S1: Ready to Start, Cold when RestartInhibit.Wrk_SubsFailCold timer elapses.","SUB(Wrk_SubsFailColdT.PRE,Wrk_SubsFailColdT.ACC,Wrk_mSecUntilReady)","19"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S06:  HOT MOTOR STARTING$N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, a Hot motor start attempt has been made.$NThe motor must confirm that it is running within RestartInhibit.Wrk_StartCheckTime minutes.  $NIf it does, the state will change to S7: Hot Motor Running < 4 Hours.$NIf it does not start properly within the allowable time, the state will change to either S10: 1st Failed Hot Restart, or S11: Subsequent Hot Failed Restart.","OTL(Wrk_Ready)","22"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S07:  HOT MOTOR RUNNING  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Hot motor has been started. $NIf it is stopped before RestartInhibit.Wrk_HotRestartOk elapses,$Nit must wait RestartInhibit.Wrk_RestartHot minutes before it can be restarted  (S08).$NIf it is stopped after RestartInhibit.Wrk_HotRestartOk elapses, it can be restarted immediately (S09).","RTO(Wrk_HotRestartOKT,?,?)","26"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S08:  HOT MOTOR SHORT RUN THEN STOPPED$N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Hot motor has been stopped before RestartInhibit.Wrk_HotRestartOk elapsed.$NIt must wait RestartInhibit.Wrk_RestartHot minutes before it can be restarted  (S12).","SUB(Wrk_RestartHotT.PRE,Wrk_RestartHotT.ACC,Wrk_mSecUntilReady)","30"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S09:  HOT MOTOR LONG RUN COOLED  $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Hot motor has been running long enough to have cooled.$NWhen it is eventually stopped, it can be restarted immediately as a cold motor  (S1).","OTL(Wrk_Ready)","33"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S10:  HOT MOTOR FIRST FAILURE TO START $N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Hot motor has failed to start for the first time since it was last running properly.$NThe time since the Hot motor stopped is accumulated.   Once it reaches the First Hot Fail time,$Nit can be restarted  (S12).","SUB(Wrk_FirstFailHotT.PRE,Wrk_FirstFailHotT.ACC,Wrk_mSecUntilReady)","36"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S11:  HOT MOTOR SUBSEQUENT FAILURE TO START$N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the Hot motor has failed to start at least twice in a row since it was last running properly.$NThe time since the Hot motor stopped is accumulated.   Once it reaches the Subsequent Hot Fail Time,$Nit can be restarted  (S12).","SUB(Wrk_SubsFailHotT.PRE,Wrk_SubsFailHotT.ACC,Wrk_mSecUntilReady)","39"
RCOMMENT,"P_ResInh:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NState S12:  HOT MOTOR READY TO START$N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$N$NIn this state, the motor is Hot, but ready to start.  $NThe time since the Hot motor stopped is accumulated.   $NRestartInhibit.Wrk_LastColdStart is run so it is properly timed out when changing to S1: Ready to Start, Cold.  $NIf 16 hours have elapsed since the Hot motor was running, the state will be changed to S1: Ready to Start, Cold.  $NThis reflects the fact that the motor has had time to cool off.  $NOtherwise, the logic waits for a Start attempt to change the state to S6: Start Check, Hot.","RTO(Wrk_HotToColdT,?,?)","42"
RCOMMENT,"P_ResInh:AOI","Logic","This is common return point for all states except State 1.$N$N====================================================================================$NSTART TIMERS$N====================================================================================$N$NThese two rungs run the cold start timers used in the $QThree Starts$Q logic when NOT in State 1.","TON(Wrk_SecondColdStartT,?,?)","46"
RCOMMENT,"P_ResInh:AOI","Logic","This code is common for ALL states.$N$N====================================================================================$NVALUES$N====================================================================================$N$NThis rung makes sure that the RestartInhibit.Wrk_mSecsUntilReady value is greater than or equal to zero.$NIf it is not, the register value will be cleared.","CLR(Wrk_mSecUntilReady)","48"
RCOMMENT,"P_ResInh:AOI","Logic","This rung takes the time remaining until the motor is ready to start (in milliseconds), converts it$Nto seconds, then reports it in  minutes : seconds format for display on the HMI or LAWSDAC.","MOD(Wrk_SecUntilReady,60,Val_SecToReady)","49"
RCOMMENT,"P_ResInh:AOI","Logic","Finally, copy out the internal State number so the HMI can display an animated state diagram.","MOV(Wrk_State,Val_State)","50"
RCOMMENT,"P_ResInh:AOI","Prescan","============================================================$NPRESCAN / POWER UP$N============================================================$NOn Prescan, the various timers are reset (all are retentive), and the State$NMachine is set to:$N*  State S01","MOV(3,Wrk_State)","0"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"P_RunTime:AOI","EnableInFalse","============================================================$NENABLE-IN FALSE HANDLING$N============================================================$NEnable In False is treated the same as $QMotor Stopped$Q --$NCommands are still processed, $Ntotal run ti","CLR(Wrk_TotTenths)","0"
RCOMMENT,"P_RunTime:AOI","EnableInFalse","PCmd_ClearStarts: Program Command to Clear Count of Starts$NMCmd_ClearStarts: Maintenance Command to Clear Count of Starts","RES(Wrk_Starts)","1"
RCOMMENT,"P_RunTime:AOI","EnableInFalse","PCmd_ClearMaxHrs: Program Command to Clear Maximum Single Run Hours$NMCmd_ClearMaxHrs: Maintenance Command to Clear Maximum Single Run Hours","CLR(Val_MaxRunHrs)","2"
RCOMMENT,"P_RunTime:AOI","EnableInFalse","============================================================$NENABLE-IN FALSE HANDLING$N============================================================$NEnable In False is treated the same as $QMotor Stopped$Q --$NTotal run time is held (RTO), the Starts cou","TON(Wrk_CurRunT,?,?)","3"
RCOMMENT,"P_RunTime:AOI","EnableInFalse","============================================================$NREPORT VALUES$N============================================================$N$NThe number of starts is directly reported as an integer Value.","MOV(Wrk_Starts.ACC,Val_Starts)","4"
RCOMMENT,"P_RunTime:AOI","EnableInFalse","The current hours working register is cleared, but the Value is left$Nin place for display until the next run begins.$N$NNOTE: The Maximum Run Hours (high-water of Current Run Hours)$Nis also left in place.","CLR(Wrk_CurHours)","5"
RCOMMENT,"P_RunTime:AOI","EnableInFalse","The Total Running Time is reported as a REAL number of Hours.$N(This will always be in $Qcompleted tenths$Q of an hour, like a mechanical hours counter.)","MUL(Wrk_TotTenths,0.1,Val_TotRunHrs)","6"
RCOMMENT,"P_RunTime:AOI","Logic","============================================================$NP_RunTime:  PROCESS -- RUN TIME AND STARTS$N============================================================$NRevision 0.7-04 FOR TEST:  2009-03-16, DER$NAligned name, description and local STRING","CLR(Wrk_TotTenths)","0"
RCOMMENT,"P_RunTime:AOI","Logic","PCmd_ClearStarts: Program Command to Clear Count of Starts$NMCmd_ClearStarts: Maintenance Command to Clear Count of Starts","RES(Wrk_Starts)","1"
RCOMMENT,"P_RunTime:AOI","Logic","PCmd_ClearMaxHrs: Program Command to Clear Maximum Single Run Hours$NMCmd_ClearMaxHrs: Maintenance Command to Clear Maximum Single Run Hours","CLR(Wrk_MaxHours)","2"
RCOMMENT,"P_RunTime:AOI","Logic","Clear current run hours if stopped.$NNOTE: Val_CurHours is maintained for display!","CLR(Wrk_CurHours)","3"
RCOMMENT,"P_RunTime:AOI","Logic","============================================================$NACCUMULATE TIMES / STARTS$N============================================================$NThis rung runs the Total (retentive) and Maximum (non-retentive) Run Time$Ntimers and increments the Num","TON(Wrk_CurRunT,?,?)","4"
RCOMMENT,"P_RunTime:AOI","Logic","Note that an RTO timer can only time up to 2G milliseconds, about 28 days.$NA pump will accumulate much more run time.  So the RTO is used to time 1/10 hour,$Nwhich is then added to a count of $QTenths of Hours$Q.  Then the RTO accumulator is reduced by 1/10 hour.$N(The timer doesn$'t lose time because it is not reset and keeps running.)","SUB(Wrk_TotRunT.ACC,360000,Wrk_TotRunT.ACC)","5"
RCOMMENT,"P_RunTime:AOI","Logic","The Maximum Run Time TON is treated the same way.  A motor/device$Ncould potentially run continuously for more than 28 days, so an integer count$Nof (up to 2 billion) hours (almost 245,000 years!) is used.  Should be enough...","SUB(Wrk_CurRunT.ACC,3600000,Wrk_CurRunT.ACC)","6"
RCOMMENT,"P_RunTime:AOI","Logic","============================================================$NREPORT VALUES$N============================================================$N$NThe number of starts is directly reported as an integer Value.","MOV(Wrk_Starts.ACC,Val_Starts)","7"
RCOMMENT,"P_RunTime:AOI","Logic","The Current (continuous) Run Time is reported as a REAL number of Hours.$NThis number includes all fractional hours (timer accumulator / 3,600,000 ms/hr),$Nnot just completed tenths like the total run time below.","CPT(Val_CurRunHrs,Wrk_CurHours+(Wrk_CurRunT.ACC/3600000.0))","8"
RCOMMENT,"P_RunTime:AOI","Logic","If the Current Run Time exceeds the stored Maximum Run Time,$Nupdate the Maximum.$NRegardless, report the Maximum Run Time.$N$NNOTE:  The Wrk_MaxHours register is required to prevent writes to Val_MaxHours$Nfrom improperly overwriting this object$'s state.$N","MOV(Wrk_MaxHours,Val_MaxRunHrs)","9"
RCOMMENT,"P_RunTime:AOI","Logic","The Total Running Time is reported as a REAL number of Hours.$N(This will always be in $Qcompleted tenths$Q of an hour, like a mechanical hours counter.)","MUL(Wrk_TotTenths,0.1,Val_TotRunHrs)","10"
RCOMMENT,"P_RunTime:AOI","Prescan","============================================================$NPOWER UP / PRESCAN HANDLING$N============================================================$NTotal run time, Maximum run time and starts count are retained through$Na power cycle.  Current run ti","CLR(Wrk_CurHours)","0"
RCOMMENT,"P_RunTime:AOI","Prescan","On Prescan, clear any $Qlurking$Q Commands.","OTU(PCmd_ClearStarts)","1"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"U_CommFail:AOI","Logic","Timer Map","MUL(CFG_DelayTimerSec,1000,HeartBeatDelayTimerOff.PRE)","0"
RCOMMENT,"U_CommFail:AOI","Logic","Heartbeat","TON(HeartBeatDelayTimerOff,?,?)","1"
RCOMMENT,"U_CommFail:AOI","Logic","Alarm","OTE(Sts_CommFail)","2"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"U_RepeatCycTmr:AOI","Logic","===============================================================$NRepeat Cycle Timer$N===============================================================$NA Repeat Cycle Timer (RPC) runs equipment with an On time preset and Off time preset that repeats.   Time","NOP()","0"
RCOMMENT,"U_RepeatCycTmr:AOI","Logic","Configure timer limits","CPT(TimerHighLimitSec,2147483647 / 1000)","1"
RCOMMENT,"U_RepeatCycTmr:AOI","Logic","On Time Low Limit Check","MOV(Val_OnTimeLoLimit,Oset_OnTimePreset)","2"
RCOMMENT,"U_RepeatCycTmr:AOI","Logic","On time Hi Limit check","MOV(Val_OnTimeHiLimit,Oset_OnTimePreset)","3"
RCOMMENT,"U_RepeatCycTmr:AOI","Logic","On Time HMI Preset Setpoint and Elapsed Indication","DIV(ONTimer.ACC,60000,Val_OnTimeElapsed)","4"
RCOMMENT,"U_RepeatCycTmr:AOI","Logic","Off Time Low Limit Check","MOV(Val_OffTimeLoLimit,Oset_OffTimePreset)","5"
RCOMMENT,"U_RepeatCycTmr:AOI","Logic","Off time Hi Limit check","MOV(Val_OffTimeHiLimit,Oset_OffTimePreset)","6"
RCOMMENT,"U_RepeatCycTmr:AOI","Logic","Off Time  for the HMI Preset Setpoint and Elapsed Indication","DIV(OFFTimer.ACC,60000,Val_OffTimeElapsed)","7"
RCOMMENT,"U_RepeatCycTmr:AOI","Logic","Normal Start Cycle","TON(ONTimer,?,?)","8"
RCOMMENT,"U_RepeatCycTmr:AOI","Logic","Normal End Cycle","TON(OFFTimer,?,?)","10"
RCOMMENT,"U_RepeatCycTmr:AOI","Logic","Reset both timers from OIC and intiate an ON Cycle","RES(OFFTimer)","11"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"U_WallClock:AOI","Logic","============================================================$NU_WallClock:  CONTROLLER CLOCK HANDLER$N============================================================$NModified 2009-03-24, DER$NSimplified Day of Week calculation, removed unused parameters$N==","MOV(0,Wrk_SetDateTime[6])","0"
RCOMMENT,"U_WallClock:AOI","Logic","**TetraTech**$Nuse local since date time already has time zone info","SSV(WALLCLOCKTIME,,LocalDateTime,Wrk_SetDateTime[0])","1"
RCOMMENT,"U_WallClock:AOI","Logic","============================================================$NGET CURRENT DATE / TIME$N============================================================$N$NGet the Controller$'s real time clock broken down by Year, month, day...seconds$Nand store in a tag so t","MOV(Wrk_GetDateTime[5],Val_CurrentSecond)","2"
RCOMMENT,"U_WallClock:AOI","Logic","============================================================$NCALCULATE THE DAY OF THE WEEK$N============================================================$NThis version of the day of the week is based on:$N$Nhttp://alcor.concordia.ca/~gpkatch/gdate-algorit","CPT(Wrk_G,Wrk_GetDateTime[0]-(Wrk_F/10))","3"
RCOMMENT,"U_WallClock:AOI","Logic","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NThis rung calculates the remainder of the algorithm.$N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$NThe $QDay Number$Q is calculated, and the MOD 7$N(remainder after division by 7) is stored as the Day of the Week.$N$NNOTE:  The $Q+2$Q offset aligns Val_DayOfWeek as:$N0=Sun, 1=Mon, 2=Tue, 3=Wed, 4=Thu, 5=Fri, 6=Sat","CPT(Val_DayOfWeek,(365*Wrk_G+(Wrk_G/4)-(Wrk_G/100)+(Wrk_G/400)+((Wrk_F*306+5)/10)+Wrk_GetDateTime[2]+2)MOD 7)","4"
RCOMMENT,"U_WallClock:AOI","Logic","============================================================$NRESET PULSE OUTPUTS$N============================================================$N$NThese rungs generate one-shot outputs once hourly, daily, monthly and yearly.","OTE(Sts_HourlyReset)","5"
