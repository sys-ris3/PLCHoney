remark,"CSV-Import-Export"
remark,"Date = Fri Jul 10 12:42:36 2020"
remark,"Version = RSLogix 5000 v20.05"
remark,"Owner = "
remark,"Company = Microsoft"
0.3
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,,Basin1FlushDone,"Basin #1l Flush Done","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1FlushEnd,"Basin #1 Flush Valves Complete","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1FlushSelected,"Basin #1 Flush Selected","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Flush_StartPB,"Start Basin #1 Flush PB From HMI","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Flush_StopPB,"Stop Basin #1 Flush PB From HMI","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Fwv1_Perm,"","P_Perm","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Fwv1_Reset,"","P_Reset","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Fwv1_Valve,"Basin #1 FCV-1","P_ValveSO","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Fwv20_Perm,"","P_Perm","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Fwv20_Valve,"Basin #1 FFV-1","P_ValveMO","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Fwv2_Perm,"","P_Perm","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Fwv2_Reset,"","P_Reset","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Fwv2_Valve,"Basin #1 FCV-2","P_ValveSO","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Fwv3_Perm,"","P_Perm","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Fwv3_Reset,"","P_Reset","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Fwv3_Valve,"Basin #1 FCV-3","P_ValveSO","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Fwv4_Perm,"","P_Perm","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Fwv4_Reset,"","P_Reset","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Fwv4_Valve,"Basin #1 FCV-4","P_ValveSO","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Fwv5_Perm,"","P_Perm","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Fwv5_Reset,"","P_Reset","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Fwv5_Valve,"Basin #1 FCV-5","P_ValveSO","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Fwv6_Perm,"","P_Perm","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Fwv6_Reset,"","P_Reset","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Fwv6_Valve,"Basin #1 FCV-6","P_ValveSO","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Fwv7_Perm,"","P_Perm","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1Fwv7_Valve,"Basin #1 FCV-7","P_ValveSO","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1ValvesClosed,"Basin #1 Flushing Valves Closed","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1_TimeSinceLastFlush_Display1,"","REAL","","(RADIX := Float, Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1_TimeSinceLastFlush_DisplayMin,"","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1_TimeSinceLastFlush_DisplayTemp,"","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1_TimeSinceLastFlush_Display_Days,"","REAL","","(RADIX := Float, Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1_TimeSinceLastFlush_Display_Hours,"","REAL","","(RADIX := Float, Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin1_TimeSinceLastFlush_TM,"","TIMER","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin2FlushEnd,"Basin #2 Flush Valves Complete","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin2FlushSelected,"Basin #2 Flush Selected","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,Basin2ValvesClosed,"Basin #2 Flushing Valves Closed","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,Bob,"","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,BobsArray,"","DINT[10]","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,Flush_Seqtimer,"","REAL","","(RADIX := Float, Constant := false, ExternalAccess := Read/Write)"
TAG,,Flush_TimeToGo_TM,"","REAL","","(RADIX := Float, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV1_Closed,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV1_Opened,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV1_OUT,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV1_Remote,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV2_Closed,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV2_Opened,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV2_OUT,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV2_Remote,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV3_Closed,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV3_Opened,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV3_OUT,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV3_Remote,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV4_Closed,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV4_Opened,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV4_OUT,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV4_Remote,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV5_Closed,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV5_Opened,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV5_OUT,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV5_Remote,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV6_Closed,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV6_Opened,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV6_OUT,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV6_Remote,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV7_Closed,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV7_Opened,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV7_OUT,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,FV7_Remote,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,InfluentFlushEnd,"Influent Flush Valves Complete","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,InfluentFlushSelected,"Influent Flush Selected","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,InfluentValvesClosed,"Influentt Flushing Valves Closed","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,StartBasin1Flush,"Start Basin #1 Flush","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,StartBasin2Flush,"Start Basin #2 Flush","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,StartInfluentFlush,"Start Influent Flush","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,State1DisplayOrder,"","DINT[10]","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,State2DisplayOrder,"","DINT[10]","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,State3DisplayOrder,"","DINT[10]","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,Steps,"","BSeqStep[30]","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,Steps2,"","BSeqStep[30]","","(Constant := false, ExternalAccess := Read/Write)"
ALIAS,,Valve1_Reset,"","","Basin1Fwv1_Reset","(ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,Basin1_Fliushing_Control_System,Basin1FlushSelected1,"Basin #1 Flush Selected","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Basin1FlushStart,"Basin #1 Start Flush","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Basin1FlushStop,"Basin #1 Stop Flush","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Basin1Flush_StopPB1,"Stop Basin #1 Flush PB From HMI","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Basin1Fwv1_TransitStall,"Basin #1 FWV #6","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Basin1Fwv2_TransitStall,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Basin1Fwv3_TransitStall,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Basin1Fwv4_TransitStall,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Basin1Fwv5_TransitStall,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Basin1Fwv6_TransitStall,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Basin1Fwv7_TransitStall,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Basin1JumpStep,"Basin #1 Flushing VAlves Jump Step To Next Flush VAlve","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Basin2Fwv20_TransitStall,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,FlushEnd,"Flush System Complete","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,FlushingPumpRunning,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,JumpFWV1,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,JumpFWV2,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,JumpFWV20,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,JumpFWV3,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,JumpFWV4,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,JumpFWV5,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,JumpFWV6,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,JumpFWV7,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Next12,"Flush Next Valve #12","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,NOBasin1FlushControlSys_Faults,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,OneShot1,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,P_ValveSO_01,"","P_ValveSO","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,P_ValveSO_02,"","P_ValveSO","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,StartBasin1Flush1,"Start Basin #1 Flush","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,StartBasin1Flush_PB1,"Flush Basin #1 Start PB From HMI","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,StartBasin2Flush1,"Start Basin #2 Flush","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,StartInfluentFlush1,"Start Influent Flush","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,StopBasin1Flush_PB1,"Flush Basin #1 Stop PB From HMI","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Timer1,"","TIMER","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Timer11,"","TIMER","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Timer12,"Timer 12","TIMER","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Timer13,"Timer 3","TIMER","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Timer2,"","TIMER","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Timer20,"","TIMER","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Timer3,"","TIMER","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Timer4,"","TIMER","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Timer41,"","TIMER","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Timer5,"","TIMER","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Timer6,"Timer 6","TIMER","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Timer7,"Timer 12","TIMER","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve1_Alarm,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve1_Alarm_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve1_Available,"Valve #1 Auto Available","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve1_Closed_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve1_Flush_Done,"Valve #1 Flush Done","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve1_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve1_Local,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve1_Opened_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve1_out_Close,"","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve1_Remote_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve20_Alarm_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve20_Available,"FFV-1 Valve #20 Available","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve20_Closed_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve20_Flush_Done,"FFV-1 Valve #20 Flush Done","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve20_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve20_Local,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve20_Opened_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve20_Remote_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve2_Alarm,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve2_Alarm_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve2_Available,"Valve #2 Available","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve2_Closed_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve2_Flush_Done,"Valve #2 Flush Done","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve2_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve2_Local,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve2_Opened_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve2_out_Close,"","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve2_Remote_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve3_Alarm,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve3_Alarm_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve3_Available,"Valve #3 Available","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve3_Closed_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve3_Flush_Done,"Valve #3 Flush Done","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve3_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve3_Local,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve3_Opened_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve3_out_Close,"","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve3_Remote_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve4_Alarm,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve4_Alarm_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve4_Available,"Valve #4 Available","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve4_Closed_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve4_Flush_Done,"Valve #4 Flush Done","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve4_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve4_Local,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve4_Opened_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve4_out_Close,"","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve4_Remote_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve5_Alarm,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve5_Alarm_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve5_Available,"Valve #5 Available","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve5_Closed_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve5_Flush_Done,"Valve #5 Flush Done","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve5_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve5_Local,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve5_Opened_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve5_out_Close,"","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve5_Remote_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve6_Alarm,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve6_Alarm_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve6_Available,"Valve #6 Available","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve6_Closed_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve6_Flush_Done,"Valve #6 Flush Done","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve6_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve6_Local,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve6_Opened_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve6_out_Close,"","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve6_Remote_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve7_Alarm,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve7_Alarm_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve7_Available,"Valve #7 Available","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve7_Closed_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve7_Flush_Done,"Valve #7 Flush Done","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve7_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve7_Local,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve7_Opened_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve7_out_Close,"","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,Valve7_Remote_IOFault,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,ValvesClosedPermissive,"All Flushing Valves Closed","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv1_Vlv_FullStallFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv1_Vlv_IOFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv1_Vlv_TransitStallFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv20_Vlv_ActuatorFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv20_Vlv_FullStallFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv20_Vlv_IOFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv20_Vlv_TransitStallFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv2_Vlv_FullStallFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv2_Vlv_IOFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv2_Vlv_TransitStallFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv3_Vlv_FullStallFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv3_Vlv_IOFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv3_Vlv_TransitStallFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv4_Vlv_FullStallFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv4_Vlv_IOFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv4_Vlv_TransitStallFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv5_Vlv_FullStallFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv5_Vlv_IOFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv5_Vlv_TransitStallFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv6_Vlv_FullStallFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv6_Vlv_IOFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv6_Vlv_TransitStallFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv7_Vlv_FullStallFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv7_Vlv_IOFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TAG,Basin1_Fliushing_Control_System,ALARM_Basin1Fwv7_Vlv_TransitStallFLT,"","ALARM_DIGITAL","","(ExternalAccess := Read/Write, Severity := 500, MinDurationPRE := 0, ProgTime := ""DT#1969-12-31-16:00:00.000000(GMT-08:00)"", EnableIn := true, In := false, InFault := false, Condition := true, AckRequired := true, Latched := false, ProgAck := false, OperAck := false, ProgReset := false, OperReset := false, ProgSuppress := false, OperSuppress := false, ProgUnsuppress := false, OperUnsuppress := false, ProgDisable := false, OperDisable := false, ProgEnable := false, OperEnable := false, AlarmCountReset := false, UseProgTime := false)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,MainProgram,B2,"","BSeq_Simple_Run","","(Constant := false, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
ALIAS,BSeq_Simple_Run:AOI,Inp_00,"","","Wrk_Inputs.0","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,Inp_01,"","","Wrk_Inputs.1","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,Inp_02,"","","Wrk_Inputs.2","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,Inp_03,"","","Wrk_Inputs.3","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,Inp_04,"","","Wrk_Inputs.4","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,Inp_05,"","","Wrk_Inputs.5","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,Inp_06,"","","Wrk_Inputs.6","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,Inp_07,"","","Wrk_Inputs.7","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,Inp_08,"","","Wrk_Inputs.8","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,Inp_09,"","","Wrk_Inputs.9","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,Inp_10,"","","Wrk_Inputs.10","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,Inp_11,"","","Wrk_Inputs.11","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,Inp_12,"","","Wrk_Inputs.12","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,Inp_13,"","","Wrk_Inputs.13","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,Inp_14,"","","Wrk_Inputs.14","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,Inp_15,"","","Wrk_Inputs.15","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Inp_Scaling,"","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Cfg_PCmdClear,"","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Cfg_HasInp,"Inputs Enabled for Application","DINT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Cfg_UseInp,"Inputs Tested in Application","DINT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Cfg_InpForceMask,"Forceable Inputs","DINT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Cfg_ScaleRealOut,"","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Cfg_StopOutState,"State of Outputs on Stop","DINT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Cfg_StopOutMask,"Which Outputs to Set on Stop","DINT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Cfg_StopOutRealMask,"Which Real Outputs to Write on Stop","SINT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Cfg_BruceMode,"","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,MSet_StepInpForce,"Force Input for Current Step","DINT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,MCmd_StepForce,"Force Transition from Current Step","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,PCmd_Start,"","","Wrk_SMProgCmd.0","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,PCmd_Hold,"","","Wrk_SMProgCmd.6","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,PCmd_Restart,"","","Wrk_SMProgCmd.7","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,PCmd_Stop,"","","Wrk_SMProgCmd.2","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,PCmd_Reset,"","","Wrk_SMProgCmd.3","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,OCmd_Start,"","","Wrk_SMOperCmd.0","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,OCmd_Hold,"","","Wrk_SMOperCmd.6","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,OCmd_Restart,"","","Wrk_SMOperCmd.7","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,OCmd_Stop,"","","Wrk_SMOperCmd.2","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,OCmd_Pause,"","","Wrk_PauseBits.0","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,OCmd_Resume,"","","Wrk_PauseBits.1","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,OCmd_AutoPause,"","","Wrk_PauseBits.2","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,OCmd_CancelPause,"","","Wrk_PauseBits.3","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,OCmd_Reset,"","","Wrk_SMOperCmd.3","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,PCmd_Acq,"","","Mode.PCmd_Acq","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,PCmd_Rel,"","","Mode.PCmd_Rel","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,PCmd_Lock,"","","Mode.PCmd_Lock","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,PCmd_Unlock,"","","Mode.PCmd_Unlock","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,MCmd_Acq,"","","Mode.MCmd_Acq","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,MCmd_Rel,"","","Mode.MCmd_Rel","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,OCmd_AcqLock,"","","Mode.OCmd_AcqLock","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,OCmd_Unlock,"","","Mode.OCmd_Unlock","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Inp_Started,"","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_00,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_01,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_02,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_03,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_04,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_05,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_06,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_07,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_08,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_09,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_10,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_11,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_12,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_13,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_14,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_15,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_Real_00,"","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_Real_01,"","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_Real_02,"","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_Real_03,"","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_Real_04,"","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_Real_05,"","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_Real_06,"","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Out_Real_07,"","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Val_MaxStepIndex,"Ref_Steps Array Size - 1","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Val_CurrStepNum,"Currently Running Step","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,BSeq_Simple_Run:AOI,Val_CurrStepTRemain,"Remaining Time Before Transition is Allowed","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Val_CurrStepT2TO,"Remaining Time Before Step Faults on TO","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Val_StateNum,"","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,Sts_Idle,"","","Wrk_SMState.0","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := true)"
ALIAS,BSeq_Simple_Run:AOI,Sts_Starting,"","","Wrk_SMState.1","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := true)"
ALIAS,BSeq_Simple_Run:AOI,Sts_Running,"","","Wrk_SMState.2","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := true)"
ALIAS,BSeq_Simple_Run:AOI,Sts_Held,"","","Wrk_SMState.5","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,Sts_Complete,"","","Wrk_SMState.3","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := true)"
ALIAS,BSeq_Simple_Run:AOI,Sts_Stopped,"","","Wrk_SMState.4","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := true)"
ALIAS,BSeq_Simple_Run:AOI,Sts_Paused,"","","Wrk_PauseBits.9","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := true)"
ALIAS,BSeq_Simple_Run:AOI,Sts_Maint,"","","Mode.Sts_Maint","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,Sts_Prog,"","","Mode.Sts_Prog","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,Sts_Oper,"","","Mode.Sts_Oper","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run:AOI,Sts_ProgOperLock,"","","Mode.Sts_ProgOperLock","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Sts_StepTO,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Sts_StepSizeFault,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Rdy_Start,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Rdy_Hold,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Rdy_Restart,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Rdy_Stop,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Rdy_Reset,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Rdy_Pause,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Rdy_Resume,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Rdy_AutoPause,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Rdy_CancelPause,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run:AOI,Ref_Steps,"","BSeqStep[1]","","(Usage := InOut, Constant := false, Required := true, Visible := true)"
TAG,BSeq_Simple_Run:AOI,Wrk_TimersUsedInStep,"Timer used bits","SINT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
COMMENT,BSeq_Simple_Run:AOI,Wrk_TimersUsedInStep,"Step Time-Out",,"Wrk_TimersUsedInStep.0"
COMMENT,BSeq_Simple_Run:AOI,Wrk_TimersUsedInStep,"Step Min-Time",,"Wrk_TimersUsedInStep.1"
TAG,BSeq_Simple_Run:AOI,Wrk_SMStateNum,"Numeric State","SINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_SMState,"Binary State","SINT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
COMMENT,BSeq_Simple_Run:AOI,Wrk_SMState,"Idle",,"Wrk_SMState.0"
COMMENT,BSeq_Simple_Run:AOI,Wrk_SMState,"Starting",,"Wrk_SMState.1"
COMMENT,BSeq_Simple_Run:AOI,Wrk_SMState,"Running",,"Wrk_SMState.2"
COMMENT,BSeq_Simple_Run:AOI,Wrk_SMState,"Complete",,"Wrk_SMState.3"
COMMENT,BSeq_Simple_Run:AOI,Wrk_SMState,"Stopped",,"Wrk_SMState.4"
COMMENT,BSeq_Simple_Run:AOI,Wrk_SMState,"Held",,"Wrk_SMState.5"
TAG,BSeq_Simple_Run:AOI,Wrk_SMProgCmd,"","SINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
COMMENT,BSeq_Simple_Run:AOI,Wrk_SMProgCmd,"PStart",,"Wrk_SMProgCmd.0"
COMMENT,BSeq_Simple_Run:AOI,Wrk_SMProgCmd,"PStop",,"Wrk_SMProgCmd.2"
COMMENT,BSeq_Simple_Run:AOI,Wrk_SMProgCmd,"PReset",,"Wrk_SMProgCmd.3"
COMMENT,BSeq_Simple_Run:AOI,Wrk_SMProgCmd,"PHold",,"Wrk_SMProgCmd.6"
COMMENT,BSeq_Simple_Run:AOI,Wrk_SMProgCmd,"PRestart",,"Wrk_SMProgCmd.7"
TAG,BSeq_Simple_Run:AOI,Wrk_StepT,"Step Timer","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_StepNum,"Current Step Number","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_StepBDone,"","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_SMStateChg,"State Change (one scan)","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_SMOperCmd,"","SINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
COMMENT,BSeq_Simple_Run:AOI,Wrk_SMOperCmd,"OStart",,"Wrk_SMOperCmd.0"
COMMENT,BSeq_Simple_Run:AOI,Wrk_SMOperCmd,"OStop",,"Wrk_SMOperCmd.2"
COMMENT,BSeq_Simple_Run:AOI,Wrk_SMOperCmd,"OReset",,"Wrk_SMOperCmd.3"
COMMENT,BSeq_Simple_Run:AOI,Wrk_SMOperCmd,"OHold",,"Wrk_SMOperCmd.6"
COMMENT,BSeq_Simple_Run:AOI,Wrk_SMOperCmd,"ORestart",,"Wrk_SMOperCmd.7"
TAG,BSeq_Simple_Run:AOI,Wrk_SMCmd,"","SINT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
COMMENT,BSeq_Simple_Run:AOI,Wrk_SMCmd,"Start",,"Wrk_SMCmd.0"
COMMENT,BSeq_Simple_Run:AOI,Wrk_SMCmd,"Running_DN",,"Wrk_SMCmd.1"
COMMENT,BSeq_Simple_Run:AOI,Wrk_SMCmd,"Stop",,"Wrk_SMCmd.2"
COMMENT,BSeq_Simple_Run:AOI,Wrk_SMCmd,"Reset",,"Wrk_SMCmd.3"
COMMENT,BSeq_Simple_Run:AOI,Wrk_SMCmd,"Started",,"Wrk_SMCmd.4"
COMMENT,BSeq_Simple_Run:AOI,Wrk_SMCmd,"Hold",,"Wrk_SMCmd.6"
COMMENT,BSeq_Simple_Run:AOI,Wrk_SMCmd,"Restart",,"Wrk_SMCmd.7"
TAG,BSeq_Simple_Run:AOI,Wrk_RealMask,"Which real outputs are to be used","SINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_Running_DN,"","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_ROutputs,"Current values of real outputs","REAL[8]","","(RADIX := Float, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_PauseBits,"","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
COMMENT,BSeq_Simple_Run:AOI,Wrk_PauseBits,"Pause",,"Wrk_PauseBits.0"
COMMENT,BSeq_Simple_Run:AOI,Wrk_PauseBits,"Resume",,"Wrk_PauseBits.1"
COMMENT,BSeq_Simple_Run:AOI,Wrk_PauseBits,"AutoPause",,"Wrk_PauseBits.2"
COMMENT,BSeq_Simple_Run:AOI,Wrk_PauseBits,"CancelPause",,"Wrk_PauseBits.3"
COMMENT,BSeq_Simple_Run:AOI,Wrk_PauseBits,"Pausing",,"Wrk_PauseBits.8"
COMMENT,BSeq_Simple_Run:AOI,Wrk_PauseBits,"Paused",,"Wrk_PauseBits.9"
COMMENT,BSeq_Simple_Run:AOI,Wrk_PauseBits,"Resuming",,"Wrk_PauseBits.10"
TAG,BSeq_Simple_Run:AOI,Wrk_Outputs,"Current values of outputs","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_OutputMask,"Which outputs are to be used","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_NullName,"","Name","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_NextStep,"","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_MaxStepIndex,"Size of array minus 1","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_LastStep,"","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_Inputs,"Input","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_InpMask,"","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_Cfg_AutoReset,"Set if user doesn$'t want to require a Reset","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Val_CurrStepName,"","Name","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,scr1,"","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Mode,"","P_Mode","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Cfg_StopOutRealValue,"Real Values to output on Stop","REAL[8]","","(RADIX := Float, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Cfg_OutRealName,"","Name[8]","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Cfg_OutName,"","Name[32]","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Cfg_Name,"","Name","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Cfg_InpName,"","Name[32]","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_Qualified,"","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_QualifiedInputs,"","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_Init,"","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,xxx_InputState,"","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_Restarted,"","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_InputsQualified,"","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_InputsQualifiedSealIn,"","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,xxx_Cfg,"","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_FaultT,"Step Fault Time","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,xxx_InputMask,"","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,BSeq_Simple_Run:AOI,Wrk_ScaleFactor,"","REAL","","(RADIX := Float, Usage := Local, ExternalAccess := None)"
TAG,BSeq_Simple_Run:AOI,Wrk_ForceMask,"","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,BSeq_Simple_Run:AOI,Wrk_InpState,"","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,Wrk_UsedInStepMask,"","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,BSeq_Simple_Run:AOI,Wrk,"","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,BSeq_Simple_Run:AOI,Wrk_RestartStep,"","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run:AOI,scr2,"","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
ALIAS,BSeq_Simple_Run_64:AOI,Inp_00,"","","Wrk_Inputs[0].0","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,Inp_01,"","","Wrk_Inputs[0].1","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,Inp_02,"","","Wrk_Inputs[0].2","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,Inp_03,"","","Wrk_Inputs[0].3","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,Inp_04,"","","Wrk_Inputs[0].4","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,Inp_05,"","","Wrk_Inputs[0].5","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,Inp_06,"","","Wrk_Inputs[0].6","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,Inp_07,"","","Wrk_Inputs[0].7","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,Inp_08,"","","Wrk_Inputs[0].8","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,Inp_09,"","","Wrk_Inputs[0].9","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,Inp_10,"","","Wrk_Inputs[0].10","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,Inp_11,"","","Wrk_Inputs[0].11","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,Inp_12,"","","Wrk_Inputs[0].12","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,Inp_13,"","","Wrk_Inputs[0].13","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,Inp_14,"","","Wrk_Inputs[0].14","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,Inp_15,"","","Wrk_Inputs[0].15","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Inp_Scaling,"","REAL","","(RADIX := Float, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Cfg_PCmdClear,"","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Cfg_HasInp1,"Inputs Enabled for Application","DINT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Cfg_HasInp2,"Inputs Enabled for Application","DINT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Cfg_UseInp1,"Inputs Tested in Application","DINT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Cfg_UseInp2,"Inputs Tested in Application","DINT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Cfg_InpForceMask1,"Forceable Inputs","DINT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Cfg_InpForceMask2,"Forceable Inputs","DINT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Cfg_ScaleRealOut,"","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Cfg_StopOutState,"State of Outputs on Stop","DINT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Cfg_StopOutMask,"Which Outputs to Set on Stop","DINT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Cfg_StopOutRealMask,"Which Real Outputs to Write on Stop","SINT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,MSet_StepInpForce1,"Force Input for Current Step","DINT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,MSet_StepInpForce2,"Force Input for Current Step","DINT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,MCmd_StepForce,"Force Transition from Current Step","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,PCmd_Start,"","","Wrk_SMProgCmd.0","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,PCmd_Hold,"","","Wrk_SMProgCmd.6","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,PCmd_Restart,"","","Wrk_SMProgCmd.7","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,PCmd_Stop,"","","Wrk_SMProgCmd.2","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,PCmd_Reset,"","","Wrk_SMProgCmd.3","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,OCmd_Start,"","","Wrk_SMOperCmd.0","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,OCmd_Hold,"","","Wrk_SMOperCmd.6","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,OCmd_Restart,"","","Wrk_SMOperCmd.7","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,OCmd_Stop,"","","Wrk_SMOperCmd.2","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,OCmd_Pause,"","","Wrk_PauseBits.0","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,OCmd_Resume,"","","Wrk_PauseBits.1","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,OCmd_AutoPause,"","","Wrk_PauseBits.2","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,OCmd_CancelPause,"","","Wrk_PauseBits.3","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,OCmd_Reset,"","","Wrk_SMOperCmd.3","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,PCmd_Acq,"","","Mode.PCmd_Acq","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,PCmd_Rel,"","","Mode.PCmd_Rel","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,PCmd_Lock,"","","Mode.PCmd_Lock","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,PCmd_Unlock,"","","Mode.PCmd_Unlock","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,MCmd_Acq,"","","Mode.MCmd_Acq","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,MCmd_Rel,"","","Mode.MCmd_Rel","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,OCmd_AcqLock,"","","Mode.OCmd_AcqLock","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,OCmd_Unlock,"","","Mode.OCmd_Unlock","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Inp_Started,"","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_00,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_01,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_02,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_03,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_04,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_05,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_06,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_07,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_08,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_09,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_10,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_11,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_12,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_13,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_14,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_15,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_Real_00,"","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_Real_01,"","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_Real_02,"","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_Real_03,"","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_Real_04,"","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_Real_05,"","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_Real_06,"","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Out_Real_07,"","REAL","","(RADIX := Float, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Val_MaxStepIndex,"Ref_Steps Array Size - 1","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Val_CurrStepNum,"Currently Running Step","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,BSeq_Simple_Run_64:AOI,Val_CurrStepTRemain,"Remaining Time Before Transition is Allowed","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Val_CurrStepT2TO,"Remaining Time Before Step Faults on TO","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Val_StateNum,"","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,Sts_Idle,"","","Wrk_SMState.0","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := true)"
ALIAS,BSeq_Simple_Run_64:AOI,Sts_Starting,"","","Wrk_SMState.1","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := true)"
ALIAS,BSeq_Simple_Run_64:AOI,Sts_Running,"","","Wrk_SMState.2","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := true)"
ALIAS,BSeq_Simple_Run_64:AOI,Sts_Held,"","","Wrk_SMState.5","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,Sts_Complete,"","","Wrk_SMState.3","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := true)"
ALIAS,BSeq_Simple_Run_64:AOI,Sts_Stopped,"","","Wrk_SMState.4","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := true)"
ALIAS,BSeq_Simple_Run_64:AOI,Sts_Paused,"","","Wrk_PauseBits.9","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := true)"
ALIAS,BSeq_Simple_Run_64:AOI,Sts_Maint,"","","Mode.Sts_Maint","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,Sts_Prog,"","","Mode.Sts_Prog","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,Sts_Oper,"","","Mode.Sts_Oper","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,BSeq_Simple_Run_64:AOI,Sts_ProgOperLock,"","","Mode.Sts_ProgOperLock","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Sts_StepTO,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Sts_StepSizeFault,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Rdy_Start,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Rdy_Hold,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Rdy_Restart,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Rdy_Stop,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Rdy_Reset,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Rdy_Pause,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Rdy_Resume,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Rdy_AutoPause,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Rdy_CancelPause,"","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,BSeq_Simple_Run_64:AOI,Ref_Steps,"","BSeqStep_64[1]","","(Usage := InOut, Constant := false, Required := true, Visible := true)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_TimersUsedInStep,"Timer used bits","SINT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_TimersUsedInStep,"Step Time-Out",,"Wrk_TimersUsedInStep.0"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_TimersUsedInStep,"Step Min-Time",,"Wrk_TimersUsedInStep.1"
TAG,BSeq_Simple_Run_64:AOI,Wrk_SMStateNum,"Numeric State","SINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_SMState,"Binary State","SINT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_SMState,"Idle",,"Wrk_SMState.0"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_SMState,"Starting",,"Wrk_SMState.1"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_SMState,"Running",,"Wrk_SMState.2"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_SMState,"Complete",,"Wrk_SMState.3"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_SMState,"Stopped",,"Wrk_SMState.4"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_SMState,"Held",,"Wrk_SMState.5"
TAG,BSeq_Simple_Run_64:AOI,Wrk_SMProgCmd,"","SINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_SMProgCmd,"PStart",,"Wrk_SMProgCmd.0"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_SMProgCmd,"PStop",,"Wrk_SMProgCmd.2"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_SMProgCmd,"PReset",,"Wrk_SMProgCmd.3"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_SMProgCmd,"PHold",,"Wrk_SMProgCmd.6"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_SMProgCmd,"PRestart",,"Wrk_SMProgCmd.7"
TAG,BSeq_Simple_Run_64:AOI,Wrk_StepT,"Step Timer","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_StepNum,"Current Step Number","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_StepBDone,"","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_SMStateChg,"State Change (one scan)","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_SMOperCmd,"","SINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_SMOperCmd,"OStart",,"Wrk_SMOperCmd.0"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_SMOperCmd,"OStop",,"Wrk_SMOperCmd.2"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_SMOperCmd,"OReset",,"Wrk_SMOperCmd.3"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_SMOperCmd,"OHold",,"Wrk_SMOperCmd.6"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_SMOperCmd,"ORestart",,"Wrk_SMOperCmd.7"
TAG,BSeq_Simple_Run_64:AOI,Wrk_SMCmd,"","SINT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_SMCmd,"Start",,"Wrk_SMCmd.0"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_SMCmd,"Running_DN",,"Wrk_SMCmd.1"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_SMCmd,"Stop",,"Wrk_SMCmd.2"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_SMCmd,"Reset",,"Wrk_SMCmd.3"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_SMCmd,"Started",,"Wrk_SMCmd.4"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_SMCmd,"Hold",,"Wrk_SMCmd.6"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_SMCmd,"Restart",,"Wrk_SMCmd.7"
TAG,BSeq_Simple_Run_64:AOI,Wrk_RealMask,"Which real outputs are to be used","SINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_Running_DN,"","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_ROutputs,"Current values of real outputs","REAL[8]","","(RADIX := Float, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_PauseBits,"","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_PauseBits,"Pause",,"Wrk_PauseBits.0"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_PauseBits,"Resume",,"Wrk_PauseBits.1"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_PauseBits,"AutoPause",,"Wrk_PauseBits.2"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_PauseBits,"CancelPause",,"Wrk_PauseBits.3"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_PauseBits,"Pausing",,"Wrk_PauseBits.8"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_PauseBits,"Paused",,"Wrk_PauseBits.9"
COMMENT,BSeq_Simple_Run_64:AOI,Wrk_PauseBits,"Resuming",,"Wrk_PauseBits.10"
TAG,BSeq_Simple_Run_64:AOI,Wrk_Outputs,"Current values of outputs","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_OutputMask,"Which outputs are to be used","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_NullName,"","Name","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_NextStep,"","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_MaxStepIndex,"Size of array minus 1","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_LastStep,"","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_Inputs,"Input","DINT[2]","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_InpMask,"","DINT[2]","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_Cfg_AutoReset,"Set if user doesn$'t want to require a Reset","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Val_CurrStepName,"","Name","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,scr1,"","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Mode,"","P_Mode","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Cfg_StopOutRealValue,"Real Values to output on Stop","REAL[8]","","(RADIX := Float, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Cfg_OutRealName,"","Name[8]","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Cfg_OutName,"","Name[32]","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Cfg_Name,"","Name","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Cfg_InpName,"","Name[32]","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_Qualified,"","DINT[2]","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_QualifiedInputs,"","DINT[2]","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_Init,"","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,xxx_InputState,"","DINT[2]","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_Restarted,"","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_InputsQualified,"","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_InputsQualifiedSealIn,"","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,xxx_Cfg,"","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_FaultT,"Step Fault Time","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,xxx_InputMask,"","DINT[2]","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_ScaleFactor,"","REAL","","(RADIX := Float, Usage := Local, ExternalAccess := None)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_ForceMask,"","DINT[2]","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_InpState,"","DINT[2]","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_UsedInStepMask,"","DINT[2]","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,BSeq_Simple_Run_64:AOI,Wrk,"","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,BSeq_Simple_Run_64:AOI,Wrk_RestartStep,"","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_Alarm:AOI,Inp,"Alarm Condition Input 1=Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Alarm:AOI,Inp_Reset,"1=Reset Alarm requiring reset","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Alarm:AOI,Cfg_Exists,"1=Alarm configured to exist, 0=Does not exist, don$'t scan","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Cfg_ResetReqd,"1=Reset required to clear Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Cfg_AckReqd,"1=Acknowledge required for Alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Cfg_Severity,"1=Info Only; 2=Warning; 3=Process Exception; 4=Fault","SINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Cfg_AlmMinOnT,"Minimum time Alm output stays on (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,PCmd_Reset,"Program Command to Reset latched alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,PCmd_Ack,"Program Command to Acknowledge alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,PCmd_Inhibit,"Program Command to Inhibit alarm (force Alm to 0)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,PCmd_Uninhibit,"Program Command to Uninhibit alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,OCmd_Reset,"Operator Command to Reset latched alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,OCmd_Ack,"Operator Command to Acknowledge alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,OCmd_Suppress,"Operator Command to Suppress alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,OCmd_Unsuppress,"Operator Command to Unsuppress alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,MCmd_Disable,"Maintenance Command to Disable alarm (force Alm to 0)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,MCmd_Enable,"Maintenance Command to Enable alarm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Val_Notify,"Current Alarm Level and Acknowledgement (enumeration)","SINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Alm,"Alarm output 1=In Alarm","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Alarm:AOI,Ack,"Alarm acknowledged status: 1=Ack rcvd","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Alarm:AOI,Inhibited,"1=Alarm has been Inhibited by Program (will not be sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Alarm:AOI,Suppressed,"1=Alarm has been Suppressed by Operator (not visible on HMI)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Alarm:AOI,Disabled,"1=Alarm has been Disabled by Maintanance (will not be sent)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Alarm:AOI,Sts_AlmInh,"1=Alarm has been inhibited, disabled or suppressed, display $QI$Q icon","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Sts_Err,"1=Error in Config: see detail Err_ bits for reason","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Err_Timer,"1=Error in Config: Invalid timer preset (use 0 to 2147483)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Err_Severity,"1=Error in Config: Invalid Severity (use 1 to 4)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Rdy_Reset,"Ready to receive OCmd_Reset (enable button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Rdy_Ack,"Ready to receive OCmd_Ack (enable button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Rdy_Suppress,"Ready to receive OCmd_Suppress (enable button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Rdy_Unsuppress,"Ready to receive OCmd_Unsuppress (enable button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Rdy_Disable,"Ready to receive MCmd_Disable (enable button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Rdy_Enable,"Ready to receive MCmd_Enable (enable button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Alarm:AOI,Wrk_Alm,"Internal Alarm Status","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_Alarm:AOI,Wrk_Inhibited,"Internal Alarm Inhibit Status","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_Alarm:AOI,Wrk_AlmMinOnT,"Alarm output minimum ON time to be seen by alarm server","TIMER","","(Usage := Local, ExternalAccess := None)"
TAG,P_Alarm:AOI,Wrk_AutoAckT,"Time to clear Ack bit when Ack not required","TIMER","","(Usage := Local, ExternalAccess := None)"
TAG,P_Alarm:AOI,Wrk_AutoAckONS,"Alarm Unacknowledged ONS for AutoAck Timer","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_Alarm:AOI,Wrk_Abnormal,"Abnormal: Input in Alarm state, and not disabled or inhibited","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_Mode:AOI,Inp_Hand,"1=Select Hand (typ. hardwired)  Mode","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Mode:AOI,Inp_Ovrd,"1=Select Override (typ. Process/Safety Interlock) Mode","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Mode:AOI,Cfg_PCmdClear,"1=Clear Program Command on receipt; 0=Use Level-based (maintained) PCmds","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,Cfg_OvrdOverLock,"1=Override supersedes Prog/Oper Lock, 0=don$'t override Lock","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,Cfg_ProgDefault,"Default Mode: 1=Program Mode if no requests; 0=Operator Mode if no requests","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,PCmd_Acq,"Program Command to Acquire Ownership (Oper to Prog)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,PCmd_Rel,"Program Command to Release Ownership (Prog to Oper)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,PCmd_Lock,"Program Command to Lock Mode in Prog","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,PCmd_Unlock,"Program Command to Unlock Mode","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,MCmd_Acq,"Maintenance Command to Acquire Ownership (Oper/Prog/Ovrd to Maint)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,MCmd_Rel,"Maintenance Command to Release Ownership (Maint to Oper/Prog/Ovrd)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,OCmd_AcqLock,"Operator Command to Acquire and Lock Mode in Oper","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,OCmd_Unlock,"Operator Command to Unlock Operator Mode","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode:AOI,Val,"Mode enum: 0=No, 1=H, 2=M, 3=!, 4=P Lock, 5=O Lock, 6=P (O Def), 7=O (P Def), 8=P (P Def), 9=O (O def)","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Mode:AOI,Sts_Hand,"1=Mode is Hand (supersedes Maint, Ovrd, Prog, Oper)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode:AOI,Sts_Maint,"1=Mode is Maintenance (supersedes Ovrd, Prog, Oper)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode:AOI,Sts_Ovrd,"1=Mode is Override (supersedes Prog, Oper)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode:AOI,Sts_Prog,"1=Mode is Program","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode:AOI,Sts_Oper,"1=Mode is Operator","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode:AOI,Sts_ProgOperLock,"1=Program or Operator has requested Mode Lock","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode:AOI,Sts_ProgOperSel,"Prog/Oper selection 1=Program, 0=Operator","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Mode:AOI,Sts_NoMode,"1=Mode is NO mode (no owner)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Mode:AOI,Rdy_Acq,"1=Ready for MCmd_Acq","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Mode:AOI,Rdy_Rel,"1=Ready for MCmd_Rel","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Mode:AOI,Rdy_AcqLock,"1=Ready for OCmd_AcqLock","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Mode:AOI,Rdy_Unlock,"1=Ready for OCmd_Unlock","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Mode:AOI,Wrk_Locked,"1=Program/Operator Mode selection is Locked","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_Mode:AOI,Wrk_Prog,"Internal Program (1) / Operator (0) Mode selection","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_Mode:AOI,Wrk_Maint,"Internal Maintenance Mode","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_Mode_Old:AOI,Inp_Hand,"1=Select Hand (typ. hardwired)  Mode","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Mode_Old:AOI,Inp_Ovrd,"1=Select Override (typ. Process/Safety Interlock) Mode","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Mode_Old:AOI,Cfg_PCmdClear,"1=Clear Program Command on receipt; 0=Use Level-based (maintained) PCmds","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode_Old:AOI,Cfg_OvrdOverLock,"1=Override supersedes Prog/Oper Lock, 0=don$'t override Lock","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode_Old:AOI,PCmd_Acq,"Program Command to Acquire Ownership (Oper to Prog)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode_Old:AOI,PCmd_Rel,"Program Command to Release Ownership (Prog to Oper)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode_Old:AOI,PCmd_Lock,"Program Command to Lock Mode in Prog","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode_Old:AOI,PCmd_Unlock,"Program Command to Unlock Mode","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode_Old:AOI,MCmd_Acq,"Maintenance Command to Acquire Ownership (Oper/Prog/Ovrd to Maint)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode_Old:AOI,MCmd_Rel,"Maintenance Command to Release Ownership (Maint to Oper/Prog/Ovrd)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode_Old:AOI,OCmd_AcqLock,"Operator Command to Acquire and Lock Mode in Oper","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Mode_Old:AOI,OCmd_Unlock,"Operator Command to Unlock Operator Mode","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Mode_Old:AOI,Sts_Hand,"1=Mode is Hand (supersedes Maint, Ovrd, Prog, Oper)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode_Old:AOI,Sts_Maint,"1=Mode is Maintenance (supersedes Ovrd, Prog, Oper)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode_Old:AOI,Sts_Ovrd,"1=Mode is Override (supersedes Prog, Oper)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode_Old:AOI,Sts_Prog,"1=Mode is Program","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode_Old:AOI,Sts_Oper,"1=Mode is Operator","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode_Old:AOI,Sts_ProgOperLock,"1=Program or Operator has requested Mode Lock","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Mode_Old:AOI,Sts_ProgOperSel,"Prog/Oper selection 1=Program, 0=Operator","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Mode_Old:AOI,Rdy_Acq,"1=Ready for MCmd_Acq","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Mode_Old:AOI,Rdy_Rel,"1=Ready for MCmd_Rel","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Mode_Old:AOI,Rdy_AcqLock,"1=Ready for OCmd_AcqLock","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Mode_Old:AOI,Rdy_Unlock,"1=Ready for OCmd_Unlock","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Mode_Old:AOI,Wrk_Locked,"1=Program/Operator Mode selection is Locked","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Mode_Old:AOI,Wrk_Prog,"Internal Program (1) / Operator (0) Mode selection","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Mode_Old:AOI,Wrk_Maint,"Internal Maintenance Mode","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Mode_Old:AOI,Wrk_RelHand,"$QOne Shot$Q$Nto force mode to OperLock when leaving Hand Mode$NDWSD SPECIFIC ","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_Mode_Old:AOI,Wrk_RelHand2,"$QOne Shot$Q$Nto force mode to OperLock when leaving Hand Mode$NDWSD SPECIFIC ","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
ALIAS,P_Perm:AOI,Inp_Perm00,"Permissive Cond 00, OK to start if in configured OK state","","Wrk_Inp.0","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
ALIAS,P_Perm:AOI,Inp_Perm01,"Permissive Cond 01, OK to start if in configured OK state","","Wrk_Inp.1","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
ALIAS,P_Perm:AOI,Inp_Perm02,"Permissive Cond 02, OK to start if in configured OK state","","Wrk_Inp.2","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
ALIAS,P_Perm:AOI,Inp_Perm03,"Permissive Cond 03, OK to start if in configured OK state","","Wrk_Inp.3","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
ALIAS,P_Perm:AOI,Inp_Perm04,"Permissive Cond 04, OK to start if in configured OK state","","Wrk_Inp.4","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
ALIAS,P_Perm:AOI,Inp_Perm05,"Permissive Cond 05, OK to start if in configured OK state","","Wrk_Inp.5","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
ALIAS,P_Perm:AOI,Inp_Perm06,"Permissive Cond 06, OK to start if in configured OK state","","Wrk_Inp.6","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
ALIAS,P_Perm:AOI,Inp_Perm07,"Permissive Cond 07, OK to start if in configured OK state","","Wrk_Inp.7","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
ALIAS,P_Perm:AOI,Inp_Perm08,"Permissive Cond 08, OK to start if in configured OK state","","Wrk_Inp.8","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_Perm:AOI,Inp_Perm09,"Permissive Cond 09, OK to start if in configured OK state","","Wrk_Inp.9","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_Perm:AOI,Inp_Perm10,"Permissive Cond 10, OK to start if in configured OK state","","Wrk_Inp.10","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_Perm:AOI,Inp_Perm11,"Permissive Cond 11, OK to start if in configured OK state","","Wrk_Inp.11","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_Perm:AOI,Inp_Perm12,"Permissive Cond 12, OK to start if in configured OK state","","Wrk_Inp.12","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_Perm:AOI,Inp_Perm13,"Permissive Cond 13, OK to start if in configured OK state","","Wrk_Inp.13","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_Perm:AOI,Inp_Perm14,"Permissive Cond 14, OK to start if in configured OK state","","Wrk_Inp.14","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_Perm:AOI,Inp_Perm15,"Permissive Cond 15, OK to start if in configured OK state","","Wrk_Inp.15","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Perm:AOI,Inp_BypActive,"1=Permissive Bypassing is currently active","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Perm:AOI,Cfg_OKState,"Bits indicate which state (0 or 1) of each input is OK to start","INT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Perm:AOI,Cfg_Bypassable,"Set bits indicate which conditions can be bypassed","INT","","(RADIX := Binary, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Perm:AOI,Sts_PermOK,"Overall Permissive Status (1=OK to start)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Perm:AOI,Sts_NBPermOK,"Non-Bypassable Permissive Status (1 =all non- bypassable Permissives OK to start)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Perm:AOI,Sts_BypActive,"1=Permissive Bypassing is Active (ignore bypassable permissives)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Perm:AOI,Sts_Perm,"Individual Permissive Status (1=OK, 0=don$'t start)","INT","","(RADIX := Binary, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Perm:AOI,P_Perm,"Unique Parameter Name for auto - discovery","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Perm:AOI,Cfg_CondTxt,"Short HMI description of Permissive Conditions","STRING_20[16]","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Perm:AOI,Wrk_Inp,"Collection copy of Inp_PermXXs","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Perm:AOI,Wrk_Bypass,"Working Register for Bypassable Permissives","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := None)"
TAG,P_Perm:AOI,Inf_Tab,"Tab to display (FTView ME)","SINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Perm:AOI,Wrk_InpInv,"Input states after inverting based on Cfg_OKState","INT","","(RADIX := Binary, Usage := Local, ExternalAccess := None)"
TAG,P_Perm:AOI,Inf_Type,"Type identifier for HMI navigation","STRING_16","","(Usage := Local, ExternalAccess := Read Only)"
TAG,P_Perm:AOI,Cfg_Label,"Label for graphic symbol displayed on HMI","STRING_20","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Perm:AOI,Cfg_Tag,"Tagname for display on HMI","STRING_20","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Perm:AOI,Cfg_Desc,"Description for display on HMI","STRING_40","","(Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_Reset:AOI,Inp_Reset,"Reset Input, 1=Reset, from pushbutton or another object","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Reset:AOI,Inp_ResetReqd,"1=Reset Required, enable Reset button","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_Reset:AOI,Cfg_MinHoldTime,"Minimum Time to hold Reset Output true (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Reset:AOI,PCmd_Reset,"Program Command to Reset, from other object","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Reset:AOI,OCmd_Reset,"Operator Command to Reset, from HMI","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_Reset:AOI,Out_Reset,"1=Reset received for this P_Reset$'s scope","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Reset:AOI,Sts_Err,"1=Error in Config: Invalid Hold Time (use 0 to 2147483)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_Reset:AOI,Rdy_Reset,"1=Ready to receive OCmd_Reset (enable button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_Reset:AOI,Wrk_HoldT,"Reset Output Hold Timer (TOF)","TIMER","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Reset:AOI,Wrk_EnableInONS,"EnableIn transition detection to pulse Reset Output","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Reset:AOI,Wrk_HoldONS,"One-Shot to fire Hold Timer to ensure min. output ON time.","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_Reset:AOI,Wrk_ResetCond,"Any incoming Reset condition is TRUE","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_ValveMO:AOI,Inp_OpenLS,"Valve Open Limit Switch 1=confirmed OPEN","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ValveMO:AOI,Inp_ClosedLS,"Valve Closed Limit Switch 1=confirmed CLOSED","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ValveMO:AOI,Inp_ActuatorFault,"Valve Actuator Fault (overload, etc.), 0=OK, 1=Fault)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ValveMO:AOI,Inp_OpenPermOK,"1=Open Permissives OK, Valve can motor open","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ValveMO:AOI,Inp_OpenNBPermOK,"1=Non-Bypassable Open Permissives OK, valve can motor open","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ValveMO:AOI,Inp_ClosePermOK,"1=Close Permissives OK, Valve can motor closed","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ValveMO:AOI,Inp_CloseNBPermOK,"1=Non-Bypassable Close Permissives OK, valve can motor closed","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ValveMO:AOI,Inp_IOFault,"Input Communication Status 0=OK, 1=fail","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Inp_Sim,"1=Simulate working valve; 0=Open/Close/ Monitor actual valve","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Inp_Hand,"1=Select Hand (hardwired) Mode","","Mode.Inp_Hand","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
ALIAS,P_ValveMO:AOI,Inp_Ovrd,"1=Select Override Mode","","Mode.Inp_Ovrd","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ValveMO:AOI,Inp_OvrdCmd,"Override Mode Command 0=None, 1=Close, 2=Open, 3=Stop","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ValveMO:AOI,Inp_Reset,"1=Reset all fault conditions and latched Alarms","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ValveMO:AOI,Cfg_HasOpenLS,"1=Valve provides an Open Limit Switch signal","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Cfg_HasClosedLS,"1=Valve provides a Closed Limit Switch signal","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Cfg_UseOpenLS,"1=Valve Open LS should be used for failure checking","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Cfg_UseClosedLS,"1=Valve Closed LS should be used for failure checking","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Cfg_LSFail,"1=both switches ON=fail, 0=both switches OFF=fail","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Cfg_HasStop,"1=Stop output can be used to break local seal-in and stop valve motion","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Cfg_HasOpenPermObj,"1=Tells HMI a P_Perm is connected to Inp_OpenPermOK","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Cfg_HasClosePermObj,"1=Tells HMI a P_Perm is connected to Inp_ClosePermOK","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Cfg_HasStatsObj,"1=Tells HMI a P_ValveStats is monitoring this valve","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Cfg_PCmdClear,"1=Clear Program Commands on receipt$N0=Leave Set","","Mode.Cfg_PCmdClear","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Cfg_ProgDefault,"Default Mode: 1=Program Mode if no requests; 0=Operator Mode if no requests","","Mode.Cfg_ProgDefault","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Cfg_OCmdResets,"1=New Oper valve cmd. resets fault,$N0=reset req$'d to clear fault","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Cfg_ShedOnFullStall,"1=Stop Valve and Alarm on Full Stall; 0=Alarm only on Full Stall","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Cfg_ShedOnTransitStall,"1=Stop Valve and Alarm on Transit Stall; 0=Alarm only on Transit Stall","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Cfg_ShedOnActuatorFault,"1=Stop Valve and Alarm on Actuator Fault; 0=Alarm only on Actuator Fault","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Cfg_ShedOnIOFault,"1=Stop Valve and Alarm on I/O Fault; 0=Alarm only on I/O Fault","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Cfg_OvrdPerm,"1=Override ignores Bypassable Perm; 0=always use Perm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Cfg_HasFullStallAlm,"1=Full Stall Alarm exists and will be checked","","FullStall.Cfg_Exists","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Cfg_HasTransitStallAlm,"1=Transit Stall Alarm exists and will be checked","","TransitStall.Cfg_Exists","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Cfg_HasActuatorFaultAlm,"1=Actuator Fault Alarm exists and will be checked","","ActuatorFault.Cfg_Exists","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Cfg_HasIOFaultAlm,"1=I/O Fault Alarm exists and will be checked","","IOFault.Cfg_Exists","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Cfg_FullStallResetReqd,"1=Reset requied to clear Full Stall Alarm","","FullStall.Cfg_ResetReqd","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Cfg_TransitStallResetReqd,"1=Reset required to clear Transit Stall Alarm","","TransitStall.Cfg_ResetReqd","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Cfg_ActuatorFaultResetReqd,"1=Reset required to clear Actuator Fault Alarm","","ActuatorFault.Cfg_ResetReqd","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Cfg_IOFaultResetReqd,"1=Reset required to clear I/O Fault Alarm","","IOFault.Cfg_ResetReqd","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Cfg_FullStallAckReqd,"1=Acknowledge required for Full Stall Alarm","","FullStall.Cfg_AckReqd","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Cfg_TransitStallAckReqd,"1=Acknowledge required for Transit Stall Alarm","","TransitStall.Cfg_AckReqd","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Cfg_ActuatorFaultAckReqd,"1=Acknowledge required for Actuator Fault Alarm","","ActuatorFault.Cfg_AckReqd","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Cfg_IOFaultAckReqd,"1=Acknowledge required for I/O Fault Alarm","","IOFault.Cfg_AckReqd","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Cfg_FullStallSeverity,"Full Stall Alarm Severity 1=info 2=warn 3=excep 4=fault","","FullStall.Cfg_Severity","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Cfg_TransitStallSeverity,"Transit Stall Alarm Severity 1=info 2=warn 3=excep 4=fault","","TransitStall.Cfg_Severity","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Cfg_ActuatorFaultSeverity,"Actuator Fault Alarm Severity 1=info 2=warn 3=excep 4=fault","","ActuatorFault.Cfg_Severity","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Cfg_IOFaultSeverity,"I/O Fault Alarm Severity 1=info 2=warn 3=excep 4=fault","","IOFault.Cfg_Severity","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Cfg_OutPulseT,"Time (in seconds) to pulse valve outputs (0 = outputs maintained ON)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Cfg_SimFdbkT,"Delay to echo back  of Open/Closed status when in Simulation (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Cfg_FullStallT,"After command, time with no motion before Fault (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Cfg_TransitStallT,"After command, time to reach position before Fault (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,PSet_Owner,"Program Owner Request ID (non-zero) or Release (zero)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,PCmd_Open,"Program Command to Open Valve","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,PCmd_Close,"Program Command to Close Valve","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,PCmd_Acq,"Program Command to Acquire ownership (Oper to Prog)","","Mode.PCmd_Acq","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,PCmd_Rel,"Program Command to Release ownership (Prog to Oper)","","Mode.PCmd_Rel","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,PCmd_Lock,"Program Command to Lock Mode in Prog","","Mode.PCmd_Lock","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,PCmd_Unlock,"Program Command to Unlock Mode","","Mode.PCmd_Unlock","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,PCmd_Reset,"Program Command to Reset all Alarms requiring Reset","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,PCmd_FullStallAck,"Program Command to Acknowledge Full Stall Alarm","","FullStall.PCmd_Ack","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,PCmd_FullStallInhibit,"Program Command to Inhibit Full Stall Alarm","","FullStall.PCmd_Inhibit","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,PCmd_FullStallUninhibit,"Program Command to Uninhibit Full Stall Alarm","","FullStall.PCmd_Uninhibit","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,PCmd_TransitStallAck,"Program Command to Acknowledge Transit Stall Alarm","","TransitStall.PCmd_Ack","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,PCmd_TransitStallInhibit,"Program Command to Inhibit Transit Stall Alarm","","TransitStall.PCmd_Inhibit","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,PCmd_TransitStallUninhibit,"Program Command to Uninhibit Transit Stall Alarm","","TransitStall.PCmd_Uninhibit","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,PCmd_ActuatorFaultAck,"Program Command to Acknowledge Actuator Fault Alarm","","ActuatorFault.PCmd_Ack","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,PCmd_ActuatorFaultInhibit,"Program Command to Inhibit Actuator Fault Alarm","","ActuatorFault.PCmd_Inhibit","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,PCmd_ActuatorFaultUninhibit,"Program Command to Uninhibit Actuator Fault Alarm","","ActuatorFault.PCmd_Uninhibit","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,PCmd_IOFaultAck,"Program Command to Acknowledge I/O Fault Alarm","","IOFault.PCmd_Ack","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,PCmd_IOFaultInhibit,"Program Command to Inhibit I/O Fault Alarm","","IOFault.PCmd_Inhibit","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,PCmd_IOFaultUninhibit,"Program Command to Uninhibit I/O Fault Alarm","","IOFault.PCmd_Uninhibit","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,OCmd_Open,"Operator Command to Open Valve","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,OCmd_Close,"Operator Command to Close Valve","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,OCmd_Stop,"Operator Command to Stop Valve Motion","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,OCmd_Bypass,"Operator Command to Bypass all Bypassable Interlocks and Permissives","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,OCmd_Check,"Operator Command to Check (not bypass) all Interlocks and Permissives","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,MCmd_Disable,"Maintenance Command to Disable Valve","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,MCmd_Enable,"Maintenance Command to Enable (allow to energize) Valve","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,OCmd_Reset,"Operator Command to Reset all Alarms requiring Reset","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,OCmd_ResetAckAll,"Operator Command to Reset all Alarms and latched Shed conditions","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Out_Open,"1=Run actuator motor to OPEN Valve","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_ValveMO:AOI,Out_Close,"1=Run actuator motor to CLOSE Valve","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_ValveMO:AOI,Out_Stop,"1=Break seal-in circuit in actuator to STOP Valve motion","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Val_Cmd,"Device Command 0=None, 1=Close, 2=Open, 3=Stop","SINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Val_Fdbk,"Device Feedback 0=Moving, 1=Closed, 2=Opened, 3=Limit Switch Failure","SINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Val_Sts,"Device Confirmed Sts 0=? 1=Closed 2=Open 3=Cmd To Close 4=Cmd to Open 5=Closing 6=Opening 7=Stopped 33=Disabled","SINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Val_Fault,"Device Fault Status 0=None, 16=Transit Stall, 17 = Full Stall, 19=Actuator Fault, 32=I/O Fault, 34=Config Error","SINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Val_Mode,"Mode enum: 0=No, 1=H, 2=M, 3=!, 4=P Lock, 5=O Lock, 6=P (O Def), 7=O (P Def), 8=P (P Def), 9=O (O def)","","Mode.Val","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Val_Owner,"Current Object Owner ID (0=not owned)","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Val_Notify,"Current Alarm Level and Acknowledgement (enumeration)","SINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Sts_Closed,"1=Valve requested to Close and is confirmed Closed","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_ValveMO:AOI,Sts_CmdToOpen,"1=Valve commanded to Open, has not yet moved off Open LS","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_ValveMO:AOI,Sts_Opening,"1=Valve requested to open and awaiting open feedback","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_ValveMO:AOI,Sts_Opened,"1=Valve requested to open and is confirmed Opened","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_ValveMO:AOI,Sts_CmdToClose,"1=Valve commanded to Close, has not yet moved off Closed LS","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_ValveMO:AOI,Sts_Closing,"1=Valve requested to Close and awaiting Closed feedback","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_ValveMO:AOI,Sts_Stopped,"1=Valve requested to Stop and is not at either end of travel","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Sts_Available,"1=Valve available for control by automation (Prog)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Sts_Bypass,"1=Bypassable Interlocks and Permissives are Bypassed","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Sts_BypActive,"1=Bypassing Active (Bypassed or Maintenance)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Sts_Disabled,"1=Valve is Disabled","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Sts_LSFail,"1=Limit Switch Overlap Failure","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Sts_NotRdy,"1=Valve is Not Ready to Energize (independent of Mode)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Sts_MaintByp,"1=A Maintenance Bypass is Active, display icon","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Sts_AlmInh,"1=An Alarm is Inhibited, Disabled or Suppressed, display icon","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Sts_Err,"1=Error in Config: see detail bits for reason","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_ValveMO:AOI,Err_Timer,"1=Error in Config: Invalid Check or Pulse Time (use 0 to 2147483)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Err_Sim,"1=Error in Config: Simulation timer preset (use 0 to 2147483)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Err_Alarm,"1=Error in Config: Alarm Throttle Time or Severity","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Sts_Hand,"1=Mode is Hand (supersedes Maint, Ovrd, Prog, Oper)","","Mode.Sts_Hand","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
ALIAS,P_ValveMO:AOI,Sts_Maint,"1=Mode is Maintenance (supersedes Ovrd, Prog, Oper)","","Mode.Sts_Maint","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
ALIAS,P_ValveMO:AOI,Sts_Ovrd,"1=Mode is Override (supersedes Prog, Oper)","","Mode.Sts_Ovrd","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
ALIAS,P_ValveMO:AOI,Sts_Prog,"1=Mode is Program (auto)","","Mode.Sts_Prog","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
ALIAS,P_ValveMO:AOI,Sts_Oper,"1=Mode is Operator (manual)","","Mode.Sts_Oper","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
ALIAS,P_ValveMO:AOI,Sts_ProgOperLock,"1=Program or Operator has requested Mode Lock","","Mode.Sts_ProgOperLock","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Sts_NoMode,"1=NoMode (Disabled because EnableIn is False)","","Mode.Sts_NoMode","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Sts_FullStall,"1=Valve Full Stall (failed to move at all) (One-Shot)","","FullStall.Inp","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Alm_FullStall,"1=Valve Full Stall (failed to move at all) Alarm","","FullStall.Alm","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Ack_FullStall,"1=Full Stall Alarm Acknowledged","","FullStall.Ack","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Sts_FullStallDisabled,"1=Full Stall Alarm Disabled (will not be sent)","","FullStall.Disabled","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Sts_FullStallInhibited,"1=Full Stall Alarm Inhibited by logic","","FullStall.Inhibited","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Sts_FullStallSuppressed,"1=Full Stall Alarm Suppressed (logged only)","","FullStall.Suppressed","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Sts_TransitStall,"1=Valve Transit Stall (did not reach target position) (One-Shot)","","TransitStall.Inp","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Alm_TransitStall,"1=Valve Transit Stall (did not reach target pos.) Alarm","","TransitStall.Alm","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Ack_TransitStall,"1=Transit Stall Alarm Acknowledged","","TransitStall.Ack","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Sts_TransitStallDisabled,"1=Transit Stall Alarm Disabled (will not be sent)","","TransitStall.Disabled","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Sts_TransitStallInhibited,"1=Transit Stall Alarm Inhibited by logic","","TransitStall.Inhibited","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Sts_TransitStallSuppressed,"1=Transit Stall Alarm Suppressed (logged only)","","TransitStall.Suppressed","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Sts_ActuatorFault,"1=Actuator Fault detected (input)","","ActuatorFault.Inp","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Alm_ActuatorFault,"1=Alarm: Actuator Fault Detected","","ActuatorFault.Alm","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Ack_ActuatorFault,"1=Actuator Fault Alarm Acknowledged","","ActuatorFault.Ack","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Sts_ActuatorFaultDisabled,"1=Actuator Fault Alarm Disabled (not saved or sent)","","ActuatorFault.Disabled","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Sts_ActuatorFaultInhibited,"1=Actuator Fault Alarm Inhibited by logic","","ActuatorFault.Inhibited","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Sts_ActuatorFaultSuppressed,"1=Actuator Fault Alarm Suppressed (logged only)","","ActuatorFault.Suppressed","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Sts_IOFault,"I/O Comm Fault Status (0=OK, 1=Bad)","","IOFault.Inp","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Alm_IOFault,"1=I/O Fault Alarm","","IOFault.Alm","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Ack_IOFault,"1=I/O Fault Alarm Acknowledged","","IOFault.Ack","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Sts_IOFaultDisabled,"1=I/O Fault Alarm Disabled (not saved or sent)","","IOFault.Disabled","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Sts_IOFaultInhibited,"1=I/O Fault Alarm Inhibited by logic","","IOFault.Inhibited","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveMO:AOI,Sts_IOFaultSuppressed,"1=I/O Fault Alarm Suppressed (logged only)","","IOFault.Suppressed","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Rdy_Open,"1=Ready to receive OCmd_Open (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Rdy_Close,"1=Ready to receive OCmd_Close (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Rdy_Stop,"1=Ready to receive OCmd_Stop (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Rdy_Bypass,"1=Ready to receive OCmd_Bypass (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Rdy_Check,"1=Ready to receive OCmd_Check (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Rdy_Disable,"1=Ready to receive MCmd_Disable (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Rdy_Enable,"1=Ready to receive MCmd_Enable (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Rdy_Reset,"1=Ready to receive OCmd_Reset (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Rdy_ResetAckAll,"1=At least one Alarm or latched Shed condition requires Reset or Ack","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,P_ValveMO,"Unique Parameter Name for auto - discovery","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveMO:AOI,Mode,"Valve Mode Selection","P_Mode","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ValveMO:AOI,IOFault,"I/O Fault Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ValveMO:AOI,ActuatorFault,"Actuator Fault Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ValveMO:AOI,TransitStall,"Valve Transit Stall (moved but did not reach target) Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ValveMO:AOI,FullStall,"Valve Full Stall (did not move) Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ValveMO:AOI,Cfg_Tag,"Tagname for display on HMI","STRING_20","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ValveMO:AOI,Cfg_Label,"Label for graphic symbol displayed on HMI","STRING_20","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ValveMO:AOI,Cfg_Desc,"Description for display on HMI","STRING_40","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ValveMO:AOI,Wrk_Open,"1=Requested to OPEN Valve","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_ValveMO:AOI,Wrk_SimOpenT,"Simulation Delay until Opened","TIMER","","(Usage := Local, ExternalAccess := None)"
TAG,P_ValveMO:AOI,Wrk_ActuatorFault,"Actuator Shed Fault (latched, requires reset)","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_ValveMO:AOI,Wrk_SimCloseT,"Simulation Delay until Closed","TIMER","","(Usage := Local, ExternalAccess := None)"
TAG,P_ValveMO:AOI,Wrk_OpenFdbk,"1=LS Feedback shows valve confirmed open","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_ValveMO:AOI,Wrk_Notify,"Buffer for building Val_Notify","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_ValveMO:AOI,Wrk_Bypass,"Internal Bypassable Permissives and Interlocks are Bypassed flag","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_ValveMO:AOI,Wrk_Disabled,"Internal Valve is Disabled","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_ValveMO:AOI,Wrk_ClosedFdbk,"1=LS Feedback shows valve confirmed closed","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_ValveMO:AOI,Wrk_Stop,"1=Requested to STOP Valve","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_ValveMO:AOI,Wrk_Close,"1-Requested to CLOSE Valve","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_ValveMO:AOI,Wrk_StopPulseT,"Timer for Out_Stop pulse time","TIMER","","(Usage := Local, ExternalAccess := None)"
TAG,P_ValveMO:AOI,Wrk_ClosePulseT,"Timer for Out_Close pulse time","TIMER","","(Usage := Local, ExternalAccess := None)"
TAG,P_ValveMO:AOI,Wrk_OpenPulseT,"Timer for Out_Open pulse time","TIMER","","(Usage := Local, ExternalAccess := None)"
TAG,P_ValveMO:AOI,Wrk_TransitStallT,"Timer for Transit Stall Check","TIMER","","(Usage := Local, ExternalAccess := None)"
TAG,P_ValveMO:AOI,Wrk_FullStallT,"Timer for Full Stall Check","TIMER","","(Usage := Local, ExternalAccess := None)"
TAG,P_ValveMO:AOI,Inf_Tab,"Tab to display (FTView ME)","SINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ValveMO:AOI,Wrk_FullStall,"Full Stall Shed Fault (latched, requires reset)","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_ValveMO:AOI,Wrk_TransitStall,"Transit Stall Shed Fault (latched, requires reset)","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_ValveMO:AOI,Wrk_IOFault,"I/O Shed Fault (latched, requires reset)","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_ValveMO:AOI,Inf_Type,"Type identifier for HMI navigation","STRING_16","","(Usage := Local, ExternalAccess := Read Only)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,P_ValveSO:AOI,Inp_OpenLS,"Valve Open Limit Switch 1=confirmed OPEN","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ValveSO:AOI,Inp_ClosedLS,"Valve Closed Limit Switch 1=confirmed CLOSED","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ValveSO:AOI,Inp_PermOK,"1=Permissives OK, Valve can energize","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ValveSO:AOI,Inp_NBPermOK,"1=Non-Bypassable Permissives OK, valve can energize","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ValveSO:AOI,Inp_IntlkOK,"1=Interlocks OK, valve can energize","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ValveSO:AOI,Inp_NBIntlkOK,"1=Non-Bypassable Interlocks OK, valve can energize","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ValveSO:AOI,Inp_IOFault,"Input Communication Status 0=OK, 1=fail","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Inp_Sim,"1=Simulate working valve; 0=Open/Close/ Monitor actual valve","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Inp_Hand,"1=Select Hand (hardwired) Mode","","Mode.Inp_Hand","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
ALIAS,P_ValveSO:AOI,Inp_Ovrd,"1=Select Override Mode","","Mode.Inp_Ovrd","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ValveSO:AOI,Inp_OvrdCmd,"Override Mode Command: 0=None, 1=Close, 2=Open","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ValveSO:AOI,Inp_Reset,"1=Reset all fault conditions and latched Alarms","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := true)"
TAG,P_ValveSO:AOI,Cfg_FailOpen,"1=Fail Open (energize to close), 0=Fail Closed (energize to open)","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Cfg_HasOpenLS,"1=Valve provides an Open Limit Switch signal","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Cfg_HasClosedLS,"1=Valve provides a Closed Limit Switch signal","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Cfg_UseOpenLS,"1=Valve Open LS should be used for failure checking","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Cfg_UseClosedLS,"1=Valve Closed LS should be used for failure checking","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Cfg_LSFail,"1=both switches ON=fail, 0=both switches OFF=fail","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Cfg_HasPermObj,"1=Tells HMI a P_Perm is connected to Inp_Perm","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Cfg_HasIntlkObj,"1=Tells HMI a P_Intlk is connected to Inp_Intlk","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Cfg_HasStatsObj,"1=Tells HMI a P_ValveStats is monitoring this valve","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Cfg_PCmdClear,"1=Clear Program Commands on receipt$N0=Leave Set","","Mode.Cfg_PCmdClear","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Cfg_ProgDefault,"Default Mode: 1=Program Mode if no requests; 0=Operator Mode if no requests","","Mode.Cfg_ProgDefault","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Cfg_OCmdResets,"1=New Oper valve cmd. resets fault,$N0=reset req$'d to clear fault","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Cfg_ShedOnFullStall,"1=Stop Valve and Alarm on Full Stall; 0=Alarm only on Full Stall","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Cfg_ShedOnTransitStall,"1=Stop Valve and Alarm on Transit Stall; 0=Alarm only on Transit Stall","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Cfg_ShedOnIOFault,"1=Stop Valve and Alarm on I/O Fault; 0=Alarm only on I/O Fault","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Cfg_OvrdPermIntlk,"1=Override ignores Bypassable Perm/ Intlk; 0=always use Perm/Intlk","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Cfg_HasFullStallAlm,"1=Full Stall Alarm exists and will be checked","","FullStall.Cfg_Exists","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Cfg_HasTransitStallAlm,"1=Transit Stall Alarm exists and will be checked","","TransitStall.Cfg_Exists","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Cfg_HasIntlkTripAlm,"1=Interlock Trip Alarm exists and will be checked","","IntlkTrip.Cfg_Exists","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Cfg_HasIOFaultAlm,"1=I/O Fault Alarm exists and will be checked","","IOFault.Cfg_Exists","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Cfg_FullStallResetReqd,"1=Reset requied to clear Full Stall Alarm","","FullStall.Cfg_ResetReqd","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Cfg_TransitStallResetReqd,"1=Reset required to clear Transit Stall Alarm","","TransitStall.Cfg_ResetReqd","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Cfg_IntlkTripResetReqd,"1=Reset required to clear Interlock Trip Alarm","","IntlkTrip.Cfg_ResetReqd","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Cfg_IOFaultResetReqd,"1=Reset required to clear I/O Fault Alarm","","IOFault.Cfg_ResetReqd","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Cfg_FullStallAckReqd,"1=Acknowledge required for Full Stall Alarm","","FullStall.Cfg_AckReqd","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Cfg_TransitStallAckReqd,"1=Acknowledge required for Transit Stall Alarm","","TransitStall.Cfg_AckReqd","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Cfg_IntlkTripAckReqd,"1=Acknowledge required for Interlock Trip Alarm","","IntlkTrip.Cfg_AckReqd","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Cfg_IOFaultAckReqd,"1=Acknowledge required for I/O Fault Alarm","","IOFault.Cfg_AckReqd","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Cfg_FullStallSeverity,"Full Stall Alarm Severity 1=info 2=warn 3=excep 4=fault","","FullStall.Cfg_Severity","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Cfg_TransitStallSeverity,"Transit Stall Alarm Severity 1=info 2=warn 3=excep 4=fault","","TransitStall.Cfg_Severity","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Cfg_IntlkTripSeverity,"Interlock Trip Alarm Severity 1=info 2=warn 3=excep 4=fault","","IntlkTrip.Cfg_Severity","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Cfg_IOFaultSeverity,"I/O Fault Alarm Severity 1=info 2=warn 3=excep 4=fault","","IOFault.Cfg_Severity","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Cfg_SimFdbkT,"Delay to echo back of Open/Closed status when in Simulation (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Cfg_FullStallT,"After command, time with no motion before Fault (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Cfg_TransitStallT,"After command, time to reach position before fault (sec)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,PSet_Owner,"Program Owner Request ID (non-zero) or Release (zero)","DINT","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,PCmd_Open,"Program Command to Open Valve","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,PCmd_Close,"Program Command to Close Valve","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,PCmd_Acq,"Program Command to Acquire ownership (Oper to Prog)","","Mode.PCmd_Acq","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,PCmd_Rel,"Program Command to Release ownership (Prog to Oper)","","Mode.PCmd_Rel","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,PCmd_Lock,"Program Command to Lock Mode in Prog","","Mode.PCmd_Lock","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,PCmd_Unlock,"Program Command to Unlock Mode","","Mode.PCmd_Unlock","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,PCmd_Reset,"Program Command to Reset all Alarms requiring Reset","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,PCmd_FullStallAck,"Program Command to Acknowledge Full Stall Alarm","","FullStall.PCmd_Ack","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,PCmd_FullStallInhibit,"Program Command to Inhibit Full Stall Alarm","","FullStall.PCmd_Inhibit","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,PCmd_FullStallUninhibit,"Program Command to Uninhibit Full Stall Alarm","","FullStall.PCmd_Uninhibit","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,PCmd_TransitStallAck,"Program Command to Acknowledge Transit Stall Alarm","","TransitStall.PCmd_Ack","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,PCmd_TransitStallInhibit,"Program Command to Inhibit Transit Stall Alarm","","TransitStall.PCmd_Inhibit","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,PCmd_TransitStallUninhibit,"Program Command to Uninhibit Transit Stall Alarm","","TransitStall.PCmd_Uninhibit","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,PCmd_IntlkTripAck,"Program Command to Acknowledge Interlock Trip Alarm","","IntlkTrip.PCmd_Ack","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,PCmd_IntlkTripInhibit,"Program Command to Inhibit Interlock Trip Alarm","","IntlkTrip.PCmd_Inhibit","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,PCmd_IntlkTripUninhibit,"Program Command to Uninhibit Interlock Trip Alarm","","IntlkTrip.PCmd_Uninhibit","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,PCmd_IOFaultAck,"Program Command to Acknowledge I/O Fault Alarm","","IOFault.PCmd_Ack","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,PCmd_IOFaultInhibit,"Program Command to Inhibit I/O Fault Alarm","","IOFault.PCmd_Inhibit","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,PCmd_IOFaultUninhibit,"Program Command to Uninhibit I/O Fault Alarm","","IOFault.PCmd_Uninhibit","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,OCmd_Open,"Operator Command to Open Valve","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,OCmd_Close,"Operator Command to Close Valve","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,OCmd_Bypass,"Operator Command to Bypass all Bypassable Interlocks and Permissives","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,OCmd_Check,"Operator Command to Check (not bypass) all Interlocks and Permissives","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,MCmd_Disable,"Maintenance Command to Disable Valve","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,MCmd_Enable,"Maintenance Command to Enable (allow to energize) Valve","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,OCmd_Reset,"Operator Command to Reset all Alarms requiring Reset","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,OCmd_ResetAckAll,"Operator Command to Reset all Alarms and latched Shed conditions","BOOL","","(RADIX := Decimal, Usage := Input, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Out,"1=Energize Valve Solenoid","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_ValveSO:AOI,Val_Cmd,"Device Command 0=None, 1=Close, 2=Open","SINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Val_Fdbk,"Device Feedback 0=Moving, 1=Closed, 2=Opened, 3=Limit Switch Failure","SINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Val_Sts,"Device Confirmed Sts 0=? 1=Closed 2=Open 5=Closing, 6=Opening,  32=Disabled","SINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Val_Fault,"Device Fault Status 0=None, 16=Transit Stall, 17 = Full Stall, 32=I/O Fault, 34=Config Error","SINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Val_Mode,"Mode enum: 0=No, 1=H, 2=M, 3=!, 4=P Lock, 5=O Lock, 6=P (O Def), 7=O (P Def), 8=P (P Def), 9=O (O def)","","Mode.Val","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Val_Owner,"Current Object Owner ID (0=not owned)","DINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Val_Notify,"Current Alarm Level and Acknowledgement (enumeration)","SINT","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Sts_Closed,"1=Valve requested to Close and is confirmed Closed","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_ValveSO:AOI,Sts_Opening,"1=Valve requested to open and awaiting open feedback","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_ValveSO:AOI,Sts_Opened,"1=Valve requested to open and is confirmed Opened","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_ValveSO:AOI,Sts_Closing,"1=Valve requested to Close and awaiting Closed feedback","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_ValveSO:AOI,Sts_Available,"1=Valve available for control by automation (Prog)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Sts_Bypass,"1=Bypassable Interlocks and Permissives are Bypassed","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Sts_BypActive,"1=Bypassing Active (Bypassed or Maintenance)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Sts_Disabled,"1=Valve is Disabled","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Sts_LSFail,"1=Limit Switch Overlap Failure","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Sts_NotRdy,"1=Valve is Not Ready to Energize (independent of Mode)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Sts_MaintByp,"1=A Maintenance Bypass is Active, display icon","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Sts_AlmInh,"1=An Alarm is Inhibited, Disabled or Suppressed, display icon","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Sts_Err,"1=Error in Config: see detail bits for reason","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
TAG,P_ValveSO:AOI,Err_Timer,"1=Error in Config: Invalid Check Time (use 0 to 2147483)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Err_Sim,"1=Error in Config: Invalid Simulation Time (use 0 to 2147483)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Err_Alarm,"1=Error in Config: Alarm Throttle Time or Severity","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Sts_Hand,"1=Mode is Hand (supersedes Maint, Ovrd, Prog, Oper)","","Mode.Sts_Hand","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
ALIAS,P_ValveSO:AOI,Sts_Maint,"1=Mode is Maintenance (supersedes Ovrd, Prog, Oper)","","Mode.Sts_Maint","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
ALIAS,P_ValveSO:AOI,Sts_Ovrd,"1=Mode is Override (supersedes Prog, Oper)","","Mode.Sts_Ovrd","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
ALIAS,P_ValveSO:AOI,Sts_Prog,"1=Mode is Program (auto)","","Mode.Sts_Prog","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
ALIAS,P_ValveSO:AOI,Sts_Oper,"1=Mode is Operator (manual)","","Mode.Sts_Oper","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := true)"
ALIAS,P_ValveSO:AOI,Sts_ProgOperLock,"1=Program or Operator has requested Mode Lock","","Mode.Sts_ProgOperLock","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Sts_NoMode,"1=NoMode (Disabled because EnableIn is False)","","Mode.Sts_NoMode","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Sts_FullStall,"1=Valve Full Stall (failed to move at all)","","FullStall.Inp","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Alm_FullStall,"1=Valve Full Stall (failed to move at all) Alarm","","FullStall.Alm","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Ack_FullStall,"1=Full Stall Alarm has been acknowledged","","FullStall.Ack","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Sts_FullStallDisabled,"1=Full Stall Alarm has been disabled (will not be sent)","","FullStall.Disabled","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Sts_FullStallInhibited,"1=Full Stall Alarm has been inhibited by logic","","FullStall.Inhibited","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Sts_FullStallSuppressed,"1=Full Stall Alarm has been suppressed (logged only)","","FullStall.Suppressed","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Sts_TransitStall,"1=Valve Transit Stall (did not reach target position)","","TransitStall.Inp","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Alm_TransitStall,"1=Valve Transit Stall (did not reach target pos.) Alarm","","TransitStall.Alm","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Ack_TransitStall,"1=Transit Stall Alarm has been acknowledged","","TransitStall.Ack","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Sts_TransitStallDisabled,"1=Transit Stall Alarm has been disabled (will not be sent)","","TransitStall.Disabled","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Sts_TransitStallInhibited,"1=Transit Stall Alarm has been inhibited by logic","","TransitStall.Inhibited","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Sts_TransitStallSuppressed,"1=Transit Stall Alarm has been suppressed (logged only)","","TransitStall.Suppressed","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Sts_IntlkTrip,"1=Valve de-energized by an Interlock NOT OK","","IntlkTrip.Inp","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Alm_IntlkTrip,"1=Alarm: Valve de-energized by an Interlock NOT OK","","IntlkTrip.Alm","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Ack_IntlkTrip,"1=Interlock Trip Alarm has been acknowledged","","IntlkTrip.Ack","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Sts_IntlkTripDisabled,"1=Interlock Trip Alarm is Disabled (not saved or sent)","","IntlkTrip.Disabled","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Sts_IntlkTripInhibited,"1=Interlock Trip Alarm has been inhibited by logic","","IntlkTrip.Inhibited","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Sts_IntlkTripSuppressed,"1=Interlock Trip Alarm has been suppressed (logged only)","","IntlkTrip.Suppressed","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Sts_IOFault,"I/O Comm Fault Status (0=OK, 1=Bad)","","IOFault.Inp","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Alm_IOFault,"1=I/O Fault Alarm","","IOFault.Alm","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Ack_IOFault,"1=I/O Fault Alarm has been acknowledged","","IOFault.Ack","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Sts_IOFaultDisabled,"1=I/O Fault Alarm is Disabled (not saved or sent)","","IOFault.Disabled","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Sts_IOFaultInhibited,"1=I/O Fault Alarm has been inhibited by logic","","IOFault.Inhibited","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
ALIAS,P_ValveSO:AOI,Sts_IOFaultSuppressed,"1=I/O Fault Alarm has been suppressed (logged only)","","IOFault.Suppressed","(RADIX := Decimal, Usage := Output, ExternalAccess := Read/Write, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Rdy_Open,"1=Ready to receive OCmd_Open (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Rdy_Close,"1=Ready to receive OCmd_Close (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Rdy_Bypass,"1=Ready to receive OCmd_Bypass (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Rdy_Check,"1=Ready to receive OCmd_Check (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Rdy_Disable,"1=Ready to receive MCmd_Disable (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Rdy_Enable,"1=Ready to receive MCmd_Enable (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Rdy_Reset,"1=Ready to receive OCmd_Reset (enables HMI button)","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Rdy_ResetAckAll,"1=At least one Alarm or latched Shed condition requires Reset or Ack","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,P_ValveSO,"Unique Parameter Name for auto - discovery","BOOL","","(RADIX := Decimal, Usage := Output, ExternalAccess := Read Only, Required := false, Visible := false)"
TAG,P_ValveSO:AOI,Mode,"Valve Mode Selection","P_Mode","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ValveSO:AOI,IOFault,"I/O Fault Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ValveSO:AOI,IntlkTrip,"Interlock Trip Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ValveSO:AOI,TransitStall,"Valve Transit Stall (moved but did not reach target) Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ValveSO:AOI,FullStall,"Valve Full Stall (did not move) Alarm","P_Alarm","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ValveSO:AOI,Cfg_Tag,"Tagname for display on HMI","STRING_20","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ValveSO:AOI,Cfg_Label,"Label for graphic symbol displayed on HMI","STRING_20","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ValveSO:AOI,Cfg_Desc,"Description for display on HMI","STRING_40","","(Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ValveSO:AOI,Wrk_Open,"1=Requested to OPEN Valve, 0=Requested to CLOSE Valve","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_ValveSO:AOI,Wrk_SimOpenT,"Simulation Delay until Opened","TIMER","","(Usage := Local, ExternalAccess := None)"
TAG,P_ValveSO:AOI,Wrk_SimCloseT,"Simulation Delay until Closed","TIMER","","(Usage := Local, ExternalAccess := None)"
TAG,P_ValveSO:AOI,Wrk_OpenFdbk,"1=LS Feedback shows valve confirmed open","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_ValveSO:AOI,Wrk_Notify,"Buffer for building Val_Notify","DINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_ValveSO:AOI,Wrk_Bypass,"Internal Bypassable Permissives and Interlocks are Bypassed flag","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_ValveSO:AOI,Wrk_Disabled,"Internal Valve is Disabled","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_ValveSO:AOI,Wrk_ClosedFdbk,"1=LS Feedback shows valve confirmed closed","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_ValveSO:AOI,Wrk_TransitStallT,"Timer for Transit Stall Check","TIMER","","(Usage := Local, ExternalAccess := None)"
TAG,P_ValveSO:AOI,Wrk_FullStallT,"Timer for Full Stall Check","TIMER","","(Usage := Local, ExternalAccess := None)"
TAG,P_ValveSO:AOI,Inf_Tab,"Tab to display (FTView ME)","SINT","","(RADIX := Decimal, Usage := Local, ExternalAccess := Read/Write)"
TAG,P_ValveSO:AOI,Wrk_TransitStall,"Transit Stall Shed Fault (latched, requires reset","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_ValveSO:AOI,Wrk_IOFault,"I/O Shed Fault (latched, requires reset)","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_ValveSO:AOI,Wrk_FullStall,"Full Stall Shed Fault (latched, requires reset","BOOL","","(RADIX := Decimal, Usage := Local, ExternalAccess := None)"
TAG,P_ValveSO:AOI,Inf_Type,"Type identifier for HMI navigation","STRING_16","","(Usage := Local, ExternalAccess := Read Only)"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"Basin1_Fliushing_Control_System","A001_FWV1_LDR","********************************************************************************$NIS VALVE AVAILABLE$NPUT ALL CONDITIONS THAT WOULD MAKE VALVE UNAVAILABLE HERE$N********************************************************************************************","OTE(Valve1_Available)","0"
RCOMMENT,"Basin1_Fliushing_Control_System","A001_FWV1_LDR","********************************************************************************$NREQUEST TO OPEN VAVLE$N********************************************************************************************","OTE(Basin1Fwv1_Valve.PCmd_Open)","2"
RCOMMENT,"Basin1_Fliushing_Control_System","A001_FWV1_LDR","********************************************************************************$NTHIS TIME (FLUSH_SEQTIMER) COMES FROM THE HMI AND DETERMINES THE $NVALVE OPEN TIME$N********************************************************************************************","CPT(Timer1.PRE,Flush_Seqtimer*60000)","3"
RCOMMENT,"Basin1_Fliushing_Control_System","A001_FWV1_LDR","************************************************************************************************$NWHEN TIMER IS DONE WE SAY THE VAVLE FLUSH IS DONE FOR THIS VAVLE$N********************************************************************************************","OTE(Valve1_Flush_Done)","5"
RCOMMENT,"Basin1_Fliushing_Control_System","A001_FWV1_LDR","********************************************************************************$NHERE WE TELL THIS VAVLE TO CLOSE WHEN THE NEXT AVAILABLE VALVE$NIS OPENED.$N********************************************************************************************","OTE(Basin1Fwv1_Valve.PCmd_Close)","6"
RCOMMENT,"Basin1_Fliushing_Control_System","Main","===============================================================$NSUB ROUTINE$N===============================================================","JSR(A002_FWV1_FBD,0)","0"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"BSeq_Simple_Run:AOI","Logic","Initialization","JMP(NoGo)","0"
RCOMMENT,"BSeq_Simple_Run:AOI","Logic","Mode","Mode(Mode)","1"
RCOMMENT,"BSeq_Simple_Run:AOI","Logic","State Machine","CLR(Wrk_SMProgCmd)","2"
RCOMMENT,"BSeq_Simple_Run:AOI","Logic","Running state processing.$NInitialize if first scan in run, or the step is complete.$NProcess pause commands and status in run.","OTL(Wrk_TimersUsedInStep.2)","4"
RCOMMENT,"BSeq_Simple_Run:AOI","Logic","Choose outputs based on state machine.$NThis must occur here (between mode and input processing) to guarantee outputs are presented for at least one scan during run.","CLR(Wrk_RealMask)","5"
RCOMMENT,"BSeq_Simple_Run:AOI","Logic","Running state processing.$NInitialize if first scan in run, or the step is complete.$NProcess pause commands and status in run.","OTU(Wrk_PauseBits.9)","6"
RCOMMENT,"BSeq_Simple_Run:AOI","Logic","Manage the Step MinT Timer","RTO(Wrk_StepT,?,?)","7"
RCOMMENT,"BSeq_Simple_Run:AOI","Logic","Manage the Step FaultT Timer","OTE(Sts_StepTO)","8"
RCOMMENT,"BSeq_Simple_Run:AOI","Logic","$'Stopped$' first scan processing.","OTU(Wrk_PauseBits.9)","9"
RCOMMENT,"BSeq_Simple_Run:AOI","Logic","$'Reset$' first scan processing.","MOV(100.0,Inp_Scaling)","10"
RCOMMENT,"BSeq_Simple_Run:AOI","Logic","Process and copy internal values for instruction output interface.","CLR(Wrk_InpMask)","11"
RCOMMENT,"BSeq_Simple_Run:AOI","Logic","Set boolean and real outputs.","MOV(Wrk_ROutputs[7],Out_Real_07)","12"
RCOMMENT,"BSeq_Simple_Run:AOI","Logic","Set interface state and rdy bits.","OTU(MCmd_StepForce)","13"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"BSeq_Simple_Run_64:AOI","Logic","Initialization","JMP(NoGo)","0"
RCOMMENT,"BSeq_Simple_Run_64:AOI","Logic","Mode","Mode(Mode)","1"
RCOMMENT,"BSeq_Simple_Run_64:AOI","Logic","State Machine","CLR(Wrk_SMProgCmd)","2"
RCOMMENT,"BSeq_Simple_Run_64:AOI","Logic","Running state processing.$NInitialize if first scan in run, or the step is complete.$NProcess pause commands and status in run.","OTL(Wrk_TimersUsedInStep.2)","4"
RCOMMENT,"BSeq_Simple_Run_64:AOI","Logic","Choose outputs based on state machine.$NThis must occur here (between mode and input processing) to guarantee outputs are presented for at least one scan during run.","CLR(Wrk_RealMask)","5"
RCOMMENT,"BSeq_Simple_Run_64:AOI","Logic","Running state processing.$NInitialize if first scan in run, or the step is complete.$NProcess pause commands and status in run.","OTU(Wrk_PauseBits.9)","6"
RCOMMENT,"BSeq_Simple_Run_64:AOI","Logic","Manage the Step MinT Timer","RTO(Wrk_StepT,?,?)","7"
RCOMMENT,"BSeq_Simple_Run_64:AOI","Logic","Manage the Step FaultT Timer","OTE(Sts_StepTO)","8"
RCOMMENT,"BSeq_Simple_Run_64:AOI","Logic","$'Stopped$' first scan processing.","OTU(Wrk_PauseBits.9)","9"
RCOMMENT,"BSeq_Simple_Run_64:AOI","Logic","$'Reset$' first scan processing.","MOV(100.0,Inp_Scaling)","10"
RCOMMENT,"BSeq_Simple_Run_64:AOI","Logic","Process and copy internal values for instruction output interface.","CLR(Wrk_InpMask[1])","11"
RCOMMENT,"BSeq_Simple_Run_64:AOI","Logic","Set boolean and real outputs.","MOV(Wrk_ROutputs[7],Out_Real_07)","12"
RCOMMENT,"BSeq_Simple_Run_64:AOI","Logic","Set interface state and rdy bits.","OTU(MCmd_StepForce)","13"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"P_Alarm:AOI","EnableInFalse","============================================================$NP_Alarm: EnableInFalse (False Rung) Handling$N============================================================$NWhen EnableIn is FALSE (False Rung), the Input$N($QInp$Q) is inverted.  This allows the P_Alarm instruction$Nto be used on a simple Ladder Diagram rung:$N$NXIC  (condition)   P_Alarm (Alarm)$N$NAll processing is identical to the normal Logic$Nroutine, except references to Inp are inverted!$N============================================================$NCONFIGURATION$N============================================================$NThis rung gets the Alarm Minimum ON Time Configuration$Nvalue and sets the corresponding timer preset.$NIf the Minimum ON Time Configuration results in a timer preset$Nthat is negative or less than 5 seconds, the preset is set to$N5 seconds.  The bad Config is flagged (Err_Timer).$NBad Config is also flagged if the Cfg_Severity is out of range (valid = 1..4)$N$N#####  V2.0-00 2011-09-30:  Removed configuration for Min Duration,  #####$N#####  added Configuration for Minimum ON Time.  #####","OTE(Sts_Err)","0"
RCOMMENT,"P_Alarm:AOI","EnableInFalse","The Auto Ack time is ALWAYS five seconds, and if the$NMinimun alarm ON time is limited to a minimum of five seconds.$N$N#####  V2.0-00 2011-09-30:  Added rung.  #####","MOV(5000,Wrk_AlmMinOnT.PRE)","1"
RCOMMENT,"P_Alarm:AOI","EnableInFalse","If this alarm does not exist, set it to its default state (no alarm, acknowleded,$Nuninhibited, unsuppressed, enabled) and clear any received commands.$NThen jump over the remainder of the Logic and return.$N$N#####  V2.0-00 2011-09-30:  Added reset of timers.  #####","JMP(End)","2"
RCOMMENT,"P_Alarm:AOI","EnableInFalse","============================================================$NCOMMAND PROCESSING$N============================================================$NThese rungs handle received Commands:$NOperator Commands (OCmd_xx) and Maintenance Commands$N(MCmd_xx) from the HMI and$NProgram Command (PCmd_xx) from other objects.$N$NNOTE:  ALARM COMMANDS ARE ACCEPTED REGARDLESS OF MODE.$N$NThis rung receives the Program Alarm Inhibit Command","OTL(Wrk_Inhibited)","3"
RCOMMENT,"P_Alarm:AOI","EnableInFalse","This rung receives the Program Alarm Uninhibit Command (Uninhibit wins over Inhibit)","OTU(Wrk_Inhibited)","4"
RCOMMENT,"P_Alarm:AOI","EnableInFalse","This rung receives the Operator Alarm Suppress Command","OTL(Suppressed)","5"
RCOMMENT,"P_Alarm:AOI","EnableInFalse","This rung receives the Operator Alarm Unsuppress Command (Unsuppress wins over Suppress)$N$NNOTE: Suppressed can also be set/cleared directly by the HMI (FTA&E support).","OTU(Suppressed)","6"
RCOMMENT,"P_Alarm:AOI","EnableInFalse","This rung receives the Maintenance Alarm Disable Command","OTL(Disabled)","7"
RCOMMENT,"P_Alarm:AOI","EnableInFalse","This rung receives the Maintenance Alarm Enable Command (Enable wins over Disable)$N$NNOTE: Disabled can also be set/cleared directly by the HMI (FTA&E support).","OTU(Disabled)","8"
RCOMMENT,"P_Alarm:AOI","EnableInFalse","This rung receives the Alarm Acknowledge Commands$N$NNOTE: Acknowledge can also be set/cleared directly by the HMI.","OTL(Ack)","9"
RCOMMENT,"P_Alarm:AOI","EnableInFalse","An $QAbnormal Condition$Q is declared if the Input is in its alarm state,$Nand the alarm is not disabled or inhibited.$N$NNOTE:  The alarm (Alm) bit is still set when the alarm is Suppressed, because$Nit must still be logged by the A&E Server (just not shown to Operator).$N$NNOTE:  This rung appears here because the $QAbnormal$Q work bit is$Nused throughout the logic that follows.$N$NNOTE:  The $QInp$Q bit is inverted here (compared to the normal $QLogic$Q routine).$NWhen the rung / EnableIn is false, Input = 0 is the Alarm State.","OTE(Wrk_Abnormal)","10"
RCOMMENT,"P_Alarm:AOI","EnableInFalse","This rung receives the Alarm Reset Commands.$N$NIf the Alarm Reset Command is received and the Input condition is no longer true,$Nthe Alarm is CLEARED and ACKNOWLEDGED (to match ALMD behavior!!!).$N$NIf the Alarm is Disabled or Inhibited, the Alarm is cleared, but if it was$Nwaiting for an Acknowledge, it still needs to be Acked.","OTU(Wrk_Alm)","11"
RCOMMENT,"P_Alarm:AOI","EnableInFalse","============================================================$NALARM GENERATION$N============================================================$NThis rung CLEARS the Alarm when the alarm condition clears and its$NMinimum On Time has expired, IF Reset is NOT Required.$N$NNOTE that Reset Required is also bypassed if the Alarm$Nis Suppressed by the Operator!","OTU(Wrk_Alm)","12"
RCOMMENT,"P_Alarm:AOI","EnableInFalse","If the Alarm Input (Inp) is true (inverted in EnableInFalse) and the alarm is$N(or becomes) Enabled and Uninhibited, this rung sets the Alarm (Alm) bit.$NThe Acknowledge (Ack) bit is cleared when the Alarm initially occurs.$N$N#####  V2.0-00 2011-09-30:  Removed Min Duration timing function.  #####","OTL(Wrk_Alm)","13"
RCOMMENT,"P_Alarm:AOI","EnableInFalse","When the Alarm initially occurs, the Auto Ack timer is started.$NIf this Alarm is set for $QAck Not Required$Q, it is automatically $NAcknowledged after the AutoAck time expires.$N$NThis pulsing of the Ack bit OFF then ON allows the $QAck Not Required$Q$Nconfiguration to be used with View 32, View ME and other legacy$Nalarm systems that don$'t support optional ack.$N$N#####  V2.0-00 2011-09-30:  Added AutoAck implementation of $QAck Not Required$Q  #####","TOF(Wrk_AutoAckT,?,?)","14"
RCOMMENT,"P_Alarm:AOI","EnableInFalse","============================================================$NOPERATOR COMMAND READIES$N============================================================$NThis Alarm is ready for (requires) an Acknowledgement if the Alarm$Nis not Acknowledged (an Acknowledge was Required when the alarm occurred).$NThis Alarm is ready for (requires) a Reset if there is an Alarm, Reset is Required,$Nand the alarm condition has CLEARED.$NIf the Alarm is NOT Suppressed, it is ready for Suppress.$NIf the Alarm IS Suppressed, it is ready for Unsuppress.$NIf the Alarm is NOT Disabled, it is ready for Disable.$NIf the Alarm IS Disabled, it is ready for Enable.$N$NNOTE: This rung appears before the Values/Status rung because the Rdy_Reset$Ncondition is used to eliminate redundant logic in the rung below for Val_Notify.0.","OTE(Rdy_Enable)","15"
RCOMMENT,"P_Alarm:AOI","EnableInFalse","============================================================$NVALUE / STATUS GENERATION$N============================================================$NThis rung copies the internal working status to public Values, Status, Alarm and Ack bits.$NNote that internal working bits are used so that outside objects cannot manipulate$Nthe state of this object by setting/clearing its Status and Alarm bits.$N$NPublic Status is generated for:$NAlarm (with minimum ON time to be seen by polling)$NNotify Level (color, blink)$NAlarm Inhibited$N(Ack, Suppressed and Disabled can be set/cleared by the HMI directly.)$N$N$QAutoAck$Q (Ack not required with timing) is handled here as well.$N$NNOTE that the alarm bell icon will blink, even though the alarm is Acknowledged,$Nif an Alarm Reset is required (to get the Operator$'s attention).$N$N#####  V2.0-00 2011-09-30:  Added Sts_AlmInh to support $QInhibited$Q breadcrumb on HMI. #####$N#####  Changed Minimum On Time to be configurable.  Changed Ack logic to use Auto Ack timer  #####$N#####  and to NOT Ack the alarm on Program Inhibit.  #####","OTE(Sts_AlmInh)","16"
RCOMMENT,"P_Alarm:AOI","Logic","============================================================$NP_Alarm:  PROCESS -- ALARM (sub-block)$N============================================================$NRevision 2.0-00 Release:  2011-09-30$NRemoved MinDuration timer (On-Delay and Off-Delay timing has been$Npushed to containing instruction$'s / routine$'s respondibility).$NAdded separate $QAuto Ack$Q timer and method for Ack Not Required$N(to be compatible with View 32 / ME / SE Legacy alarming).$NAdded Sts_AlmInh for $QAlarm Inhibited$Q breadcrumb.$NAdded Cfg_AlmMinOnT to make the minimum Alm ON time configurable.$NNo longer automatically Acknowledge or Reset on Program Inhibit.$NFixed Disable logic to clearm alarm when Reset Required in order to$Naligned Disable behavior with that of FTA&E Tag Alarm Server.$N============================================================$NThis instruction monitors one input condition and provides one Alarm with:$N* configurable latching, acknowledgement, and severity$N* configurable minimum ON time (e.g., to ensure it is seen by the HMI)$N* commands to inhibit/uninhibit (Prog), suppress/unsuppress (Oper)$Nand disable/enable (Maint) the alarm.$N* FTA&E support for suppress/unsuppress and disable/enable.$N$NNOTE regarding parameter naming:$NFTA&E names (same as ALMD instruction) are used instead$Nof the ANSI/ISA 18.2-2009 names, as follows:$N$QDisabled$Q is the equivalent of $QOut of Service$Q in ISA 18.2.$N$QSuppressed$Q is the equivalent of $QShelved$Q in ISA 18.2.$N$QInhibited$Q is the equivalent of $QSuppressed by Design$Q in ISA 18.2.$N$NThis instruction is usually nested within other instructions, with one instance$Nused for each Alarm generated by the containing instruction.  It may also be$Nused as a standalone instruction for Alarm conditions generated by custom logic.$N============================================================$NPOWERUP / INVALID STATE HANDLING$N============================================================$NAll internal Work (state) bits maintain states through a power cycle and are$Nindependent.  No first-scan logic is required.  See the Prescan routine for$Npowerup / prescan code.$N============================================================$NCONFIGURATION$N============================================================$NThis rung gets the Alarm Minimum ON Time Configuration$Nvalue and sets the corresponding timer preset.$NIf the Minimum ON Time Configuration results in a timer preset$Nthat is negative or less than 5 seconds, the preset is set to$N5 seconds.  The bad Config is flagged (Err_Timer).$NBad Config is also flagged if the Cfg_Severity is out of range (valid = 1..4)$N$N#####  V2.0-00 2011-09-30:  Removed configuration for Min Duration,  #####$N#####  added Configuration for Minimum ON Time.  #####","OTE(Sts_Err)","0"
RCOMMENT,"P_Alarm:AOI","Logic","The Auto Ack time is ALWAYS five seconds, and if the$NMinimun alarm ON time is limited to a minimum of five seconds.$N$N#####  V2.0-00 2011-09-30:  Added rung.  #####","MOV(5000,Wrk_AlmMinOnT.PRE)","1"
RCOMMENT,"P_Alarm:AOI","Logic","If this alarm does not exist, set it to its default state (no alarm, acknowleded,$Nuninhibited, unsuppressed, enabled) and clear any received commands.$NThen jump over the remainder of the Logic and return.$N$N#####  V2.0-00 2011-09-30:  Added reset of timers.  #####","JMP(End)","2"
RCOMMENT,"P_Alarm:AOI","Logic","============================================================$NCOMMAND PROCESSING$N============================================================$NThese rungs handle received Commands:$NOperator Commands (OCmd_xx) and Maintenance Commands$N(MCmd_xx) from the HMI and$NProgram Command (PCmd_xx) from other objects.$N$NNOTE:  ALARM COMMANDS ARE ACCEPTED REGARDLESS OF MODE.$N$NThis rung receives the Program Alarm Inhibit Command","OTL(Wrk_Inhibited)","3"
RCOMMENT,"P_Alarm:AOI","Logic","This rung receives the Program Alarm Uninhibit Command (Uninhibit wins over Inhibit)","OTU(Wrk_Inhibited)","4"
RCOMMENT,"P_Alarm:AOI","Logic","This rung receives the Operator Alarm Suppress Command","OTL(Suppressed)","5"
RCOMMENT,"P_Alarm:AOI","Logic","This rung receives the Operator Alarm Unsuppress Command (Unsuppress wins over Suppress)$N$NNOTE: Suppressed can also be set/cleared directly by the HMI (FTA&E support).","OTU(Suppressed)","6"
RCOMMENT,"P_Alarm:AOI","Logic","This rung receives the Maintenance Alarm Disable Command","OTL(Disabled)","7"
RCOMMENT,"P_Alarm:AOI","Logic","This rung receives the Maintenance Alarm Enable Command (Enable wins over Disable)$N$NNOTE: Disabled can also be set/cleared directly by the HMI (FTA&E support).","OTU(Disabled)","8"
RCOMMENT,"P_Alarm:AOI","Logic","This rung receives the Alarm Acknowledge Commands$N$NNOTE: Acknowledge can also be set/cleared directly by the HMI.","OTL(Ack)","9"
RCOMMENT,"P_Alarm:AOI","Logic","An $QAbnormal Condition$Q is declared if the Input is in its alarm state,$Nand the alarm is not disabled or inhibited.$N$NNOTE:  The alarm (Alm) bit is still set when the alarm is Suppressed, because$Nit must still be logged by the A&E Server (just not shown to Operator).$N$NNOTE:  This rung appears here because the $QAbnormal$Q work bit is$Nused throughout the logic that follows.","OTE(Wrk_Abnormal)","10"
RCOMMENT,"P_Alarm:AOI","Logic","This rung receives the Alarm Reset Commands.$N$NIf the Alarm Reset Command is received and the Input condition is no longer true,$Nthe Alarm is CLEARED and ACKNOWLEDGED (to match ALMD behavior!!!).$N$NIf the Alarm is Disabled or Inhibited, the Alarm is cleared, but if it was$Nwaiting for an Acknowledge, it still needs to be Acked.","OTU(Wrk_Alm)","11"
RCOMMENT,"P_Alarm:AOI","Logic","============================================================$NALARM GENERATION$N============================================================$NThis rung CLEARS the Alarm when the alarm condition clears and its$NMinimum On Time has expired, IF Reset is NOT Required.$N$NNOTE that Reset Required is also bypassed if the Alarm$Nis Suppressed by the Operator!","OTU(Wrk_Alm)","12"
RCOMMENT,"P_Alarm:AOI","Logic","If the Alarm Input (Inp) is true (inverted in EnableInFalse) and the alarm is$N(or becomes) Enabled and Uninhibited, this rung sets the Alarm (Alm) bit.$NThe Acknowledge (Ack) bit is cleared when the Alarm initially occurs.$N$N#####  V2.0-00 2011-09-30:  Removed Min Duration timing function.  #####","OTL(Wrk_Alm)","13"
RCOMMENT,"P_Alarm:AOI","Logic","When the Alarm initially occurs, the Auto Ack timer is started.$NIf this Alarm is set for $QAck Not Required$Q, it is automatically $NAcknowledged after the AutoAck time expires.$N$NThis pulsing of the Ack bit OFF then ON allows the $QAck Not Required$Q$Nconfiguration to be used with View 32, View ME and other legacy$Nalarm systems that don$'t support optional ack.$N$N#####  V2.0-00 2011-09-30:  Added AutoAck implementation of $QAck Not Required$Q  #####","TOF(Wrk_AutoAckT,?,?)","14"
RCOMMENT,"P_Alarm:AOI","Logic","============================================================$NOPERATOR COMMAND READIES$N============================================================$NThis Alarm is ready for (requires) an Acknowledgement if the Alarm$Nis not Acknowledged (an Acknowledge was Required when the alarm occurred).$NThis Alarm is ready for (requires) a Reset if there is an Alarm, Reset is Required,$Nand the alarm condition has CLEARED.$NIf the Alarm is NOT Suppressed, it is ready for Suppress.$NIf the Alarm IS Suppressed, it is ready for Unsuppress.$NIf the Alarm is NOT Disabled, it is ready for Disable.$NIf the Alarm IS Disabled, it is ready for Enable.$N$NNOTE: This rung appears before the Values/Status rung because the Rdy_Reset$Ncondition is used to eliminate redundant logic in the rung below for Val_Notify.0.","OTE(Rdy_Enable)","15"
RCOMMENT,"P_Alarm:AOI","Logic","============================================================$NVALUE / STATUS GENERATION$N============================================================$NThis rung copies the internal working status to public Values, Status, Alarm and Ack bits.$NNote that internal working bits are used so that outside objects cannot manipulate$Nthe state of this object by setting/clearing its Status and Alarm bits.$N$NPublic Status is generated for:$NAlarm (with minimum ON time to be seen by polling)$NNotify Level (color, blink)$NAlarm Inhibited$N(Ack, Suppressed and Disabled can be set/cleared by the HMI directly.)$N$N$QAutoAck$Q (Ack not required with timing) is handled here as well.$N$NNOTE that the alarm bell icon will blink, even though the alarm is Acknowledged,$Nif an Alarm Reset is required (to get the Operator$'s attention).$N$N#####  V2.0-00 2011-09-30:  Added Sts_AlmInh to support $QInhibited$Q breadcrumb on HMI. #####$N#####  Changed Minimum On Time to be configurable.  Changed Ack logic to use Auto Ack timer  #####$N#####  and to NOT Ack the alarm on Program Inhibit.  #####","OTE(Sts_AlmInh)","16"
RCOMMENT,"P_Alarm:AOI","Prescan","============================================================$NPRESCAN (POWERUP) HANDLING$N============================================================$NOn Prescan, clear any $Qlurking$Q Commands.","OTU(MCmd_Enable)","0"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"P_Mode:AOI","EnableInFalse","============================================================$NP_Mode:  EnableInFalse Handling$N============================================================$NFor EnableInFalse (false rung), handle all received Commands behind the scenes$N(as in Hand Mode), but show NO owner.   !!!$N============================================================$NCOMMAND HANDLING$N============================================================$NNOTE:  These rungs MUST be in the order given to meet the following$Nmultiple-actions-at-the-same-time scenarios:$N$N* Maintenance Release beats Maintenance Acquire$N* Program Release beats Program Acquire$N* Program Unlock beats Program Lock$N* Operator Unlock beats Operator Acquire and Lock (results in Oper Unlocked)$N* Operator Acquire/Lock must come after Program Unlock$N* Program Acquire must come after Operator Unlock$N============================================================$NMCmd_Acq: Acquire for Maintenance Mode","OTL(Wrk_Maint)","0"
RCOMMENT,"P_Mode:AOI","EnableInFalse","MCmd_Rel: Release from Maintenance Mode","OTU(Wrk_Maint)","1"
RCOMMENT,"P_Mode:AOI","EnableInFalse","PCmd_Lock: Lock Program Mode","OTL(Wrk_Locked)","2"
RCOMMENT,"P_Mode:AOI","EnableInFalse","PCmd_Unlock: Unlock Program Mode","OTU(Wrk_Locked)","3"
RCOMMENT,"P_Mode:AOI","EnableInFalse","OCmd_AcqLock: Operator Acquire and Lock (take from Program if not locked)","OTL(Wrk_Locked)","4"
RCOMMENT,"P_Mode:AOI","EnableInFalse","OCmd_Unlock: Unlock Operator Mode","OTU(Wrk_Locked)","5"
RCOMMENT,"P_Mode:AOI","EnableInFalse","PCmd_Acq: Acquire for Program Mode$N$N#####  V2.0-00 2011-09-30:  Ignore PCmd_Acq, PCmd_Rel and default to Prog if Cfg_ProgDefault = 1  #####","OTL(Wrk_Prog)","6"
RCOMMENT,"P_Mode:AOI","EnableInFalse","PCmd_Rel: Release from Program Mode$N$N#####  V2.0-00 2011-09-30:  Ignore PCmd_Acq, PCmd_Rel and default to Prog if Cfg_ProgDefault = 1  #####","OTU(Wrk_Prog)","7"
RCOMMENT,"P_Mode:AOI","EnableInFalse","============================================================$NSTATUS GENERATION$N============================================================$NWith EnableIn False, there is NO owner !!!  ALL Mode Status bits$NEXCEPT Sts_NoMode are CLEARED!$N$N#####  V2.0-00  2011-09-30:  Added Sts_NoMode, Val (enumeration)  #####","CLR(Val)","8"
RCOMMENT,"P_Mode:AOI","EnableInFalse","Public Status for:$NSts_ProgOperSel:    Program/Operator substate selection (Prog = 1, Oper = 0)$NSts_ProgOperLock:    Program/Operator Lock substate selection (Locked = 1, Unlocked = 0)","OTE(Sts_ProgOperLock)","9"
RCOMMENT,"P_Mode:AOI","EnableInFalse","============================================================$NOPERATOR COMMAND READIES$N============================================================$NReady for OPERATOR ACQUIRE AND LOCK comand if the Mode is$N is NOT Locked. (Oper $Qacquire and lock$Q when in Prog Mode is a $Qgrab$Q!)$N$NReady fpr OPERATOR UNLOCK command if the Lock is set and the$Ninternal Program bit is cleared (Operator has the lock, even if in Ovrd, Maint or Hand!)$N$NReady for MAINTENANCE ACQUIRE if internal Maintenance latch is NOT set.$N$NReady for MAINTENANCE RELEASE if internal Maintenance latch IS set.","OTE(Rdy_Rel)","10"
RCOMMENT,"P_Mode:AOI","Logic","============================================================$NP_Mode:  PROCESS -- MODE SELECTOR$N============================================================$NRevision 2.0-00 Release:  2011-09-30$NAdded Sts_NoMode, Val (Mode enumeration).$NAdded self-named parameter.$NAdded Cfg_ProgDefault, Default/Non-Default enumerations.$N (See Parameter descriptions.)$N============================================================$NThis instruction provides selection of Mode (owner) for a Device level$Nobject  (from highest priority to lowest):$N* NO Mode (EnableIn is false)$N*  Hand (typically tracks hardwired control of device)$N*  Maint (Maintenance) (taken out of normal service for maintenance)$N*  Ovrd (Override) (typically used for process overrides)$N*  Prog  (Program) (automated control, and default if Cfg_ProgNorm = 1)$N*  Oper (Operator (manual control, and default if Cfg_ProgNorm = 0)$N$NThe current mode is shown with Status bits and also as the$Nprimary Value for the instruction: an enumeration as follows:$N0 = No Mode, 1 = Hand, 2 = Maintenance, 3 = Override, 4 = Program (Locked),$N5 = Program (Unlocked), 6 = Operator (Locked), 7 = Operator (Unlocked).$N============================================================$NCOMMAND HANDLING$N============================================================$NNOTE:  These rungs MUST be in the order given to meet the following$Nmultiple-actions-at-the-same-time scenarios:$N$N* Maintenance Release beats Maintenance Acquire$N* Program Release beats Program Acquire$N* Program Unlock beats Program Lock$N* Operator Unlock beats Operator Acquire and Lock (results in Oper Unlocked)$N* Operator Acquire/Lock must come after Program Unlock$N* Program Acquire must come after Operator Unlock$N$NIf Cfg_ProgDefault = 1, the logic above is treated as if PCmd_Acq$Nis always set and PCmd_Rel is always cleared -- so the Mode$Ndefaults to Program (instead of Operator) if no other mode is requesting.$N============================================================$NMCmd_Acq: Acquire for Maintenance Mode","OTL(Wrk_Maint)","0"
RCOMMENT,"P_Mode:AOI","Logic","MCmd_Rel: Release from Maintenance Mode","OTU(Wrk_Maint)","1"
RCOMMENT,"P_Mode:AOI","Logic","PCmd_Lock: Lock Program Mode","OTL(Wrk_Locked)","2"
RCOMMENT,"P_Mode:AOI","Logic","PCmd_Unlock: Unlock Program Mode","OTU(Wrk_Locked)","3"
RCOMMENT,"P_Mode:AOI","Logic","OCmd_AcqLock: Operator Acquire and Lock (take from Program if not locked)","OTL(Wrk_Locked)","4"
RCOMMENT,"P_Mode:AOI","Logic","OCmd_Unlock: Unlock Operator Mode","OTU(Wrk_Locked)","5"
RCOMMENT,"P_Mode:AOI","Logic","PCmd_Acq: Acquire for Program Mode$N$N#####  V2.0-00 2011-09-30:  Ignore PCmd_Acq, PCmd_Rel and default to Prog if Cfg_ProgDefault = 1  #####","OTL(Wrk_Prog)","6"
RCOMMENT,"P_Mode:AOI","Logic","PCmd_Rel: Release from Program Mode$N$N#####  V2.0-00 2011-09-30:  Ignore PCmd_Acq, PCmd_Rel and default to Prog if Cfg_ProgDefault = 1  #####","OTU(Wrk_Prog)","7"
RCOMMENT,"P_Mode:AOI","Logic","============================================================$NSTATUS GENERATION$N============================================================$NThis rung determines the Mode based on the states of the inputs and internal working bits.$NThe logic here does the vast mahority of the implementation of the Mode selection rules.$N$NBetween the internal working bits used above and the rules implemented here,$Noutside objects cannot manipulate the state of this object by setting/clearing its Status bits.$N$NPublic Status is generated for:$N*  Hand Mode$N*  Maintenance Mode$N*  Override Mode$N*  Program Mode$N*  Operator Mode$N*  No Mode (none of the above)$N$N#####  V2.0-00  2011-09-30:  Added Sts_NoMode, Val (enumeration)  #####","OTU(Sts_NoMode)","8"
RCOMMENT,"P_Mode:AOI","Logic","Public Status for:$NSts_ProgOperSel:    Program/Operator substate selection (Prog = 1, Oper = 0)$NSts_ProgOperLock:    Program/Operator Lock substate selection (Locked = 1, Unlocked = 0)","OTE(Sts_ProgOperLock)","9"
RCOMMENT,"P_Mode:AOI","Logic","============================================================$NOPERATOR COMMAND READIES$N============================================================$NReady for OPERATOR ACQUIRE AND LOCK comand if the Mode is$N is NOT Locked. (Oper $Qacquire and lock$Q when in Prog Mode is a $Qgrab$Q!)$N$NReady fpr OPERATOR UNLOCK command if the Lock is set and the$Ninternal Program bit is cleared (Operator has the lock, even if in Ovrd, Maint or Hand!)$N$NReady for MAINTENANCE ACQUIRE if internal Maintenance latch is NOT set.$N$NReady for MAINTENANCE RELEASE if internal Maintenance latch IS set.","OTE(Rdy_Rel)","10"
RCOMMENT,"P_Mode:AOI","Prescan","============================================================$NPRESCAN (POWERUP) HANDLING$N============================================================$NOn Prescan, clear any $Qlurking$Q Commands.","OTU(PCmd_Unlock)","0"
RCOMMENT,"P_Mode:AOI","Prescan","#####  V2.0-00  2011-09-30:  Added rung to default the Mode on prescan.  #####$N$NOn Prescan, go to the default Mode (between Program and Operator)$Nand clear the Prog/Oper Mode Lock.","OTE(Wrk_Prog)","1"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"P_Mode_Old:AOI","EnableInFalse","============================================================$NP_Mode:  EnableInFalse Handling$N============================================================$NFor EnableInFalse (false rung), handle all received Commands behind the scenes$N(as in Hand Mode), but show NO owner.   !!!$N============================================================$NCOMMAND HANDLING$N============================================================$NNOTE:  These rungs MUST be in the order given to meet the following$Nmultiple-actions-at-the-same-time scenarios:$N$N* Maintenance Release beats Maintenance Acquire$N* Program Release beats Program Acquire$N* Program Unlock beats Program Lock$N* Operator Unlock beats Operator Acquire and Lock (results in Oper Unlocked)$N* Operator Acquire/Lock must come after Program Unlock$N* Program Acquire must come after Operator Unlock$N$NMCmd_Acq: Acquire for Maintenance Mode","OTL(Wrk_Maint)","0"
RCOMMENT,"P_Mode_Old:AOI","EnableInFalse","MCmd_Rel: Release from Maintenance Mode","OTU(Wrk_Maint)","1"
RCOMMENT,"P_Mode_Old:AOI","EnableInFalse","PCmd_Lock: Lock Program Mode","OTL(Wrk_Locked)","2"
RCOMMENT,"P_Mode_Old:AOI","EnableInFalse","PCmd_Unlock: Unlock Program Mode","OTU(Wrk_Locked)","3"
RCOMMENT,"P_Mode_Old:AOI","EnableInFalse","OCmd_AcqLock: Operator Acquire and Lock (take from Program if not locked)","OTL(Wrk_Locked)","4"
RCOMMENT,"P_Mode_Old:AOI","EnableInFalse","OCmd_Unlock: Unlock Operator Mode","OTU(Wrk_Locked)","5"
RCOMMENT,"P_Mode_Old:AOI","EnableInFalse","PCmd_Acq: Acquire for Program Mode","OTL(Wrk_Prog)","6"
RCOMMENT,"P_Mode_Old:AOI","EnableInFalse","PCmd_Rel: Release from Program Mode","OTU(Wrk_Prog)","7"
RCOMMENT,"P_Mode_Old:AOI","EnableInFalse","============================================================$NSTATUS GENERATION$N============================================================$NWith EnableIn False, there is NO owner !!!  ALL Mode Status bits are CLEARED!","OTU(Sts_Oper)","8"
RCOMMENT,"P_Mode_Old:AOI","EnableInFalse","Public Status for:$NSts_ProgOperSel:    Program/Operator substate selection (Prog = 1, Oper = 0)$NSts_ProgOperLock:    Program/Operator Lock substate selection (Locked = 1, Unlocked = 0)","OTE(Sts_ProgOperLock)","9"
RCOMMENT,"P_Mode_Old:AOI","EnableInFalse","============================================================$NOPERATOR COMMAND READIES$N============================================================$NReady for OPERATOR ACQUIRE AND LOCK comand if the Mode is$N is NOT Locked. (Oper $Qacquire and lock$Q when in Prog Mode is a $Qgrab$Q!)$N$NReady fpr OPERATOR UNLOCK command if the Lock is set and the$Ninternal Program bit is cleared (Operator has the lock, even if in Ovrd, Maint or Hand!)$N$NReady for MAINTENANCE ACQUIRE if internal Maintenance latch is NOT set.$N$NReady for MAINTENANCE RELEASE if internal Maintenance latch IS set.","OTE(Rdy_Rel)","10"
RCOMMENT,"P_Mode_Old:AOI","Logic","============================================================$NP_Mode:  PROCESS -- MODE SELECTOR$N============================================================$NRevision 1.0-00 - Release:  2009-04-24$NInitial formal release$N============================================================$NThis instruction provides selection of Mode (owner) for a Device (CM) level object:$N*  Hand (typ. hardwired)  (highest priority)$N*  Maint (taken out of normal service for maintenance)$N*  Ovrd (typ. process or soft safety interlock)$N*  Prog  (automated control)$N*  Oper (manual control)  (lowest priority owner)$N* NO Mode (EnableIn is false)$N============================================================$NCOMMAND HANDLING$N============================================================$NNOTE:  These rungs MUST be in the order given to meet the following$Nmultiple-actions-at-the-same-time scenarios:$N$N* Maintenance Release beats Maintenance Acquire$N* Program Release beats Program Acquire$N* Program Unlock beats Program Lock$N* Operator Unlock beats Operator Acquire and Lock (results in Oper Unlocked)$N* Operator Acquire/Lock must come after Program Unlock$N* Program Acquire must come after Operator Unlock$N$NMCmd_Acq: Acquire for Maintenance Mode","OTL(Wrk_Maint)","0"
RCOMMENT,"P_Mode_Old:AOI","Logic","MCmd_Rel: Release from Maintenance Mode","OTU(Wrk_Maint)","1"
RCOMMENT,"P_Mode_Old:AOI","Logic","PCmd_Lock: Lock Program Mode","OTL(Wrk_Locked)","2"
RCOMMENT,"P_Mode_Old:AOI","Logic","PCmd_Unlock: Unlock Program Mode","OTU(Wrk_Locked)","3"
RCOMMENT,"P_Mode_Old:AOI","Logic","============================================================$NDWSD SPECIFIC MODIFICATION$N============================================================$NThis rung monitors the Hand input and requests Operator Lock as a $N$Qone shot$Q upon release of Hand mode.$N$NDWSD is using a $Qtwo-mode$Q model where PCmd_Acq is tied high ($Q1$Q) which forces$N$QAutomatic$Q (Program) mode when the Operator Lock is released.$N$NThe Wrk_RelHand Bool was added to provide this One Shot functionality$N$NChange initially applied to v1.5 of P_Mode on 6 July 2011","OTE(Wrk_RelHand)","4"
RCOMMENT,"P_Mode_Old:AOI","Logic","============================================================$NDWSD SPECIFIC MODIFICATION$N============================================================$NThis rung monitors the Hand input and requests Operator Lock as a $N$Qone shot$Q upon release of Hand mode.$N$NDWSD is using a $Qtwo-mode$Q model where PCmd_Acq is tied high ($Q1$Q) which forces$N$QAutomatic$Q (Program) mode when the Operator Lock is released.$N$NThe Wrk_RelHand Bool was added to provide this One Shot functionality$N$NChange initially applied to v1.5 of P_Mode on 6 July 2011","OTE(Wrk_RelHand2)","5"
RCOMMENT,"P_Mode_Old:AOI","Logic","OCmd_AcqLock: Operator Acquire and Lock (take from Program if not locked)","OTL(Wrk_Locked)","6"
RCOMMENT,"P_Mode_Old:AOI","Logic","OCmd_Unlock: Unlock Operator Mode","OTU(Wrk_Locked)","7"
RCOMMENT,"P_Mode_Old:AOI","Logic","PCmd_Acq: Acquire for Program Mode","OTL(Wrk_Prog)","8"
RCOMMENT,"P_Mode_Old:AOI","Logic","PCmd_Rel: Release from Program Mode","OTU(Wrk_Prog)","9"
RCOMMENT,"P_Mode_Old:AOI","Logic","============================================================$NSTATUS GENERATION$N============================================================$NThis rung determines the Mode based on the states of the inputs and internal working bits.$NThe logic here does the vast mahority of the implementation of the Mode selection rules.$N$NBetween the internal working bits used above and the rules implemented here,$Noutside objects cannot manipulate the state of this object by setting/clearing its Status bits.$N$NPublic Status is generated for:$N*  Hand Mode$N*  Maintenance Mode$N*  Override Mode$N*  Program Mode$N*  Operator Mode","OTE(Sts_Oper)","10"
RCOMMENT,"P_Mode_Old:AOI","Logic","Public Status for:$NSts_ProgOperSel:    Program/Operator substate selection (Prog = 1, Oper = 0)$NSts_ProgOperLock:    Program/Operator Lock substate selection (Locked = 1, Unlocked = 0)","OTE(Sts_ProgOperLock)","11"
RCOMMENT,"P_Mode_Old:AOI","Logic","============================================================$NOPERATOR COMMAND READIES$N============================================================$NReady for OPERATOR ACQUIRE AND LOCK comand if the Mode is$N is NOT Locked. (Oper $Qacquire and lock$Q when in Prog Mode is a $Qgrab$Q!)$N$NReady fpr OPERATOR UNLOCK command if the Lock is set and the$Ninternal Program bit is cleared (Operator has the lock, even if in Ovrd, Maint or Hand!)$N$NReady for MAINTENANCE ACQUIRE if internal Maintenance latch is NOT set.$N$NReady for MAINTENANCE RELEASE if internal Maintenance latch IS set.","OTE(Rdy_Rel)","12"
RCOMMENT,"P_Mode_Old:AOI","Prescan","============================================================$NPRESCAN (POWERUP) HANDLING$N============================================================$NOn Prescan, clear any $Qlurking$Q Commands.","OTU(PCmd_Unlock)","0"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"P_Perm:AOI","EnableInFalse","============================================================$NOFF-SCAN (EnableIn is False) STATUS$N============================================================$NIf this Permissives instruction is OFF-SCAN (rung is false or EnableIn is false in FBD),$Nthen set the summary Permissive OK Status bits to FALSE (0).","OTU(Sts_NBPermOK)","0"
RCOMMENT,"P_Perm:AOI","Logic","============================================================$NP_Perm:  PROCESS -- PERMISSIVES$N============================================================$NRevision 2.0-00 Release:  2011-09-30$NAdded self-name parameter and Inf_Type for navigation, auto-discover.$NUsing V18 Parameter Aliasing, eliminated input mapping rungs.$NAdded Cfg_Desc, Cfg_Label, Cfg_Tag STRINGs.$NAdded display of Local STRING Tags on header (this) rung.$N============================================================$NThis Instruction monitors up to 16 Permissive conditions.  It provides these features:$N$N*  The $QOK$Q state of each Permissive Input is configurable.  By default,$Neach Input is 1 when OK to start, 0 when not OK to start.$N*  Permissives may be configured as Bypassable.  A separate Sts_NBPermOK $N(Non-Bypassable Permissives OK) status is provided, which the destination$Nobject can use forBypass, Maintenance and other functions,$Nwhere Bypassable Permissives can be ignored.$N$NAll Permissive Inputs must be in their configured $QOK$Q states$Nfor the P_Perm instruction to provide a $QPermOK$Q status.$NAll non-bypassable Permissive inputs must be in their configured $QOK$Q states$Nfor the P_Perm instruction to provide a $QNBPermOK$Q status.$N============================================================$NSHOW LOCAL STRINGS$N============================================================$NThe STRINGs containing the text associated with each instance of this$Ninstruction cannot be Input or Output Parameters, because STRINGs are not$N $'atomic$' types. (Inputs and Outputs must be SINT, INT, DINT, REAL, or BOOL.)$N$NIn order to make it easier to find and configure these STRINGs, this rung$Nwas added.  THE JMP (and the LBL on the following rung)$NMUST NOT BE REMOVED!!!$N$NTo view the STRINGs, go to the instruction instance (in LD or FBD), RIGHT-click$Nto bring up the context menu and select $QOpen Instruction Logic$Q.$NThis rung will appear with the STRING values for the selected instance.$NYou may double-click the STRING values here to modify them as well.","LOWER(Cfg_CondTxt[14],Cfg_CondTxt[15])","0"
RCOMMENT,"P_Perm:AOI","Logic","============================================================$NINPUT GATHERING   #####  V2.0 2011-09-30  #####$N============================================================$NThis object uses word-wise logic.  The 16 permissive inputs are aliased$Nto the Wrk_Inp word, so no logic is needed to collect the individual$Nconditions.  We can immediately start processing the permissive logic.$N============================================================$NHANDLE $QOK STATE$Q INVERSIONS$N============================================================$NThis rung inverts the Input bits whose $QOK State$Q is 1 (0 to Run).$NThe resulting Wrk_Inp word is ALL ONES if all permissive inputs are $QOK$Q.","CPT(Wrk_InpInv,Wrk_Inp XOR(NOT(Cfg_OKState)))","1"
RCOMMENT,"P_Perm:AOI","Logic","============================================================$NPERMISSIVE PROCESSING$N============================================================$NIf an input is Bypassable, or the input is ON, that bit is OK as far as$NBypassable Permissives are concerned.","OR(Cfg_Bypassable,Wrk_InpInv,Wrk_Bypass)","2"
RCOMMENT,"P_Perm:AOI","Logic","============================================================$NSTATUS GENERATION$N============================================================$NThese rungs generate the public Status for this object.$N$NThe Input Permissive conditions are passed through (wordwise)$Ndirectly to the final Permissive Status","MOV(Wrk_InpInv,Sts_Perm)","3"
RCOMMENT,"P_Perm:AOI","Logic","If all the Permissive Status bits are ONE, there is no condition to$Nprevent starting the affected equipment: show the Permissive Status as $QOK$Q$N$NIf all the Non-Bypassable permissives are true, set the NBPermOK Status as $QOK$Q$N$NIf Permissive Bypassing is active (this input usually comes from a downstream$Ndevice block: motor, valve, etc.), then make this Status known to the HMI.","OTE(Sts_BypActive)","4"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"P_Reset:AOI","EnableInFalse","============================================================$NP_Reset:  RESET EnableIn False Handling$N============================================================$NOn EnableIn False:$N$NClear the bit used to detect EnableIn transition from False to True$Nin preparation for the next transition$N$N(See main Logic Routine for EnableIn False-to-True triggering of Reset.)","OTU(Wrk_EnableInONS)","0"
RCOMMENT,"P_Reset:AOI","EnableInFalse","============================================================$NCONFIGURATION$N============================================================$NThis rung takes the configured Output Hold time and calculates$Nthe appropriate hold timer preset.  A negative prese","OTE(Sts_Err)","1"
RCOMMENT,"P_Reset:AOI","EnableInFalse","============================================================$NCOMMAND AND INPUT HANDLING$N============================================================$NThis rung processes received Reset Commands from:$N$N1.  Higher-level strategies via Program Command$N2","TOF(Wrk_HoldT,?,?)","2"
RCOMMENT,"P_Reset:AOI","EnableInFalse","The Hold Timer $Qdone$Q bit comes on immediately and stays on$Nfor the hold time.  If it, or any held-on reset initiator, is TRUE, set the Output.","OTE(Out_Reset)","3"
RCOMMENT,"P_Reset:AOI","EnableInFalse","If an associated object is ready to be reset, set the Inp_Reset pin on this object.$NThen, if something needs reset, and we$'re not already resetting it, enable this$Nobject$'s Reset Pushbutton.$N$N(If this function is not wired, the button will generally be enabled.$NIf this function IS wired, it is suggested to make the enabled Reset button$NFLASH to alert the operator that a reset is required!)","OTE(Rdy_Reset)","4"
RCOMMENT,"P_Reset:AOI","Logic","============================================================$NP_Reset:  PROCESS -- RESET$N============================================================$NRevision 1.0-00 - Release:  2009-04-24$NInitial formal release$N=======================================","OTE(Sts_Err)","0"
RCOMMENT,"P_Reset:AOI","Logic","============================================================$NCOMMAND AND INPUT HANDLING$N============================================================$NThis rung processes received Reset Commands from:$N$N1.  Higher-level strategies via Program Command$N2","TOF(Wrk_HoldT,?,?)","1"
RCOMMENT,"P_Reset:AOI","Logic","The Hold Timer $Qdone$Q bit comes on immediately and stays on$Nfor the hold time.  If it, or any held-on reset initiator, is TRUE, set the Output.","OTE(Out_Reset)","2"
RCOMMENT,"P_Reset:AOI","Logic","If an associated object is ready to be reset, set the Inp_Reset pin on this object.$NThen, if something needs reset, and we$'re not already resetting it, enable this$Nobject$'s Reset Pushbutton.$N$N(If this function is not wired, the button will generally be enabled.$NIf this function IS wired, it is suggested to make the enabled Reset button$NFLASH to alert the operator that a reset is required!)","OTE(Rdy_Reset)","3"
RCOMMENT,"P_Reset:AOI","Prescan","============================================================$NPRESCAN (POWERUP) HANDLING$N============================================================$NOn Prescan, clear any $Qlurking$Q Commands.","OTU(PCmd_Reset)","0"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"P_ValveMO:AOI","EnableInFalse","============================================================$NOFF-SCAN (EnableIn is False) STATUS$N============================================================$NHandle $QNO MODE$Q Selection using the standard P_Mode AOI (EnableInFalse Routine, false scan required!).$N$NNOTE:  IN ORDER TO AVOID USING AN $QAFI$Q (which will generate a routine verify warning),$NTHIS RUNG USES AN XIC of Cfg_PCmdClear, followed by an XIO of the SAME BIT$Nto ensure P_Mode is SCANNED FALSE ($QNO MODE$Q).$N$NTHIS IS NOT DEAD CODE AND MUST APPEAR EXACTLY AS SHOWN FOR PROPER OPERATION!$N$N#####  V2.0-00  2011-09-30:  Added Sts_NoMode, Val_Mode  #####","Mode(Mode)","0"
RCOMMENT,"P_ValveMO:AOI","EnableInFalse","First-Come First-Served Ownership Arbitration still needs to happen, even when device is disabled.$NIf a requestor supplies a non-zero Owner ID and the current owner is NONE (zero),$NOwnership is assigned to the requesting ID.  When that requestor sets the Owner ID back$Nto zero, Ownership is relinquished back to NONE.","MOV(PSet_Owner,Val_Owner)","1"
RCOMMENT,"P_ValveMO:AOI","EnableInFalse","$QLurking$Q Program Commands are cleared if they are set as $QEdge$Q triggered$N(cleared by this object as received).$N(Lurking Acknowledge Commands are left to perform their action.)","OTU(PCmd_Close)","2"
RCOMMENT,"P_ValveMO:AOI","EnableInFalse","$QLurking$Q Operator Commands are cleared, as well as Program Reset.","OTU(PCmd_Reset)","3"
RCOMMENT,"P_ValveMO:AOI","EnableInFalse","The Override Command is set to NONE.","CLR(Inp_OvrdCmd)","4"
RCOMMENT,"P_ValveMO:AOI","EnableInFalse"," $NSince we$'re not processing Operator Commands, we$'re not READY for them either!","OTU(Rdy_ResetAckAll)","5"
RCOMMENT,"P_ValveMO:AOI","EnableInFalse","============================================================$NLIMIT SWITCH FEEDBACK DETERMINATION$N============================================================$NThis first $QOpen$Q feedback is a copy of the Open Limit Switch, if it is being$Nused, or a copy of the OPPOSITE of the Closed Limit Switch, if ONLY the$NClosed Limit Switch is being used.","OTE(Wrk_OpenFdbk)","6"
RCOMMENT,"P_ValveMO:AOI","EnableInFalse","This first $QClosed$Q feedback is a copy of the Closed Limit Switch, if it is being$Nused, or a copy of the OPPOSITE of the Open Limit Switch, if ONLY the$NOpen Limit Switch is being used.","OTE(Wrk_ClosedFdbk)","7"
RCOMMENT,"P_ValveMO:AOI","EnableInFalse","============================================================$NVALVE FEEDBACK STATUS$N============================================================$NThis rung generates the Valve Feedback Status bits and Enumeration Value:$NLimit Switch Fail, if the Limit Switches are in the fail position (won$'t be seen in Simulation)$NOpened, if the valve is confirmed opened$NClosed, if the valve is confirmed closed$NMoving, if the Limit Switches show travel","CLR(Val_Fdbk)","8"
RCOMMENT,"P_ValveMO:AOI","EnableInFalse","Clear the latched Shed faults, and reset the fault condition and simulation / command retrigger timers.$N$N#####  V2.0-00  2011-09-30:  Added clearing of latched Shed faults and reset of simulation / retrigger timers.  #####","OTL(Wrk_Stop)","9"
RCOMMENT,"P_ValveMO:AOI","EnableInFalse","Outputs are cleared when Disabled (EnableInFalse).$N$N#####  V2.0-00  2011-09-30:  Made into a separate rung.  #####","OTU(Out_Stop)","10"
RCOMMENT,"P_ValveMO:AOI","EnableInFalse","Show the motor as Disabled and Not Ready, not Available, and with no$NMaintenance Bypass breadcrumb.$NClear remaining Status bits.$NShow the enumerated valve command as NONE.$NShow the enumerated valve status as DISABLED.$NShow the enumerated valve fault status as NONE.$N$N#####  V2.0-00  2011-09-30:  Made into a separate rung, added enumerated values.  #####","CLR(Val_Fault)","11"
RCOMMENT,"P_ValveMO:AOI","EnableInFalse","Clear the Alarms and the Notify Status, and show the Alarms Inhibited breadcrumb.$N$N#####  V2.0-00  2011-09-30:  Made into a separate rung.  #####","CLR(Val_Notify)","12"
RCOMMENT,"P_ValveMO:AOI","Logic","============================================================$NP_ValveMO:  PROCESS -- MOTOR OPERATED VALVE$N============================================================$NRevision 2.0-01 Release:  2011-11-11$NRevision 2.0-00 2011-09-30:  Added logic for Sts_AlmInh, Sts_MaintByp,$NSts_NotRdy for breadcrumbs.  Using P_Alarm, P_Mode 2.0.$NMade TransitStall and FullStall alarms not exist if no limit switch feedbacks exist.$NFixed 1 LS logic.$NAdded Val_Fdbk, Val_Cmd, Val_Sts, Val_Fault, Shed Fault Logic, self-named par.$NFixed resetting of fail timers on Reset command.$NChanged Override state to enummerated input Inp_OvrdCmd.$NAdded OCmd_ResetAckAll, Rdy_ResetAckAll.$NAdded display of Local STRING Tags on header (this) rung.$NRevision 2.0-01 2011-11-11: Modified Sts_NotRdy logic to$Ncorrect shed conditions for Actuator Fault, I/O Fault.$N============================================================$NThis Instruction controls and monitors a motor-operated$Nvalve (typ. two position: opened, closed) and provides:$N$N*  Ability to command valve to open, command valve to close, and,$Noptionally, command valve to stop motion (operator only)$N*  Ability to reverse valve travel (for valves with the ability to accept a Stop output)$N*  Monitoring of limit switch feedback, display of actual valve status$N*  Detection of failure to move (full stall), failure to reach position (transit stall)$N*  Monitoring of Permissive conditions to motor the valve open, and separate$NPermissive conditions to motor the valve closed$N*  Simulation, providing feedback of a working valve while disabling outputs$N*  Monitoring of I/O communication faults$N*  Alarms for Full Stall, Transit Stall, Actuator Failure (separate input), I/O Fault$N*  $QAvailable$Q status for use by automation logic to know whether valve$N      can be controlled by other objects.$N$NModes are provided by a P_Mode Add-On Instruction instance.$NAlarms are provided by P_Alarm Add-On Instruction instances.$NModes of operation: Operator, Program, Override, Maintenance, Hand$N============================================================$NSHOW LOCAL STRINGS$N============================================================$NThe STRINGs containing the text associated with each instance of this$Ninstruction cannot be Input or Output Parameters, because STRINGs are not$N $'atomic$' types. (Inputs and Outputs must be SINT, INT, DINT, REAL, or BOOL.)$N$NIn order to make it easier to find and configure these STRINGs, this rung$Nwas added.  THE JMP (and the LBL on the following rung)$NMUST NOT BE REMOVED!!!$N$NTo view the STRINGs, go to the instruction instance (in LD or FBD), RIGHT-click$Nto bring up the context menu and select $QOpen Instruction Logic$Q.$NThis rung will appear with the STRING values for the selected instance.$NYou may double-click the STRING values here to modify them as well.","LOWER(Cfg_Label,Cfg_Desc)","0"
RCOMMENT,"P_ValveMO:AOI","Logic","============================================================$NMODE PROCESSING$N============================================================$NThis rung handles received Mode Inputs and Commands:$N$NNOTE:  All Commands for Mode, Alarm are aliased directly to the$Ncorresponding Commands in the contained P_Mode and P_Alarm AOIs.","Mode(Mode)","1"
RCOMMENT,"P_ValveMO:AOI","Logic","This rung handles simple First-Come First-Served Ownership Arbitration.$NIf a requestor supplies a non-zero Owner ID and the current owner is NONE (zero),$NOwnership is assigned to the requesting ID.  When that requestor sets the Owner ID back$Nto zero, Ownership is relinquished back to NONE.","MOV(PSet_Owner,Val_Owner)","2"
RCOMMENT,"P_ValveMO:AOI","Logic","============================================================$NCONFIGURATION PROCESSING$N============================================================$NIf the Valve does not have an Open Limit Switch input,$Nit cannot be used for Valve feedback checking.","OTU(Cfg_UseOpenLS)","3"
RCOMMENT,"P_ValveMO:AOI","Logic","If the Valve does not have a Closed Limit Switch input,$Nit cannot be used for Valve feedback checking.","OTU(Cfg_UseClosedLS)","4"
RCOMMENT,"P_ValveMO:AOI","Logic","Enter the time (in seconds) for the Valve to successfully move from its starting position before declaring a fault.$NEnter the time (in seconds) for the Valve to successfully reach its target position before declaring a fault.$NEnter the time (in seconds) to pulse the valve outputs (Out_Open, Out_Close and Out_Stop)$N(zero - held on continuously)$N$NIf the timer preset calcuated wraps negative (more than 2.14... million seconds), then max out the$NTimer Preset.  Note that a negative timer preset will fault the controller!!!","MOV(Wrk_OpenPulseT.PRE,Wrk_StopPulseT.PRE)","5"
RCOMMENT,"P_ValveMO:AOI","Logic","Enter the time (in seconds) to echo back the desired state when Opened or Closed in simulation$N$NHandle timer preset invalid values as above.","MOV(Wrk_SimOpenT.PRE,Wrk_SimCloseT.PRE)","6"
RCOMMENT,"P_ValveMO:AOI","Logic","This rung generates a summary Bad Config status, simply an OR of the individual bits provided above$N(in the Configuration handling section).","OTE(Sts_Err)","7"
RCOMMENT,"P_ValveMO:AOI","Logic","============================================================$NSIMULATION TIMERS$N============================================================$NIf the Valve SHOULD BE Opened, run an Open Simulation Timer.","TON(Wrk_SimOpenT,?,?)","8"
RCOMMENT,"P_ValveMO:AOI","Logic","If the valve SHOULD BE Closed, run a Close Simulation Timer.","TON(Wrk_SimCloseT,?,?)","9"
RCOMMENT,"P_ValveMO:AOI","Logic","============================================================$NDEVICE FEEDBACK PROCESSING$N============================================================$NIf the Valve is NOT being simulated and it HAS and IS USING limit switch feedback,$Nuse the state of the limit switch feedback inputs as the Valve position.$N$NIf the Valve is being simulated or has no limit switch feedback, use the Sim Timers to provide$N$Qfake$Q feedback signals based on the simulation time to Open and time to Close.","OTE(Wrk_OpenFdbk)","10"
RCOMMENT,"P_ValveMO:AOI","Logic","If the Valve is NOT being simulated and it HAS and IS USING limit switch feedback,$Nuse the state of the limit switch feedback inputs as the Valve position.$N$NIf the Valve is being simulated or has no limit switch feedback, use the Sim Timers to provide$N$Qfake$Q feedback signals based on the simulation time to Open and time to Close.","OTE(Wrk_ClosedFdbk)","11"
RCOMMENT,"P_ValveMO:AOI","Logic","This rung generates the Valve Feedback Status bits and Enumeration Value:$NLimit Switch Fail, if the Limit Switches are in the fail position (won$'t be seen in Simulation)$NOpened, if the valve is confirmed opened$NClosed, if the valve is confirmed closed$NMoving, if the Limit Switches show travel","CLR(Val_Fdbk)","12"
RCOMMENT,"P_ValveMO:AOI","Logic","============================================================$NINTERLOCK / PERMISSIVE BYPASS / CHECK COMMAND HANDLING$N============================================================$NThe Bypass Command bypasses the Bypassable Permissives and Interlocks.","OTL(Wrk_Bypass)","13"
RCOMMENT,"P_ValveMO:AOI","Logic","The Check Command enables checking of ALL$NPermissives and Interlocks (cancels the bypass).","OTU(Wrk_Bypass)","14"
RCOMMENT,"P_ValveMO:AOI","Logic","If the internal Bypass flag is set, Bypassable Interlocks and Permissives ARE BYPASSED.$NBypassing is ACTIVE if Bypass selected OR in Maintenance Mode,$Nor in Override Mode if Override Bypassing is configured.$N$N##### V2.0-00  2011-09-30: Moved Rung to take advantage of these bits in logic below #####","OTE(Sts_BypActive)","15"
RCOMMENT,"P_ValveMO:AOI","Logic","If a Maintenance Bypass function is active, display the Maintenance Bypass$NIndicator (triangle symbol) on the graphic symbol.  Bypass functions are:$N*  Interlock / Permissive Bypass function is enabled$N*  Valve HAS opened position feedback designated by engineer, but$Nmaintenance has selected to NOT USE opened position feedback$N*  Valve HAS closed position feedback designated by engineer, but$Nmaintenance has selected to NOT USE closed position feedback","OTE(Sts_MaintByp)","16"
RCOMMENT,"P_ValveMO:AOI","Logic","Ready for Interlock / Permissive Bypass if not bypassed.$NReady to cancel Bypass (resume checking) if bypassed.$N$N#####  V2.0-00  2011-09-30 : Rung moved to be with other Bypass rungs.  #####","OTE(Rdy_Check)","17"
RCOMMENT,"P_ValveMO:AOI","Logic","============================================================$NDEVICE DISABLE/ENABLE COMMAND HANDLING$N============================================================$NThe Disable Command disables the Analog Output.$N$N#####  V2.0-00  2011-09-30 :  Modified to require Maintenance ACQUIRED  #####$N#####  (and so Ready to Release Maintenance Acq.!)  to Enable / Disable.  #####","OTL(Wrk_Disabled)","18"
RCOMMENT,"P_ValveMO:AOI","Logic","The Enable Command cancels the Disable and enables the Analog Output.$N$N#####  V2.0-00  2011-09-30 :  Modified to require Maintenance ACQUIRED  #####$N#####  (and so Ready to Release Maintenance Acq.!)  to Enable / Disable.  #####","OTU(Wrk_Disabled)","19"
RCOMMENT,"P_ValveMO:AOI","Logic","If the internal Disabled flag is set, the motor is DISABLED.","OTE(Sts_Disabled)","20"
RCOMMENT,"P_ValveMO:AOI","Logic","Ready to Disable device if in Maintenance Mode and device is NOT Disabled.$NReady to Enable device if in Maintenance Mode and device IS Disabled.$N$N#####  V2.0-00  2011-09-30: Modified to require Maintenance Mode,   #####$N#####  and moved to be grouped with other Disable/Enable logic  #####","OTE(Rdy_Enable)","21"
RCOMMENT,"P_ValveMO:AOI","Logic","============================================================$NALARM RESET COMMAND HANDLING$N============================================================$NThis rung handles the Alarm Reset Input and Commands$Nand the $QReset and Ack All$Q Operator Command.$N$NThis rung processes received Reset Commands from:$N$N1.  The Operator via HMI Operator Command, or$N2.  Higher-level strategies via Program Command$N3.  Pushbuttons or other block via Input$N4.  Resets initiated by other device Operator Commands (if configured to do so)$N$Nand forwards the Reset to ALL Alarms and latched Shed conditions.","OTU(Wrk_IOFault)","22"
RCOMMENT,"P_ValveMO:AOI","Logic","============================================================$NVALVE COMMAND HANDLING$N============================================================$NThe Valve is NOT READY if Interlocks are not OK, Permissives do not allow$Nthe valve to move, there is a latched Fault, the valve is disabled, or$Nthere is a configuration error.$N$N#####  V2.0-01  2011-11-11:  Modified to correcly handle  #####$N#####  shed conditions for Actuator Fault, I/O Fault  #####","OTE(Sts_NotRdy)","23"
RCOMMENT,"P_ValveMO:AOI","Logic","The device is AVAILABLE to be controlled by other objects$Nif it IS in Program Mode and it IS NOT $QNot Ready$Q.","OTE(Sts_Available)","24"
RCOMMENT,"P_ValveMO:AOI","Logic","These next rungs, in priority order, determine whether the valve should be open or closed.$N$NIf a Valve OPEN command is received in Operator, Program or Maintenance$NMode, or if in Override Mode and the Override State is OPEN, mark the valve TO OPEN.$N(Modes are mutually exclusive, thus handling the priority.)","OTL(Wrk_Open)","25"
RCOMMENT,"P_ValveMO:AOI","Logic","If a Valve CLOSE command is received in Operator, Program or Maintenance$NMode, or if in Override Mode and the Override State is CLOSE, mark the valve TO CLOSE.$N(Modes are mutually exclusive, thus handling the priority.)","OTL(Wrk_Close)","26"
RCOMMENT,"P_ValveMO:AOI","Logic","If a Stop command is received in Operator, Maintenance or Override Mode,$Nflag the Valve to STOP.","OTL(Wrk_Stop)","27"
RCOMMENT,"P_ValveMO:AOI","Logic","Higher Priority: HAND always wins over other Modes:$NIf in Hand, have the Valve follow the position feedback.$NIf the valve is confirmed Opened, set to Open.$NIf the valve is confirmed Closed, set to Close$NIf the valve has no feedback, or if no position is confirmed, set to STOPPED.","OTL(Wrk_Stop)","28"
RCOMMENT,"P_ValveMO:AOI","Logic","============================================================$NVALVE FULL STALL DETECTION$N============================================================$NIf the Valve was told to Open and it hasn$'t moved off the Fully Closed position,$Nor if it was told to Close and it hasn$'t moved off the Fully Open position,$Nrun the Full Stall Timer.","TON(Wrk_FullStallT,?,?)","29"
RCOMMENT,"P_ValveMO:AOI","Logic","If the Full Stall timer times out, the valve never moved when it was commanded.$NIf we$'re not in Maintenance mode, issue a Full Stall Status.","OTE(Sts_FullStall)","30"
RCOMMENT,"P_ValveMO:AOI","Logic","============================================================$NVALVE TRANSIT STALL DETECTION$N============================================================$NIf the Valve was told to Open and it hasn$'t reached fully Open,$Nor if it was told to Close and it hasn$'t reached fully Closed,$Nrun the Transit Stall Timer.","TON(Wrk_TransitStallT,?,?)","31"
RCOMMENT,"P_ValveMO:AOI","Logic","If the Transit Stall timer times out and we$'re not in Maintenance Mode,$Nraise the Transit Stall Status (valve moved but did not reach target).","OTE(Sts_TransitStall)","32"
RCOMMENT,"P_ValveMO:AOI","Logic","============================================================$NSHED ON FAULT LOGIC$N============================================================$NThis rung handles latching in of conditions which are configured to cause$Nthe valve to shed (stop).$N$N#####  V2.0-00  2011-09-30 : New rung, new Shed function added  #####$N#####  V2.0-01  2011-11-11:  Shed logic for Actuator Fault,   #####$N#####  I/O Fault moved to Sts_NotRdy logic, above.  #####","OTL(Wrk_TransitStall)","33"
RCOMMENT,"P_ValveMO:AOI","Logic","Highest Priority:$NIf the Valve has a Shed Fault OR if the Valve is Disabled or$Nhas a Configuration Error, stop the valve.$N$N#####  V2.0-00  2011-09-30 : New rung, new Shed function added  #####","OTL(Wrk_Stop)","34"
RCOMMENT,"P_ValveMO:AOI","Logic","============================================================$NOUTPUT GENERATION$N============================================================$NIf the Valve should be Opened and not Stopped (for change of direction),$Nrun the OPEN Pulse Timer$N$NIf the Valve should be Closed and not Stopped (for change of direction),$Nrun the CLOSE Pulse Timer$N$NIf the Valve should be Stopped, run the STOP Pulse Timer.$NWhen the timer is DONE, if we ARE doing a Change of Direction,$Ncontinue by Opening or Closing the valve (as appropriate) and turn off the STOP request.","OTU(Wrk_Stop)","35"
RCOMMENT,"P_ValveMO:AOI","Logic","If the Valve is NOT SIMULATED, NOT FAULTED and NOT DISABLED, generate the$Nappropriate outputs for the Valve.$N$NIf the Valve should be Opened and not Stopped, energize the$NOut_Open Output until we get feedback that the Valve is Opened$Nor the pulse time is done.$N$NIf the Valve should be Closed and not Stopped, energize the$NOut_Close Output until we get feedback that the Valve is Closed$Nor the pulse time is done.$N$NIf the Valve should be Stopped, energize Out_Stop for the full pulse duration.","OTE(Out_Stop)","36"
RCOMMENT,"P_ValveMO:AOI","Logic","============================================================$NDEVICE STATUS GENERATION$N============================================================$NVal_Sts is the current device status, as determined by this AOI,$Nbased on its knowledge of commands executed and feedback.$N(This is the status that should be monitored by, for example, FT Historian.)$N0 = Powerup / Unknown$N1 = Closed$N2 = Opened$N3 = Commanded to Close$N4 = Commanded to Open$N5 = Closing$N6 = Opening$N7 = Stopped$N33 = Device Disabled$N$NVal_Fault is the current device fault status, as determined by this AOI,$Nbased on its knowledge of commands executed and feedback.$N(This is the fault status that should be monitored by, for example, FT Historian.)$N0 = None$N16 = Full Stall$N17 = Transit Stall$N32 = I/O Fault (from Input)$N34 = Configuration Error$N$N#####  V2.0-00  2011-09-30 : New rung, new parameters Val_Sts, Val_Fault added  #####","CLR(Val_Fault)","37"
RCOMMENT,"P_ValveMO:AOI","Logic","These rungs generate the Stopped, Commanded to Openm Opening, Opened,$NCommanded to Close, Closing and Closed Status bits.$N$NIf the Valve is in HAND and HAS NO POSITION FEEDBACK, its state is meaningless;$Nturn off ALL the Sts_xxx states!!!!!$N$NIf the valve is told to stop, show the valve as STOPPED, unless the feedbacks$Nconfirm it is fully opened or fully closed -- then show it as such.$N$NIf the Valve is commanded to Open and the feedback shows it hasn$'t moved yet,$Nthe Valve is COMMANDED TO OPEN.$N$NIf the Valve is commanded to Open and the feedback doesn$'t yet show it Opened,$Nthe Valve is OPENING.$N$NIf the Valve is commanded to Open and the feedback shows it Opened,$Nthe Valve is OPENED.$N$NIf the Valve is commanded to Close and the feedback shows it hasn$'t moved yet,$Nthe Valve is COMMANDED TO CLOSE.$N$NIf the Valve is commanded to Close and the feedback does not show Closed,$Nthe Valve is CLOSING.$N$NIf the Valve is commanded to Close and the feedback shows it has Closed,$Nthe Valve is CLOSED.","MOV(1,Val_Sts)","38"
RCOMMENT,"P_ValveMO:AOI","Logic","This rung handles the remaining Val_Cmd, Val_Sts and Val_Fault enumerated values.","MOV(34,Val_Fault)","39"
RCOMMENT,"P_ValveMO:AOI","Logic","============================================================$NOPERATOR COMMAND READIES$N============================================================$NReady to Open if in Operator Manual, Closed, and Permissives and Interlocks are OK.$N$NReady to Close if in Operator Manual and (Opened or Opening).","OTE(Rdy_Stop)","40"
RCOMMENT,"P_ValveMO:AOI","Logic","============================================================$NALARM PROCESSING$N============================================================$NHandle Valve Full Stall (never moved) Alarm Processing using the standard P_Alarm AOI.","Alarm(FullStall)","41"
RCOMMENT,"P_ValveMO:AOI","Logic","Handle Valve Transit Stall (moved but did not complete move)$NAlarm Processing using the standard P_Alarm AOI.","Alarm(TransitStall)","42"
RCOMMENT,"P_ValveMO:AOI","Logic","Handle Valve Actuator Fault Alarm Processing using the standard P_Alarm AOI.","Alarm(ActuatorFault)","43"
RCOMMENT,"P_ValveMO:AOI","Logic","Handle I/O Fault Alarm Processing using the standard P_Alarm AOI.","Alarm(IOFault)","44"
RCOMMENT,"P_ValveMO:AOI","Logic","If ANY alarm is Disabled, Inhibited or Suppressed, set the Alarm Inhibit$Nsummary status bit (which puts the $QI$Q box on the graphic symbol).","OTE(Sts_AlmInh)","45"
RCOMMENT,"P_ValveMO:AOI","Logic","============================================================$NNOTIFICATION VALUE$N============================================================$NIndicate the current alarm notification level as the max of any of the alarms:$N0 = none$N2 = info or prompt only$N4 = warning$N6 = exception (equipment impact)$N8 = fault (equipment failure)$NAdd one for any unsuppressed alarm that is not acknowledged$Nor if any Reset is required (Rdy_Reset = 1) (for blink).$N$N#####  V2.0-00  2011-09-30: Modified to also blink when Reset is Required,  #####$N#####  and moved down to after the Rdy_Reset logic.  #####","MOV(Wrk_Notify,Val_Notify)","46"
RCOMMENT,"P_ValveMO:AOI","Prescan","============================================================$NPRESCAN (POWERUP) HANDLING$N============================================================$NOn Prescan, set the Ownership to NO OWNER (0).","CLR(Val_Owner)","0"
RCOMMENT,"P_ValveMO:AOI","Prescan","$QLurking$Q Program Commands are cleared if they are set as $QEdge$Q triggered$N(cleared by this object as received).$N(Lurking Acknowledge Commands are left to perform their action.)","OTU(PCmd_Close)","1"
RCOMMENT,"P_ValveMO:AOI","Prescan","$QLurking$Q Operator Commands are cleared, as well as Program Reset.","OTU(PCmd_Reset)","2"
RCOMMENT,"P_ValveMO:AOI","Prescan","The Override Command is set to NONE.","CLR(Inp_OvrdCmd)","3"
RCOMMENT,"P_ValveMO:AOI","Prescan","Clear the latched Run Command, latched Shed faults,$Nand reset the fault condition and command retrigger timers.","RES(Wrk_SimCloseT)","4"
RCOMMENT,"P_ValveMO:AOI","Prescan","All Outputs are de-energized on Prescan.","OTU(Out_Stop)","5"
RCOMMENT,"P_ValveMO:AOI","Prescan","On Prescan, clear the following:$NVal_Cmd (no command active)$NVal_Fdbk (device position not determined)$NVal_Sts (device status powerup / unknown)$N$N#####  Rev. 2.0, 2011-09-30: Added Val_Cmd, Val_Fdbk, Val_Sts  #####","CLR(Val_Sts)","6"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"P_ValveSO:AOI","EnableInFalse","============================================================$NOFF-SCAN (EnableIn is False) STATUS$N============================================================$NHandle $QNO MODE$Q Selection using the standard P_Mode AOI (EnableInFalse Routine, false scan required!).$N$NNOTE:  IN ORDER TO AVOID USING AN $QAFI$Q (which will generate a routine verify warning),$NTHIS RUNG USES AN XIC of Cfg_PCmdClear, followed by an XIO of the SAME BIT$Nto ensure P_Mode is SCANNED FALSE ($QNO MODE$Q).$N$NTHIS IS NOT DEAD CODE AND MUST APPEAR EXACTLY AS SHOWN FOR PROPER OPERATION!$N$N#####  V2.0-00  2011-09-30:  Added Sts_NoMode, Val_Mode  #####","Mode(Mode)","0"
RCOMMENT,"P_ValveSO:AOI","EnableInFalse","First-Come First-Served Ownership Arbitration still needs to happen, even when device is disabled.$NIf a requestor supplies a non-zero Owner ID and the current owner is NONE (zero),$NOwnership is assigned to the requesting ID.  When that requestor sets the Owner ID back$Nto zero, Ownership is relinquished back to NONE.","MOV(PSet_Owner,Val_Owner)","1"
RCOMMENT,"P_ValveSO:AOI","EnableInFalse","$QLurking$Q Program Commands are cleared if they are set as $QEdge$Q triggered$N(cleared by this object as received).$N(Lurking Acknowledge Commands are left to perform their action.)","OTU(PCmd_Close)","2"
RCOMMENT,"P_ValveSO:AOI","EnableInFalse","$QLurking$Q Operator Commands are cleared, as well as Program Reset.","OTU(PCmd_Reset)","3"
RCOMMENT,"P_ValveSO:AOI","EnableInFalse","The Override Command is set to NONE.","CLR(Inp_OvrdCmd)","4"
RCOMMENT,"P_ValveSO:AOI","EnableInFalse","Since we$'re not processing Operator Commands, we$'re not READY for them either!","OTU(Rdy_ResetAckAll)","5"
RCOMMENT,"P_ValveSO:AOI","EnableInFalse","============================================================$NLIMIT SWITCH FEEDBACK DETERMINATION$N============================================================$NThis first $QOpen$Q feedback is a copy of the Open Limit Switch, if it is being$Nused, or a copy of the OPPOSITE of the Closed Limit Switch, if ONLY the$NClosed Limit Switch is being used.","OTE(Wrk_OpenFdbk)","6"
RCOMMENT,"P_ValveSO:AOI","EnableInFalse","This first $QClosed$Q feedback is a copy of the Closed Limit Switch, if it is being$Nused, or a copy of the OPPOSITE of the Open Limit Switch, if ONLY the$NOpen Limit Switch is being used.","OTE(Wrk_ClosedFdbk)","7"
RCOMMENT,"P_ValveSO:AOI","EnableInFalse","============================================================$NVALVE FEEDBACK STATUS$N============================================================$NThis rung generates the Valve Feedback Status bits and Enumeration Value:$NLimit Switch Fail, if the Limit Switches are in the fail position (won$'t be seen in Simulation)$NOpened, if the valve is confirmed opened$NClosed, if the valve is confirmed closed$NMoving, if the Limit Switches show travel","CLR(Val_Fdbk)","8"
RCOMMENT,"P_ValveSO:AOI","EnableInFalse","Clear the latched Shed faults, and reset the fault condition and simulation / command retrigger timers.$N$N#####  V2.0-00  2011-09-30:  Added clearing of latched Shed faults and reset of simulation / retrigger timers.  #####","OTL(Wrk_Open)","9"
RCOMMENT,"P_ValveSO:AOI","EnableInFalse","Outputs are cleared when Disabled (EnableInFalse).$N$N#####  V2.0-00  2011-09-30:  Made into a separate rung.  #####","OTU(Out)","10"
RCOMMENT,"P_ValveSO:AOI","EnableInFalse","Show the motor as Disabled and Not Ready, not Available, and with no$NMaintenance Bypass breadcrumb.$NClear remaining Status bits.$NShow the enumerated valve command as NONE.$NShow the enumerated valve status as DISABLED.$NShow the enumerated valve fault status as NONE.$N$N#####  V2.0-00  2011-09-30:  Made into a separate rung, added enumerated values.  #####","CLR(Val_Fault)","11"
RCOMMENT,"P_ValveSO:AOI","EnableInFalse","Clear the Alarms and the Notify Status, and show the Alarms Inhibited breadcrumb.$N$N#####  V2.0-00  2011-09-30:  Made into a separate rung.  #####","CLR(Val_Notify)","12"
RCOMMENT,"P_ValveSO:AOI","Logic","============================================================$NP_ValveSO:  PROCESS -- SOLENOID OPERATED VALVE$N============================================================$NRevision 2.0-01 Release:  2011-11-11$NRelease 2.0-00 2011-09-30:   Added logic for Sts_AlmInh, Sts_MaintByp,$NSts_NotRdy for breadcrumbs.  Using P_Alarm, P_Mode 2.0.$NMade TransitStall and FullStall alarms not exist if no limit switch feedbacks exist.$NFixed 1 LS logic.$NAdded Val_Fdbk, Val_Cmd, Val_Sts, Val_Fault, Inf_Type, self-named parameter.$NAdded shed faults.  Fixed resetting of fail timers on Reset command.$NChanged Override state to enumerated input Inp_OvrdCmd.$NAdded OCmd_ResetAckAll, Rdy_ResetAckAll.$NFixed Cfg_ time descriptions.$NAdded display of Local STRING Tags on header (this) rung.$NRelease 2.0-01  2011-11-11:  Modified Sts_NotRdy logic to handle$NI/O Fault shed / no shed conditions.$N============================================================$NThis Instruction controls and monitors a single solenoid operated$Nvalve (typ. two position: opened, closed) and provides:$N$N*  Support for fail open (energize to close) and fail closed (energize to open, default) valves$N*  Monitoring of limit switch feedback, display of actual valve status$N*  Detection of failure to move (full stall), failure to reach position (transit stall)$N*  Monitoring of Permissive conditions to allow energizing$N*  Monitoring of Interlock conditions to de-energize$N*  Simulation, providing feedback of a working valve while disabling outputs$N*  Monitoring of I/O communication faults$N*  Alarms for Full Stall, Transit Stall, Interlock Trip, I/O Fault$N*  $QAvailable$Q status for use by automation logic to know whether valve$N      can be controlled by other objects.$N$NModes are provided by a P_Mode Add-On Instruction instance.$NAlarms are provided by P_Alarm Add-On Instruction instances.$NModes of operation: Operator, Program, Override, Maintenance, Hand$N============================================================$NSHOW LOCAL STRINGS$N============================================================$NThe STRINGs containing the text associated with each instance of this$Ninstruction cannot be Input or Output Parameters, because STRINGs are not$N $'atomic$' types. (Inputs and Outputs must be SINT, INT, DINT, REAL, or BOOL.)$N$NIn order to make it easier to find and configure these STRINGs, this rung$Nwas added.  THE JMP (and the LBL on the following rung)$NMUST NOT BE REMOVED!!!$N$NTo view the STRINGs, go to the instruction instance (in LD or FBD), RIGHT-click$Nto bring up the context menu and select $QOpen Instruction Logic$Q.$NThis rung will appear with the STRING values for the selected instance.$NYou may double-click the STRING values here to modify them as well.","LOWER(Cfg_Label,Cfg_Desc)","0"
RCOMMENT,"P_ValveSO:AOI","Logic","============================================================$NMODE PROCESSING$N============================================================$NThis rung handles received Mode Inputs and Commands:$N$NNOTE:  All Commands for Mode, Alarm are aliased directly to the$Ncorresponding Commands in the contained P_Mode and P_Alarm AOIs.","Mode(Mode)","1"
RCOMMENT,"P_ValveSO:AOI","Logic","This rung handles simple First-Come First-Served Ownership Arbitration.$NIf a requestor supplies a non-zero Owner ID and the current owner is NONE (zero),$NOwnership is assigned to the requesting ID.  When that requestor sets the Owner ID back$Nto zero, Ownership is relinquished back to NONE.","MOV(PSet_Owner,Val_Owner)","2"
RCOMMENT,"P_ValveSO:AOI","Logic","============================================================$NCONFIGURATION$N============================================================$NIf the Valve does not have an Open Limit Switch input,$Nit cannot be used for Valve feedback checking.","OTU(Cfg_UseOpenLS)","3"
RCOMMENT,"P_ValveSO:AOI","Logic","If the Valve does not have a Closed Limit Switch input,$Nit cannot be used for Valve feedback checking.","OTU(Cfg_UseClosedLS)","4"
RCOMMENT,"P_ValveSO:AOI","Logic","Enter the time (in seconds) for the Valve to successfully move from its starting position before declaring a fault.$NEnter the time (in seconds) for the Valve to successfully reach its target position before declaring a fault.$NEnter the time (in seconds) to pulse the valve outputs (Out_Open, Out_Close and Out_Stop)$N(zero - held on continuously)$N$NIf the timer preset calcuated wraps negative (more than 2.14... million seconds), then max out the$NTimer Preset.  Note that a negative timer preset will fault the controller!!!","OTE(Err_Timer)","5"
RCOMMENT,"P_ValveSO:AOI","Logic","Enter the time (in seconds) to echo back the desired state when Opened or Closed in simulation$N$NHandle timer preset invalid values as above.","MOV(Wrk_SimOpenT.PRE,Wrk_SimCloseT.PRE)","6"
RCOMMENT,"P_ValveSO:AOI","Logic","This rung generates a summary Bad Config status, simply an OR of the individual bits provided above$N(in the Configuration handling section).","OTE(Sts_Err)","7"
RCOMMENT,"P_ValveSO:AOI","Logic","============================================================$NSIMULATION TIMERS$N============================================================$NIf the Valve SHOULD BE Opened, run an Open Simulation Timer.","TON(Wrk_SimOpenT,?,?)","8"
RCOMMENT,"P_ValveSO:AOI","Logic","If the valve SHOULD BE CLosed, run a Close Simulation Timer.","TON(Wrk_SimCloseT,?,?)","9"
RCOMMENT,"P_ValveSO:AOI","Logic","============================================================$NLIMIT SWITCH FEEDBACK DETERMINATION$N============================================================$NIf the Valve is being simulated or has no limit switch feedback, use the Sim Timers to provide$N$Qfake$Q feedback signals based on the simulation time to Open and time to Close.$N$NIf the Valve is NOT being simulated and it HAS and IS USING limit switch feedback,$Nuse the state of the limit switch feedback inputs as the Valve position.","OTE(Wrk_OpenFdbk)","10"
RCOMMENT,"P_ValveSO:AOI","Logic","If the Valve is being simulated or has no limit switch feedback, use the Sim Timers to provide$N$Qfake$Q feedback signals based on the simulation time to Open and time to Close.$N$NIf the Valve is NOT being simulated and it HAS and IS USING limit switch feedback,$Nuse the state of the limit switch feedback inputs as the Valve position.","OTE(Wrk_ClosedFdbk)","11"
RCOMMENT,"P_ValveSO:AOI","Logic","This rung generates the Valve Feedback Status bits and Enumeration Value:$NLimit Switch Fail, if the Limit Switches are in the fail position (won$'t be seen in Simulation)$NOpened, if the valve is confirmed opened$NClosed, if the valve is confirmed closed$NMoving, if the Limit Switches show travel","CLR(Val_Fdbk)","12"
RCOMMENT,"P_ValveSO:AOI","Logic","============================================================$NINTERLOCK / PERMISSIVE BYPASS / CHECK COMMAND HANDLING$N============================================================$NThe Bypass Command bypasses the Bypassable Permissives and Interlocks.","OTL(Wrk_Bypass)","13"
RCOMMENT,"P_ValveSO:AOI","Logic","The Check Command enables checking of ALL$NPermissives and Interlocks (cancels the bypass).","OTU(Wrk_Bypass)","14"
RCOMMENT,"P_ValveSO:AOI","Logic","If the internal Bypass flag is set, Bypassable Interlocks and Permissives ARE BYPASSED.$NBypassing is ACTIVE if Bypass selected OR in Maintenance Mode,$Nor in Override Mode if Override Bypassing is configured.$N$N##### V2.0-00  2011-09-30: Moved Rung to take advantage of these bits in logic below #####","OTE(Sts_BypActive)","15"
RCOMMENT,"P_ValveSO:AOI","Logic","If a Maintenance Bypass function is active, display the Maintenance Bypass$NIndicator (triangle symbol) on the graphic symbol.  Bypass functions are:$N*  Interlock / Permissive Bypass function is enabled$N*  Valve HAS opened position feedback designated by engineer, but$Nmaintenance has selected to NOT USE opened position feedback$N*  Valve HAS closed position feedback designated by engineer, but$Nmaintenance has selected to NOT USE closed position feedback","OTE(Sts_MaintByp)","16"
RCOMMENT,"P_ValveSO:AOI","Logic","Ready for Interlock / Permissive Bypass if not bypassed.$NReady to cancel Bypass (resume checking) if bypassed.$N$N#####  V2.0-00  2011-09-30 : Rung moved to be with other Bypass rungs.  #####","OTE(Rdy_Check)","17"
RCOMMENT,"P_ValveSO:AOI","Logic","============================================================$NDEVICE DISABLE/ENABLE COMMAND HANDLING$N============================================================$NThe Disable Command disables the Analog Output.$N$N#####  V2.0-00  2011-09-30 :  Modified to require Maintenance ACQUIRED  #####$N#####  (and so Ready to Release Maintenance Acq.!)  to Enable / Disable.  #####","OTL(Wrk_Disabled)","18"
RCOMMENT,"P_ValveSO:AOI","Logic","The Enable Command cancels the Disable and enables the Analog Output.$N$N#####  V2.0-00  2011-09-30 :  Modified to require Maintenance ACQUIRED  #####$N#####  (and so Ready to Release Maintenance Acq.!)  to Enable / Disable.  #####","OTU(Wrk_Disabled)","19"
RCOMMENT,"P_ValveSO:AOI","Logic","If the internal Disabled flag is set, the motor is DISABLED.","OTE(Sts_Disabled)","20"
RCOMMENT,"P_ValveSO:AOI","Logic","Ready to Disable device if in Maintenance Mode and device is NOT Disabled.$NReady to Enable device if in Maintenance Mode and device IS Disabled.$N$N#####  V2.0-00  2011-09-30: Modified to require Maintenance Mode,   #####$N#####  and moved to be grouped with other Disable/Enable logic  #####","OTE(Rdy_Enable)","21"
RCOMMENT,"P_ValveSO:AOI","Logic","============================================================$NALARM RESET COMMAND HANDLING$N============================================================$NThis rung handles the Alarm Reset Input and Commands$Nand the $QReset and Ack All$Q Operator Command.$N$NThis rung processes received Reset Commands from:$N$N1.  The Operator via HMI Operator Command, or$N2.  Higher-level strategies via Program Command$N3.  Pushbuttons or other block via Input$N4.  Resets initiated by other device Operator Commands (if configured to do so)$N$Nand forwards the Reset to ALL Alarms and latched Shed conditions.","OTU(Wrk_IOFault)","22"
RCOMMENT,"P_ValveSO:AOI","Logic","============================================================$NVALVE COMMAND HANDLING$N============================================================$NThe Valve is NOT READY if Interlocks are not OK, Permissives do not allow$Nthe valve to move, there is a latched Fault, the valve is disabled, or$Nthere is a configuration error.","OTE(Sts_NotRdy)","23"
RCOMMENT,"P_ValveSO:AOI","Logic","##### Rev. 2-0-00, 2011-09-30: Modified Rung #####$N####  Most logic has been moved to the Not Ready rung above  #####$N$NThe motor is AVAILABLE to be run by automation if it is in PROGRAM$NMode and the $QNot Ready$Q status is cleared.","OTE(Sts_Available)","24"
RCOMMENT,"P_ValveSO:AOI","Logic","These rungs, in priority order, determine whether the valve should be open or closed.$N$NIf a Valve OPEN command is received in Operator, Program or Maintenance$NMode, or if in Override Mode and the Override State is OPEN, mark the valve TO OPEN.$N(Modes are mutually exclusive, thus handling the priority.)","OTL(Wrk_Open)","25"
RCOMMENT,"P_ValveSO:AOI","Logic","If a Valve CLOSE command is received in Operator, Program or Maintenance$NMode, or if in Override Mode and the Override State is CLOSE, mark the valve TO CLOSE.","OTU(Wrk_Open)","26"
RCOMMENT,"P_ValveSO:AOI","Logic","Higher Priority:$NIf Interlocks are not OK (Non-Bypassable not OK, or bypassable not OK$Nand not bypassed by Maintenance, Override or Bypass Command), $Nset it to its FAIL STATE.$N$NIf it is NOT in its fail state (if it is energized) and the Interlock$Nde-energized it, raise the Interlock Trip alarm.","OTU(Wrk_Open)","27"
RCOMMENT,"P_ValveSO:AOI","Logic","Higher Priority: HAND always wins over other modes:$NIf in Hand, have the Valve follow the position feedback.$NIf the valve is Fail Open, have it set to Open if NOT confirmed FULLY CLOSED.$NIf the valve is Fail Close, have it set to Close if NOT confirmed FULLY OPEN.","OTU(Wrk_Open)","28"
RCOMMENT,"P_ValveSO:AOI","Logic","============================================================$NVALVE FULL STALL DETECTION$N============================================================$NIf the Valve was told to Open and it hasn$'t moved off the Fully Closed position,$Nor if it was told to Close and it hasn$'t moved off the Fully Open position,$Nrun the Full Stall Timer.","TON(Wrk_FullStallT,?,?)","29"
RCOMMENT,"P_ValveSO:AOI","Logic","If the Full Stall timer times out, the valve never moved when it was commanded.$NIf we$'re not in Maintenance mode, issue a Full Stall Status.","OTE(Sts_FullStall)","30"
RCOMMENT,"P_ValveSO:AOI","Logic","============================================================$NVALVE TRANSIT STALL DETECTION$N============================================================$NIf the Valve was told to Open and it hasn$'t reached fully Open,$Nor if it was told to Close and it hasn$'t reached fully Closed,$Nrun the Transit Stall Timer.","TON(Wrk_TransitStallT,?,?)","31"
RCOMMENT,"P_ValveSO:AOI","Logic","If the Transit Stall timer times out and we$'re not in Maintenance Mode,$Nraise the Transit Stall Status (valve moved but did not reach target).","OTE(Sts_TransitStall)","32"
RCOMMENT,"P_ValveSO:AOI","Logic","============================================================$NSHED ON FAULT LOGIC$N============================================================$NThis rung handles latching in of conditions which are configured to cause$Nthe valve to shed (stop).$N$N#####  V2.0-00  2011-09-30 : New rung, new Shed function added  #####$N#####  V2.0-01  2011-11-11:  Moved I/O Fault logic to Sts_NotRdy rung, above.  #####","OTL(Wrk_TransitStall)","33"
RCOMMENT,"P_ValveSO:AOI","Logic","Highest Priority:$NIf the Valve has a Shed Fault OR if the Valve is Disabled or$Nhas a Configuration Error, set it to its FAIL STATE.","OTU(Wrk_Open)","34"
RCOMMENT,"P_ValveSO:AOI","Logic","============================================================$NOUTPUT GENERATION$N============================================================$NIf the Valve is NOT SIMULATED, generate the appropriate outputs for the Valve.$NIf the Valve is not faulted and not disabledm then:$Nif the valve energizes to open and should be open, or$Nif the valve energizes to close and should be closed,$Nthen energize the Output (Out)","OTE(Out)","35"
RCOMMENT,"P_ValveSO:AOI","Logic","============================================================$NDEVICE STATUS GENERATION$N============================================================$NVal_Sts is the current device status, as determined by this AOI,$Nbased on its knowledge of commands executed and feedback.$N(This is the status that should be monitored by, for example, FT Historian.)$N0 = Powerup / Unknown$N1 = Closed$N2 = Opened$N5 = Closing$N6 = Opening$N33 = Device Disabled$N$NVal_Fault is the current device fault status, as determined by this AOI,$Nbased on its knowledge of commands executed and feedback.$N(This is the fault status that should be monitored by, for example, FT Historian.)$N0 = None$N16 = Full Stall$N17 = Transit Stall$N32 = I/O Fault (from Input)$N34 = Configuration Error$N$N#####  V2.0-00  2011-09-30 : New rung, new parameters Val_Sts, Val_Fault added  #####","CLR(Val_Fault)","36"
RCOMMENT,"P_ValveSO:AOI","Logic","These rungs generate the Opening, Opened, Closeping and Closed Status bits.$N$NIf the Valve is in HAND and HAS NO POSITION FEEDBACK, its state is meaningless;$Nturn off ALL the Sts_xxx states!!!!!$N$NIf the Valve is commanded to Open and the feedback doesn$'t yet show it Opened,$Nthe Valve is OpenING.$N$NIf the Valve is commanded to Open and the feedback shows it Opened,$Nthe Valve is Opened.$N$NIf the Valve is commanded to Close and the feedback does not show Closed,$Nthe Valve is CloseING.$N$NIf the Valve is commanded to Close and the feedback shows it has Closed,$Nthe Valve is Closed.","MOV(1,Val_Sts)","37"
RCOMMENT,"P_ValveSO:AOI","Logic","This rung handles the remaining Val_Cmd, Val_Sts and Val_Fault enumerated values.","MOV(34,Val_Fault)","38"
RCOMMENT,"P_ValveSO:AOI","Logic","============================================================$NOPERATOR COMMAND READIES$N============================================================$NReady to Open if in Operator or Maintenance, valve is NOT $'not ready$' and valve is closed,$Nor valve is closing and energizes to close.$N$NReady to Close if in Operator or Maintenance, valve is NOT $'not ready$' and valve is opened,$Nor valve is opening and energizes to open.","OTE(Rdy_Close)","39"
RCOMMENT,"P_ValveSO:AOI","Logic","============================================================$NALARM PROCESSING$N============================================================$NHandle Valve Full Stall (never moved) Alarm Processing using the standard P_Alarm AOI.","Alarm(FullStall)","40"
RCOMMENT,"P_ValveSO:AOI","Logic","Handle Valve Transit Stall (moved but did not complete move)$NAlarm Processing using the standard P_Alarm AOI.","Alarm(TransitStall)","41"
RCOMMENT,"P_ValveSO:AOI","Logic","Handle Interlock Trip Alarm Processing using the standard P_Alarm AOI.","Alarm(IntlkTrip)","42"
RCOMMENT,"P_ValveSO:AOI","Logic","Handle I/O Fault Alarm Processing using the standard P_Alarm AOI.","Alarm(IOFault)","43"
RCOMMENT,"P_ValveSO:AOI","Logic","If ANY alarm is Disabled, Inhibited or Suppressed, set the Alarm Inhibit$Nsummary status bit (which puts the $QI$Q box on the graphic symbol).","OTE(Sts_AlmInh)","44"
RCOMMENT,"P_ValveSO:AOI","Logic","============================================================$NNOTIFICATION VALUE$N============================================================$NIndicate the current alarm notification level as the max of any of the alarms:$N0 = none$N2 = info or prompt only$N4 = warning$N6 = exception (equipment impact)$N8 = fault (equipment failure)$NAdd one for any unsuppressed alarm that is not acknowledged$Nor if any Reset is required (Rdy_Reset = 1) (for blink).$N$N#####  V2.0-00  2011-09-30: Modified to also blink when Reset is Required,  #####$N#####  and moved down to after the Rdy_Reset logic.  #####","MOV(Wrk_Notify,Val_Notify)","45"
RCOMMENT,"P_ValveSO:AOI","Prescan","============================================================$NPRESCAN (POWERUP) HANDLING$N============================================================$NOn Prescan, set the Ownership to NO OWNER (0).","CLR(Val_Owner)","0"
RCOMMENT,"P_ValveSO:AOI","Prescan","$QLurking$Q Program Commands are cleared if they are set as $QEdge$Q triggered$N(cleared by this object as received).$N(Lurking Acknowledge Commands are left to perform their action.)","OTU(PCmd_Close)","1"
RCOMMENT,"P_ValveSO:AOI","Prescan","$QLurking$Q Operator Commands are cleared, as well as Program Reset.","OTU(PCmd_Reset)","2"
RCOMMENT,"P_ValveSO:AOI","Prescan","The Override Command is set to NONE.","CLR(Inp_OvrdCmd)","3"
RCOMMENT,"P_ValveSO:AOI","Prescan","On Prescan, set the valve to its DE-ENERGIZED STATE$N(If Fail Closed, Close it.  If Fail Open, Open it.  Main code will de-energize Output.)","OTL(Wrk_Open)","4"
RCOMMENT,"P_ValveSO:AOI","Prescan","Clear the latched Run Command, latched Shed faults,$Nand reset the fault condition and command retrigger timers.","RES(Wrk_SimCloseT)","5"
RCOMMENT,"P_ValveSO:AOI","Prescan","All Outputs are de-energized on Prescan.","OTU(Out)","6"
RCOMMENT,"P_ValveSO:AOI","Prescan","On Prescan, clear the following:$NVal_Cmd (no command active)$NVal_Fdbk (device position not determined)$NVal_Sts (device status powerup / unknown)$N$N#####  Rev. 2.0, 2011-09-30: Added Val_Cmd, Val_Fdbk, Val_Sts  #####","CLR(Val_Sts)","7"
